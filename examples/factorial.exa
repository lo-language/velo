/*
 recursive factorial calculator
 todo iterative version
*/

receive num;

num = foo();

if num < 0
    fail("I pity the fool!");

if num <= 1
    reply(1);

//result = 1
//
//2..num >>
//    receive x
//    result *= x

reply(num * recur(num - 1));

/*

manage needs by making blocks a tree rather than a list?

every send returns a promise in JS-land


x = foo();

if 4
    a = bar(x);
    b = bar(a);

if 4
    a = Q.when(x, fn(x_v) {bar(x_v);}
    b = Q.when(a, fn(a_v) {bar(a_v);}


///
to compile: explore down, render up

create context
add num to context symbol table as immediate
render select statement:

    fail = function () {};
    reply = function () {};
    recur = function () {};

    if ($_num < 0) {
        fail("I pity the fool!");
    }

    if ($_num <= 1) {
        reply(1);
    }

    recur(num - 1).then(function (val) {
        reply(num * val);
    });

    send();

render select statement
render reply statement

*/