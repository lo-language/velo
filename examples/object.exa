receive args, io;

squareSide is 100;

makeRect = >>:
// >>? label? receptacle? receptor? receiver? path? endpoint? terminal? ->? sink? entry? entrance? reference? ref? target? destination?
// this basically produces the same thing as "acquire" does - so what's a good counterpart to acquire?
// accessor? handle? pointer? is it a location, or a type? it's like a routable type?
// >> has really good message-passing connotations
// target? destination? ship to? like email >>
// label is good, but can you pass labels *around*??
// what if it's a *shipping label*? those are usually used once.

    receive width, height, name;

    reply {
        getHeight: >>:
            reply height;
        ,
        getWidth: >>:
            reply width;
        ,
        getArea: >>:
            reply height * width;
        ,
        setHeight: >>:
            receive height;
        ,
        setWidth: >>:
            receive width;
        ,
        toString: >>:
            reply "`name`: `width` x `height`";
    };
;

makeSquare = >>:

    receive side;

    rect = makeRect(side, side, "square");

    // look what we do here - we whitelist the base class's methods --
    // the base class is otherwise completely encapsulated within the child class

    reply {

        getArea: rect.getArea,

        toString: rect.toString,

        setSide: >>:
            receive side;
            rect.setHeight(side);
            rect.setWidth(side);
        ,
        getSide: >>:
            reply side;
    };
;

square = makeSquare(squareSide);

area = square.getSide();

io.stdout.write("`area`\n");

square.setSide(6);

//square.setHeight(99) catch:
//    io.stdout.write("I guess that didn't work!");
//;

area = square.getArea();

io.stdout.write(square.toString());
io.stdout.write("\n`area`\n");
