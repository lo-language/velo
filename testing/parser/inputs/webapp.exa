action (args, io, env, lib)

    lib.get('http/server', log) => server
    lib.get('http/logger/elf', io.err) => log

    // each action call can be followed by a list of continuations
    server.onRequest()
    >~ (err)
        pass
    >> (request)

        request.response.end("howdy!")
        recur("42")
    >|
        // wrap up

    // the continuations are mapped onto:
    reply() // for channel 0
    fail() // for channel 1
    end() // for channel 2

    // these can be saved like anything else
    listeners.push(reply)
    listeners.remove(reply)

    button.click() >> (click)
        pass

    foo = action (input)
        reply(input * 2)

    file.read() >> foo >| ()
        pass

    server.listen(io.port)
    >~ (err)
        log.err("failed to open port __port.num__: ")
    ->
        log.info("server running on port __port.num__")

    env.on('SIGINT') ->
        io.err.writeLine("received SIGINT")
        server.stop()