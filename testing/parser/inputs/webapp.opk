action (args, io, env, kit) {

    kit.get('http/server', log) => server
    kit.get('http/logger/elf', io.err) => log

    // each action call can be followed by a list of continuations
    server.onRequest()
        >~ (err) {

        }
        >> (request) {

            request.response.end("howdy!")

            recur("42")
        }
        >| {
            // wrap up
        }

    // the continuations are mapped onto:
    reply() // for channel 0
    fail() // for channel 1
    end() // for channel 2

    // these can be saved like anything else
    listeners.push(reply)
    listeners.remove(reply)

    button.click() >> (click) {

    }

    foo = action (input) {
        reply(input * 2)
    }

    file.read() >> foo >| () {


    }

    server.listen(io.port)
        >~ (err) {
            log.err("failed to open port __port.num__: ")
        }
        -> {
            log.info("server running on port __port.num__")
        }

    env.on('SIGINT') -> {
        io.err.writeLine("received SIGINT")
        server.stop()
    }
}