// sync calls

foo();
foo.bar();

x = foo();
(x, y) = foo();

// todo
// x, y = foo();

// async calls

foo;
foo ~ 18;

sessionStore.getByID ~ sessionID;

foo => bar;
foo ~ 47 => (bar, baz);  // destructuring

// handle success only
after bar ~ 48:
    reply "hello";

// handle failure only
after baz ~ 128:
    skip;
catch:
    reply "bummer";

// todo
// after baz(12) mute;

// handle both success and failure
after foo ~ 42:
    reply "yay";
catch:
    reply "darn";

//nil -> foo => x ~> bar;

// future with failure handler
//bar(foo) => baz catch:
//    fail;

// nested requests
// should we support pipes like 42 -> foo -> bar -> baz?
after foo ~ 42 => result:

    after bar ~ result => result:
        baz ~ result => yarp;
    catch:
        fail "narp";
catch:
    reply "darn";

// sync form in expressions

foo(bar());

x = foo() + 7;

// assignment with handler - implemented with an ugly hack in the grammar

x = foo() catch:
    receive error;
    replace "ok";
