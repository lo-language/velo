// sync calls

foo();
foo.bar();

x = foo();
(x, y) = foo();

// todo
// x, y = foo();

// async calls

foo;
*foo(18);

*sessionStore.getByID(sessionID);

//foo => bar;
(bar, baz) = *foo(47);  // destructuring

// handle success only
*bar(48) then {
    reply "hello";
};

// handle failure only
*baz(128) then {
    skip;
}
catch {
    reply "bummer";
};

// todo
// after baz(12) mute;

// handle both success and failure
*foo(42) then {
    reply "yay";
}
catch {
    reply "darn";
};

//nil -> foo => x ~> bar;

// future with failure handler
//bar(foo) => baz catch:
//    fail;

// nested requests
// should we support pipes like 42 -> foo -> bar -> baz?
result = *foo(42) then {

    result = *bar(result) then {

        yarp = *baz(result);
    }
    catch {
        fail "narp";
    };
}
catch {
    reply "darn";
};

// sync form in expressions

foo(bar());

x = foo() + 7;


x = foo() catch {

    receive error;
    substitute "ok";
};


y = *foo() catch {

    receive error;
    substitute "ok";
};
