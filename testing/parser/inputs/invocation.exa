// async by default

foo();           // where foo holds an action address
foo.bar();       // where bar is an action address on record foo

// sync form

x = foo();

//x = foo() ~> bar;

// concurrent form

// capture the result in a promise
nil -> foo => x;

// handle success only
48 -> bar:
    reply 'hello';

// handle failure only
128 -> baz catch:
    reply 'bummer';

// handle both success and failure
42 -> foo:
    reply 'yay';
catch:
    reply 'darn';

//nil -> foo => x ~> bar;

// capture with failure handler
foo -> bar => baz catch:
    receive error;
    fail error;

// nested requests
// should we support pipes like 42 -> foo -> bar -> baz?
42 -> foo:
    receive result;

    result -> bar:
        receive result;
        result -> baz => yarp;
    catch:
        fail 'narp';
catch:
    reply 'darn';

// sync form in expressions

foo(bar());

x = foo() + 7;

// assignment with handler - implemented with an ugly hack in the grammar

x = foo() catch:
    receive error;
    reply 'ok';
