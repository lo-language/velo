test is {

    /*
     * general form (branching construct)
     */


    // sync with no handlers (one-way message)

    foo;        // how it's supposed to work in Lo
    foo.bar();  // only supported for backwards-compatibility with programmers; should emit warning

    // with params
    foo <- (18);
    foo 18;    // alternate style

    // sync with fail handler only

    foo ~> (error) {
        substitute "ok";
    }

    // sync with both handlers
    user.login <- (password) -> (result) {
        reply "ok";
    }
    ~> (error) {
        substitute "ok";
    }

    // async with no handlers
    @foo;

    async sessionStore.getByID <- (sessionID);

    // async with handlers

    // handle success only
    @bar <- (48) -> {
        reply "hello";
    }

    @bar 48 -> {
        reply "hello";
    }

    // handle failure only
    @baz <- (128) ~> (err) {
        reply "bummer";
    }

    // handle both success and failure
    async foo <- (42) -> (a, b) {
        reply "yay";
    }
    ~> {
        reply "darn";
    }

    // nested requests
    // should we support pipes like 42 -> foo -> bar -> baz?
    @foo <- (42) -> (result) {

        @bar <- (result) -> {

            yarp = @baz(result);
        }
        ~> {
            fail "narp";
        }
    }
    ~> {
        reply "darn";
    }


    /*
     * special form (function-application expression)
     */

    x = foo();
    (x, y) = foo();

    // in expressions

    foo(bar());

    x = foo() + 7;

    // todo?
    // x, y = foo();

    // async calls in expressions

    (bar, baz) = @foo(47);  // destructuring


    // todo
    // after baz(12) mute;
};