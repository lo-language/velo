#!/usr/bin/env node
/**=============================================================================
 *
 * Copyright (c) 2013 - 2018 Seth Purcell
 * Licensed under Apache License v2.0 with Runtime Library Exception
 *
 * See LICENSE.txt in the project root for license information.
 *
 * Fame is the spur that the clear spirit doth raise
 * (That last infirmity of noble mind)
 * To scorn delights, and live laborious days;
 =============================================================================*/

/*
 * Date: 12/24/14
 */

'use strict';

process.title = 'velo';

const Program = require('../Program');
const System = require('../runtime/System');

const fs = require('fs');
const util = require('util');
const path = require('path');
const argv = require('minimist')(process.argv.slice(2));

var commands = ['run', 'build', 'dump'];

var cmd = argv._.shift();
var sourceFile = argv._.shift();

if (sourceFile == null) {
    console.error('ERROR', "no source file specified");
    process.exit();
}

var program = new Program(sourceFile, process.cwd());

program.on('ERROR', msg => {
    console.error('ERROR', msg);
});

// program.on('INFO', msg => {
//     console.error('INFO', msg);
// });
//
// program.on('DEBUG', msg => {
//     console.error('DEBUG', msg);
// });

switch (cmd) {

    case 'dump':
        return program.compile().then(function () {
            program.dump(process.stdout);
        });

    case 'build':
        console.error("sorry, building not supported yet");
        //return new NodeBuilder().build(program, argv.build);
        return;

    case 'debug':
        console.error("debug mode");

        // load the crash dump

        // run it

        break;

    case 'run':

        return program.run([argv._, System]).catch(
            function (failParams) {

                var exitCode = 1;

                console.error("Program failed with reason:", failParams);

                // dump the JS that failed
                // return program.dump();


                    // var ostream = fs.createWriteStream('velo_crash.js');
                    // localSpace.dumpModules(ostream);

                    // ostream.on('close', function () { process.exit(exitCode); });

                // if (failParams.length > 0) {
                //
                //     if (typeof failParams[0] === "number") {
                //         exitCode = failParams[0];
                //     }
                //     else {
                //         // todo include line failed at
                //         console.error("FAILED", failParams[0]);
                //     }
                // }


                process.exit(exitCode);
            });

    default:
        console.error("unknown command '" + cmd + "'");
        console.error("valid commands are:", commands.join(', '));
        process.exit(1);
}
