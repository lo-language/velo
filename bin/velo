#!/usr/bin/env node
/**=============================================================================
 *
 * Copyright (c) 2013 - 2017 Seth Purcell
 * Licensed under Apache License v2.0 with Runtime Library Exception
 *
 * See LICENSE.txt in the project root for license information.
 *
 =============================================================================*/

/*
 * Date: 12/24/14
 */

// todo - put all the logic in a tested module and just call into it here

'use strict';

process.title = 'velo';

const util = require('util');
const path = require('path');
const argv = require('minimist')(process.argv.slice(2));

const LocalModuleSpace = require('../linker/LocalModuleSpace');
const LoadAndGo = require('../linker/LoadAndGo');

// const NodeBuilder = require('../pipeline/NodeBuilder');

var commands = ['run', 'build', 'dump'];

var cmd = argv._.shift();
var sourceFile = argv._.shift();

if (sourceFile == null) {
    console.error("error: no source file specified");
    process.exit();
}


// initialize

var localSpace = new LocalModuleSpace(path.dirname(sourceFile));
var program = new LoadAndGo(localSpace, path.basename(sourceFile, '.lo'));

localSpace.on('error', function (file, node, message) {

    console.error(`Error compiling ${file}, line ${node.line}:`, message);
});

switch (cmd) {

    case 'dump':
        return localSpace.resolve(program).then(function () {
            localSpace.dumpModules(process.stdout);
        });

    case 'build':
        console.error("sorry, building not supported yet");
        //return new NodeBuilder().build(program, argv.build);
        return;

    case 'run':
        // have load and go produce an object that can be run?
        // there's the prep stage which involves loading (maybe) to create a runnable
        // can also just directly create a runnable?
        return program.run([argv._, program.getSystem()]).catch(
            function (failParams) {

                var exitCode = 1;

                if (failParams.length > 0) {

                    if (typeof failParams[0] === "number") {
                        exitCode = failParams[0];
                    }
                    else {
                        // todo include line failed at
                        console.error("FAILED", failParams[0]);
                    }
                }

                process.exit(exitCode);
            });

    default:
        console.error("unknown command '" + cmd + "'");
        console.error("valid commands are:", commands.join(', '));
        process.exit(1);
}
