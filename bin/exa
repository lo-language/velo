#!/usr/bin/env node
/*
 * Copyright (C) 2014 by Seth Purcell
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * For everyone who doesn't do it for the money.
 *
 * Author: Seth Purcell
 * Date: 12/24/14
 */

'use strict';

process.title = 'exa';

var Loader = require('./../runtime/Loader');
var util = require('util');
var path = require('path');
var http = require('http');
var fs = require('fs');
var Q = require('q');
var argv = require('minimist')(process.argv.slice(2));

var sourceFile = argv._.shift();

if (sourceFile == null) {
    console.error("error: no source file specified");
    process.exit();
}

// get the path of the module
var modulePath = path.dirname(sourceFile);
var moduleName = path.basename(sourceFile, '.exa');

// todo support specifying more libs on the command line and add to the dir of the main module
var loader = new Loader(modulePath);

if (argv.build != null) {

    var targetPath = argv.build;

    loader.getModule(moduleName).then(
        function (main) {

            return main.getJs();

        }).then(function (js) {

            // write the runtime into the file?

            // write the object file

            var output = '"use strict";\n\
\n\
var Request = require("./runtime/Request");\n\
\n\
var main = function (ignored, rootArgs) {\n\
    var root = ' + js + ';\n\
};\n\
\n\
Request.sendRootRequest(main, [10],\n\
    function () {\n\
        process.exit(0);\n\
    },\n\
    function () {\n\
        process.exit(1);\n\
    });';

            return Q.denodeify(fs.writeFile)(targetPath, output, {encoding: 'utf8'});

        }).done();
}
else {

    var io = {
        stdout: {
            write: function (recur, args, attach) {

                process.stdout.write.apply(process.stdout, args);
                this.reply();
            }
        },
        http: {
            get: function (recur, args) {

                var exaRequest = this;

                http.get(args[0], function (res) {

    //                console.log("Got response: " + res.statusCode);

                    var body = '';

                    res.setEncoding('utf8');
                    res.on('data', function (chunk) {
                        body += chunk;
                    });
                    res.on('end', function () {
                        exaRequest.reply([res, body]);
                    });
                });
            }
        }
    };

    loader.getModule(moduleName).then(
        function (main) {

    //        console.log(util.inspect(main.parse(), {depth: null, colors: true}));
    //        console.error(main.getJs() + '\n\n');

            main.run([argv._, io]).then(
                function (result) {
    //                console.log(result);
                },
                function (msg) {
                    console.error(msg);

                    // inform the OS
                    process.exit(1);
                }
            );
        }).done();
    }