#!/usr/bin/env node

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Seth Purcell. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *-------------------------------------------------------------------------------------------*/

/*
 * Author: Seth Purcell
 * Date: 12/24/14
 */

// todo - put all the logic in a tested module and just call into it here

'use strict';

process.title = 'exa';

var util = require('util');
var path = require('path');
var fs = require('fs');
var Q = require('q');
var argv = require('minimist')(process.argv.slice(2));
var Loader = require('../runtime/Loader');
var IO = require('../runtime/IO');
var System = require('../runtime/System');
var Builder = require('../codegen/Builder');
const Task = require('../runtime/Task');

var sourceFile = argv._.shift();

if (sourceFile == null) {
    console.error("error: no source file specified");
    process.exit();
}

// get the path of the module
var modulePath = path.dirname(sourceFile);
var moduleName = path.basename(sourceFile, '.exa');

var builder = new Builder(modulePath);

// todo support specifying more libs on the command line and add to the dir of the main module
var loader = new Loader(modulePath);

if (argv.build != null) {

    var targetPath = argv.build;

    loader.getModule(moduleName).then(
        function (main) {

            return main.getJs();

        }).then(function (js) {

            // write the runtime into the file?

            // write the object file

            var output = '"use strict";\n\
\n\
var Task = require("./runtime/Task");\n\
var IO = require("./runtime/IO");\n\
var argv = require("minimist")(process.argv.slice(2));\n\
\n\
var root = ' + js + ';\n\
\n\
Task.sendRootRequest(root, [argv._, IO],\n\
    function () {\n\
        process.exit(0);\n\
    },\n\
    function () {\n\
        process.exit(1);\n\
    });';

            return Q.denodeify(fs.writeFile)(targetPath, output, {encoding: 'utf8'});

        }).done();
}
else {

    IO.args = argv;

    builder.build(moduleName).then(
        function (fn) {

            var d = Q.defer();

            Task.sendRootRequest(fn, [argv._, IO, System], d.resolve.bind(d), d.reject.bind(d));

            return d.promise;

            //console.log(result);
        },
        function (msg) {
            throw msg;
        }
    ).done();
}