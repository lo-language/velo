/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"block":6,"BEGIN":7,"block_repetition0":8,"END":9,"statement":10,"RECEIVE":11,"statement_repetition0":12,"ID":13,";":14,"expr":15,"termination":16,"assignment":17,"conditional":18,"SKIP":19,"CHANNEL":20,"(":21,"termination_repetition0":22,"termination_option0":23,")":24,"atom":25,"++":26,"--":27,"assignment_op":28,"=":29,"+=":30,"-=":31,"*=":32,"/=":33,"%=":34,"IF":35,"ELSE":36,"literal":37,"[":38,"atom_option0":39,"]":40,".":41,"request":42,"BOOLEAN":43,"NUMBER":44,"STRING":45,"literal_repetition0":46,"literal_option0":47,"{":48,"literal_repetition1":49,"literal_option1":50,"}":51,"dyad":52,":":53,"request_repetition0":54,"request_option0":55,"unary_expr":56,"#":57,"!":58,"+":59,"-":60,"*":61,"/":62,"%":63,"<":64,">":65,"<=":66,">=":67,"==":68,"!=":69,"AND":70,"OR":71,"HOLDS":72,"SEQ":73,"connection":74,"->":75,"~>":76,">>":77,",":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",9:"END",11:"RECEIVE",13:"ID",14:";",19:"SKIP",20:"CHANNEL",21:"(",24:")",26:"++",27:"--",29:"=",30:"+=",31:"-=",32:"*=",33:"/=",34:"%=",35:"IF",36:"ELSE",38:"[",40:"]",41:".",43:"BOOLEAN",44:"NUMBER",45:"STRING",48:"{",51:"}",53:":",57:"#",58:"!",59:"+",60:"-",61:"*",62:"/",63:"%",64:"<",65:">",66:"<=",67:">=",68:"==",69:"!=",70:"AND",71:"OR",72:"HOLDS",73:"SEQ",75:"->",76:"~>",77:">>",78:","},
productions_: [0,[3,2],[6,3],[10,4],[10,2],[10,2],[10,2],[10,1],[10,2],[16,5],[17,2],[17,2],[17,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[18,3],[18,5],[18,5],[25,1],[25,1],[25,4],[25,3],[25,3],[25,1],[37,1],[37,1],[37,1],[37,4],[37,4],[37,1],[52,1],[52,3],[42,5],[56,1],[56,2],[56,2],[15,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[74,3],[74,3],[74,3],[4,0],[4,2],[8,0],[8,2],[12,0],[12,3],[22,0],[22,3],[23,0],[23,1],[39,0],[39,1],[46,0],[46,3],[47,0],[47,1],[49,0],[49,3],[50,0],[50,1],[54,0],[54,3],[55,0],[55,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'program', statements: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: "receive", names: $$[$0-2].concat($$[$0-1])};
break;
case 8:this.$ = ["skip"];
break;
case 9:this.$ = {type: "termination", channel: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 10:this.$ = {type: "assign", op: $$[$0], left: $$[$0-1]};
break;
case 11:this.$ = {type: "assign", op: $$[$0], left: $$[$0-1]};
break;
case 12:this.$ = {type: "assign", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 19:this.$ = {type: "conditional", predicate: $$[$0-1], positive: $$[$0]};
break;
case 20:this.$ = {type: "conditional", predicate: $$[$0-3], positive: $$[$0-2], negative: $$[$0]};
break;
case 21:this.$ = {type: "conditional", predicate: $$[$0-3], positive: $$[$0-2], negative: $$[$0]};
break;
case 23:this.$ = {type: "id", name: $$[$0]};
break;
case 24:this.$ = {type: "subscript", list: $$[$0-3], index: $$[$0-1]};
break;
case 25:this.$ = {type: "select", set: $$[$0-2], member: $$[$0]};
break;
case 26:this.$ = $$[$0-1];
break;
case 28:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 29:this.$ = {type: 'number', val: parseFloat($$[$0])};
break;
case 30:this.$ = {type: 'string', val: $$[$0]};
break;
case 31:this.$ = {type: "list", elements: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 32:this.$ = {type: "set", members: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 33:this.$ = {type: "block", statements: $$[$0]};
break;
case 35:this.$ = ["dyad", $$[$0-2], $$[$0]];;
break;
case 36:this.$ = {type: "request", to: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 38:this.$ = {type: "cardinality", operand: $$[$0]};
break;
case 39:this.$ = {type: "complement", operand: $$[$0]};
break;
case 41:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 42:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 43:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 44:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 45:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 46:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 47:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 48:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 49:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 50:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 51:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 52:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 53:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 54:this.$ = {type: "holds", left: $$[$0-2], right: $$[$0]};
break;
case 55:this.$ = {type: "sequence", left: $$[$0-2], right: $$[$0]};
break;
case 57:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 58:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 59:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 60:this.$ = [];
break;
case 61:$$[$0-1].push($$[$0]);
break;
case 62:this.$ = [];
break;
case 63:$$[$0-1].push($$[$0]);
break;
case 64:this.$ = [];
break;
case 65:$$[$0-2].push($$[$0-1]);
break;
case 66:this.$ = [];
break;
case 67:$$[$0-2].push($$[$0-1]);
break;
case 72:this.$ = [];
break;
case 73:$$[$0-2].push($$[$0-1]);
break;
case 76:this.$ = [];
break;
case 77:$$[$0-2].push($$[$0-1]);
break;
case 80:this.$ = [];
break;
case 81:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,60],7:[2,60],11:[2,60],13:[2,60],19:[2,60],20:[2,60],21:[2,60],35:[2,60],38:[2,60],43:[2,60],44:[2,60],45:[2,60],48:[2,60],57:[2,60],58:[2,60]},{1:[3]},{5:[1,3],6:27,7:[1,28],10:4,11:[1,5],13:[1,19],15:6,16:7,17:8,18:9,19:[1,10],20:[1,13],21:[1,20],25:14,35:[1,15],37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{1:[2,1]},{5:[2,61],7:[2,61],11:[2,61],13:[2,61],19:[2,61],20:[2,61],21:[2,61],35:[2,61],38:[2,61],43:[2,61],44:[2,61],45:[2,61],48:[2,61],57:[2,61],58:[2,61]},{12:29,13:[2,64]},{14:[1,30],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48]},{14:[1,49]},{14:[1,50]},{5:[2,7],7:[2,7],9:[2,7],11:[2,7],13:[2,7],19:[2,7],20:[2,7],21:[2,7],35:[2,7],38:[2,7],43:[2,7],44:[2,7],45:[2,7],48:[2,7],57:[2,7],58:[2,7]},{14:[1,51]},{7:[2,40],14:[2,40],24:[2,40],40:[2,40],51:[2,40],53:[2,40],59:[2,40],60:[2,40],61:[2,40],62:[2,40],63:[2,40],64:[2,40],65:[2,40],66:[2,40],67:[2,40],68:[2,40],69:[2,40],70:[2,40],71:[2,40],72:[2,40],73:[2,40],75:[2,40],76:[2,40],77:[2,40],78:[2,40]},{7:[2,56],14:[2,56],24:[2,56],40:[2,56],51:[2,56],53:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],69:[2,56],70:[2,56],71:[2,56],72:[2,56],73:[2,56],75:[2,56],76:[2,56],77:[2,56],78:[2,56]},{21:[1,52]},{14:[2,37],21:[1,58],26:[1,53],27:[1,54],28:55,29:[1,59],30:[1,60],31:[1,61],32:[1,62],33:[1,63],34:[1,64],38:[1,56],41:[1,57],59:[2,37],60:[2,37],61:[2,37],62:[2,37],63:[2,37],64:[2,37],65:[2,37],66:[2,37],67:[2,37],68:[2,37],69:[2,37],70:[2,37],71:[2,37],72:[2,37],73:[2,37],75:[2,37],76:[2,37],77:[2,37]},{6:27,7:[1,28],13:[1,19],15:65,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],21:[1,20],25:67,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26]},{6:27,7:[1,28],13:[1,19],21:[1,20],25:68,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26]},{7:[2,22],14:[2,22],21:[2,22],24:[2,22],26:[2,22],27:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],38:[2,22],40:[2,22],41:[2,22],51:[2,22],53:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],64:[2,22],65:[2,22],66:[2,22],67:[2,22],68:[2,22],69:[2,22],70:[2,22],71:[2,22],72:[2,22],73:[2,22],75:[2,22],76:[2,22],77:[2,22],78:[2,22]},{7:[2,23],14:[2,23],21:[2,23],24:[2,23],26:[2,23],27:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],38:[2,23],40:[2,23],41:[2,23],51:[2,23],53:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],64:[2,23],65:[2,23],66:[2,23],67:[2,23],68:[2,23],69:[2,23],70:[2,23],71:[2,23],72:[2,23],73:[2,23],75:[2,23],76:[2,23],77:[2,23],78:[2,23]},{6:27,7:[1,28],13:[1,19],15:69,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{7:[2,27],14:[2,27],21:[2,27],24:[2,27],26:[2,27],27:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],38:[2,27],40:[2,27],41:[2,27],51:[2,27],53:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],75:[2,27],76:[2,27],77:[2,27],78:[2,27]},{7:[2,28],14:[2,28],21:[2,28],24:[2,28],26:[2,28],27:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],38:[2,28],40:[2,28],41:[2,28],51:[2,28],53:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28]},{7:[2,29],14:[2,29],21:[2,29],24:[2,29],26:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],38:[2,29],40:[2,29],41:[2,29],51:[2,29],53:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],67:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29]},{7:[2,30],14:[2,30],21:[2,30],24:[2,30],26:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],38:[2,30],40:[2,30],41:[2,30],51:[2,30],53:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30],63:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30]},{7:[2,72],13:[2,72],21:[2,72],38:[2,72],40:[2,72],43:[2,72],44:[2,72],45:[2,72],46:70,48:[2,72],57:[2,72],58:[2,72]},{7:[2,76],13:[2,76],21:[2,76],38:[2,76],43:[2,76],44:[2,76],45:[2,76],48:[2,76],49:71,51:[2,76],57:[2,76],58:[2,76]},{7:[2,33],14:[2,33],21:[2,33],24:[2,33],26:[2,33],27:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],38:[2,33],40:[2,33],41:[2,33],51:[2,33],53:[2,33],59:[2,33],60:[2,33],61:[2,33],62:[2,33],63:[2,33],64:[2,33],65:[2,33],66:[2,33],67:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],75:[2,33],76:[2,33],77:[2,33],78:[2,33]},{7:[2,62],8:72,9:[2,62],11:[2,62],13:[2,62],19:[2,62],20:[2,62],21:[2,62],35:[2,62],38:[2,62],43:[2,62],44:[2,62],45:[2,62],48:[2,62],57:[2,62],58:[2,62]},{13:[1,73]},{5:[2,4],7:[2,4],9:[2,4],11:[2,4],13:[2,4],19:[2,4],20:[2,4],21:[2,4],35:[2,4],38:[2,4],43:[2,4],44:[2,4],45:[2,4],48:[2,4],57:[2,4],58:[2,4]},{6:27,7:[1,28],13:[1,19],15:74,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:75,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:76,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:77,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:78,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:79,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:80,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:81,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:82,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:83,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:84,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:85,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:86,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:87,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:88,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:89,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:90,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:91,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{5:[2,5],7:[2,5],9:[2,5],11:[2,5],13:[2,5],19:[2,5],20:[2,5],21:[2,5],35:[2,5],38:[2,5],43:[2,5],44:[2,5],45:[2,5],48:[2,5],57:[2,5],58:[2,5]},{5:[2,6],7:[2,6],9:[2,6],11:[2,6],13:[2,6],19:[2,6],20:[2,6],21:[2,6],35:[2,6],38:[2,6],43:[2,6],44:[2,6],45:[2,6],48:[2,6],57:[2,6],58:[2,6]},{5:[2,8],7:[2,8],9:[2,8],11:[2,8],13:[2,8],19:[2,8],20:[2,8],21:[2,8],35:[2,8],38:[2,8],43:[2,8],44:[2,8],45:[2,8],48:[2,8],57:[2,8],58:[2,8]},{7:[2,66],13:[2,66],21:[2,66],22:92,24:[2,66],38:[2,66],43:[2,66],44:[2,66],45:[2,66],48:[2,66],57:[2,66],58:[2,66]},{14:[2,10]},{14:[2,11]},{6:27,7:[1,28],13:[1,19],15:93,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:95,21:[1,20],25:66,37:18,38:[1,25],39:94,40:[2,70],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{13:[1,96]},{7:[2,80],13:[2,80],21:[2,80],24:[2,80],38:[2,80],43:[2,80],44:[2,80],45:[2,80],48:[2,80],54:97,57:[2,80],58:[2,80]},{7:[2,13],13:[2,13],21:[2,13],38:[2,13],43:[2,13],44:[2,13],45:[2,13],48:[2,13],57:[2,13],58:[2,13]},{7:[2,14],13:[2,14],21:[2,14],38:[2,14],43:[2,14],44:[2,14],45:[2,14],48:[2,14],57:[2,14],58:[2,14]},{7:[2,15],13:[2,15],21:[2,15],38:[2,15],43:[2,15],44:[2,15],45:[2,15],48:[2,15],57:[2,15],58:[2,15]},{7:[2,16],13:[2,16],21:[2,16],38:[2,16],43:[2,16],44:[2,16],45:[2,16],48:[2,16],57:[2,16],58:[2,16]},{7:[2,17],13:[2,17],21:[2,17],38:[2,17],43:[2,17],44:[2,17],45:[2,17],48:[2,17],57:[2,17],58:[2,17]},{7:[2,18],13:[2,18],21:[2,18],38:[2,18],43:[2,18],44:[2,18],45:[2,18],48:[2,18],57:[2,18],58:[2,18]},{6:98,7:[1,28],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48]},{7:[2,37],14:[2,37],21:[1,58],24:[2,37],38:[1,56],40:[2,37],41:[1,57],51:[2,37],53:[2,37],59:[2,37],60:[2,37],61:[2,37],62:[2,37],63:[2,37],64:[2,37],65:[2,37],66:[2,37],67:[2,37],68:[2,37],69:[2,37],70:[2,37],71:[2,37],72:[2,37],73:[2,37],75:[2,37],76:[2,37],77:[2,37],78:[2,37]},{7:[2,38],14:[2,38],21:[1,58],24:[2,38],38:[1,56],40:[2,38],41:[1,57],51:[2,38],53:[2,38],59:[2,38],60:[2,38],61:[2,38],62:[2,38],63:[2,38],64:[2,38],65:[2,38],66:[2,38],67:[2,38],68:[2,38],69:[2,38],70:[2,38],71:[2,38],72:[2,38],73:[2,38],75:[2,38],76:[2,38],77:[2,38],78:[2,38]},{7:[2,39],14:[2,39],21:[1,58],24:[2,39],38:[1,56],40:[2,39],41:[1,57],51:[2,39],53:[2,39],59:[2,39],60:[2,39],61:[2,39],62:[2,39],63:[2,39],64:[2,39],65:[2,39],66:[2,39],67:[2,39],68:[2,39],69:[2,39],70:[2,39],71:[2,39],72:[2,39],73:[2,39],75:[2,39],76:[2,39],77:[2,39],78:[2,39]},{24:[1,99],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48]},{6:27,7:[1,28],13:[1,19],15:101,21:[1,20],25:66,37:18,38:[1,25],40:[2,74],42:21,43:[1,22],44:[1,23],45:[1,24],47:100,48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],13:[1,19],15:104,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],50:102,51:[2,78],52:103,56:11,57:[1,16],58:[1,17],74:12},{6:27,7:[1,28],9:[1,105],10:106,11:[1,5],13:[1,19],15:6,16:7,17:8,18:9,19:[1,10],20:[1,13],21:[1,20],25:14,35:[1,15],37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{14:[1,107],78:[1,108]},{7:[2,41],14:[2,41],24:[2,41],40:[2,41],51:[2,41],53:[2,41],59:[2,41],60:[2,41],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,41],71:[2,41],72:[2,41],73:[2,41],75:[2,41],76:[2,41],77:[2,41],78:[2,41]},{7:[2,42],14:[2,42],24:[2,42],40:[2,42],51:[2,42],53:[2,42],59:[2,42],60:[2,42],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,42],71:[2,42],72:[2,42],73:[2,42],75:[2,42],76:[2,42],77:[2,42],78:[2,42]},{7:[2,43],14:[2,43],24:[2,43],40:[2,43],51:[2,43],53:[2,43],59:[2,43],60:[2,43],61:[2,43],62:[2,43],63:[2,43],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,43],71:[2,43],72:[2,43],73:[2,43],75:[2,43],76:[2,43],77:[2,43],78:[2,43]},{7:[2,44],14:[2,44],24:[2,44],40:[2,44],51:[2,44],53:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,44],71:[2,44],72:[2,44],73:[2,44],75:[2,44],76:[2,44],77:[2,44],78:[2,44]},{7:[2,45],14:[2,45],24:[2,45],40:[2,45],51:[2,45],53:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,45],71:[2,45],72:[2,45],73:[2,45],75:[2,45],76:[2,45],77:[2,45],78:[2,45]},{7:[2,46],14:[2,46],24:[2,46],40:[2,46],51:[2,46],53:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],68:[1,40],69:[1,41],70:[2,46],71:[2,46],72:[2,46],73:[2,46],75:[2,46],76:[2,46],77:[2,46],78:[2,46]},{7:[2,47],14:[2,47],24:[2,47],40:[2,47],51:[2,47],53:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[1,40],69:[1,41],70:[2,47],71:[2,47],72:[2,47],73:[2,47],75:[2,47],76:[2,47],77:[2,47],78:[2,47]},{7:[2,48],14:[2,48],24:[2,48],40:[2,48],51:[2,48],53:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[1,40],69:[1,41],70:[2,48],71:[2,48],72:[2,48],73:[2,48],75:[2,48],76:[2,48],77:[2,48],78:[2,48]},{7:[2,49],14:[2,49],24:[2,49],40:[2,49],51:[2,49],53:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[1,40],69:[1,41],70:[2,49],71:[2,49],72:[2,49],73:[2,49],75:[2,49],76:[2,49],77:[2,49],78:[2,49]},{7:[2,50],14:[2,50],24:[2,50],40:[2,50],51:[2,50],53:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50],69:[2,50],70:[2,50],71:[2,50],72:[2,50],73:[2,50],75:[2,50],76:[2,50],77:[2,50],78:[2,50]},{7:[2,51],14:[2,51],24:[2,51],40:[2,51],51:[2,51],53:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51],69:[2,51],70:[2,51],71:[2,51],72:[2,51],73:[2,51],75:[2,51],76:[2,51],77:[2,51],78:[2,51]},{7:[2,52],14:[2,52],24:[2,52],40:[2,52],51:[2,52],53:[2,52],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,52],71:[2,52],72:[2,52],73:[2,52],75:[2,52],76:[2,52],77:[2,52],78:[2,52]},{7:[2,53],14:[2,53],24:[2,53],40:[2,53],51:[2,53],53:[2,53],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,53],71:[2,53],72:[2,53],73:[2,53],75:[2,53],76:[2,53],77:[2,53],78:[2,53]},{7:[2,54],14:[2,54],24:[2,54],40:[2,54],51:[2,54],53:[2,54],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,54],71:[2,54],72:[2,54],73:[2,54],75:[2,54],76:[2,54],77:[2,54],78:[2,54]},{7:[2,55],14:[2,55],24:[2,55],40:[2,55],51:[2,55],53:[2,55],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[2,55],71:[2,55],72:[2,55],73:[2,55],75:[2,55],76:[2,55],77:[2,55],78:[2,55]},{7:[2,57],14:[2,57],24:[2,57],40:[2,57],51:[2,57],53:[2,57],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[2,57],76:[2,57],77:[2,57],78:[2,57]},{7:[2,58],14:[2,58],24:[2,58],40:[2,58],51:[2,58],53:[2,58],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[2,58],76:[2,58],77:[2,58],78:[2,58]},{7:[2,59],14:[2,59],24:[2,59],40:[2,59],51:[2,59],53:[2,59],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[2,59],76:[2,59],77:[2,59],78:[2,59]},{6:27,7:[1,28],13:[1,19],15:110,21:[1,20],23:109,24:[2,68],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{14:[2,12],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48]},{40:[1,111]},{40:[2,71],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48]},{7:[2,25],14:[2,25],21:[2,25],24:[2,25],26:[2,25],27:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],38:[2,25],40:[2,25],41:[2,25],51:[2,25],53:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],75:[2,25],76:[2,25],77:[2,25],78:[2,25]},{6:27,7:[1,28],13:[1,19],15:113,21:[1,20],24:[2,82],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],55:112,56:11,57:[1,16],58:[1,17],74:12},{5:[2,19],7:[2,19],9:[2,19],11:[2,19],13:[2,19],19:[2,19],20:[2,19],21:[2,19],35:[2,19],36:[1,114],38:[2,19],43:[2,19],44:[2,19],45:[2,19],48:[2,19],57:[2,19],58:[2,19]},{7:[2,26],14:[2,26],21:[2,26],24:[2,26],26:[2,26],27:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],38:[2,26],40:[2,26],41:[2,26],51:[2,26],53:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],75:[2,26],76:[2,26],77:[2,26],78:[2,26]},{40:[1,115]},{40:[2,75],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48],78:[1,116]},{51:[1,117]},{51:[2,79],78:[1,118]},{51:[2,34],53:[1,119],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48],78:[2,34]},{5:[2,2],7:[2,2],9:[2,2],11:[2,2],13:[2,2],14:[2,2],19:[2,2],20:[2,2],21:[2,2],24:[2,2],26:[2,2],27:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2],38:[2,2],40:[2,2],41:[2,2],43:[2,2],44:[2,2],45:[2,2],48:[2,2],51:[2,2],53:[2,2],57:[2,2],58:[2,2],59:[2,2],60:[2,2],61:[2,2],62:[2,2],63:[2,2],64:[2,2],65:[2,2],66:[2,2],67:[2,2],68:[2,2],69:[2,2],70:[2,2],71:[2,2],72:[2,2],73:[2,2],75:[2,2],76:[2,2],77:[2,2],78:[2,2]},{7:[2,63],9:[2,63],11:[2,63],13:[2,63],19:[2,63],20:[2,63],21:[2,63],35:[2,63],38:[2,63],43:[2,63],44:[2,63],45:[2,63],48:[2,63],57:[2,63],58:[2,63]},{5:[2,3],7:[2,3],9:[2,3],11:[2,3],13:[2,3],19:[2,3],20:[2,3],21:[2,3],35:[2,3],38:[2,3],43:[2,3],44:[2,3],45:[2,3],48:[2,3],57:[2,3],58:[2,3]},{13:[2,65]},{24:[1,120]},{24:[2,69],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48],78:[1,121]},{7:[2,24],14:[2,24],21:[2,24],24:[2,24],26:[2,24],27:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],38:[2,24],40:[2,24],41:[2,24],51:[2,24],53:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24],65:[2,24],66:[2,24],67:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],75:[2,24],76:[2,24],77:[2,24],78:[2,24]},{24:[1,122]},{24:[2,83],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48],78:[1,123]},{6:124,7:[1,28],18:125,35:[1,15]},{7:[2,31],14:[2,31],21:[2,31],24:[2,31],26:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],38:[2,31],40:[2,31],41:[2,31],51:[2,31],53:[2,31],59:[2,31],60:[2,31],61:[2,31],62:[2,31],63:[2,31],64:[2,31],65:[2,31],66:[2,31],67:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31]},{7:[2,73],13:[2,73],21:[2,73],38:[2,73],40:[2,73],43:[2,73],44:[2,73],45:[2,73],48:[2,73],57:[2,73],58:[2,73]},{7:[2,32],14:[2,32],21:[2,32],24:[2,32],26:[2,32],27:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],38:[2,32],40:[2,32],41:[2,32],51:[2,32],53:[2,32],59:[2,32],60:[2,32],61:[2,32],62:[2,32],63:[2,32],64:[2,32],65:[2,32],66:[2,32],67:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],75:[2,32],76:[2,32],77:[2,32],78:[2,32]},{7:[2,77],13:[2,77],21:[2,77],38:[2,77],43:[2,77],44:[2,77],45:[2,77],48:[2,77],51:[2,77],57:[2,77],58:[2,77]},{6:27,7:[1,28],13:[1,19],15:126,21:[1,20],25:66,37:18,38:[1,25],42:21,43:[1,22],44:[1,23],45:[1,24],48:[1,26],56:11,57:[1,16],58:[1,17],74:12},{14:[2,9]},{7:[2,67],13:[2,67],21:[2,67],24:[2,67],38:[2,67],43:[2,67],44:[2,67],45:[2,67],48:[2,67],57:[2,67],58:[2,67]},{7:[2,36],14:[2,36],21:[2,36],24:[2,36],26:[2,36],27:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],34:[2,36],38:[2,36],40:[2,36],41:[2,36],51:[2,36],53:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36],65:[2,36],66:[2,36],67:[2,36],68:[2,36],69:[2,36],70:[2,36],71:[2,36],72:[2,36],73:[2,36],75:[2,36],76:[2,36],77:[2,36],78:[2,36]},{7:[2,81],13:[2,81],21:[2,81],24:[2,81],38:[2,81],43:[2,81],44:[2,81],45:[2,81],48:[2,81],57:[2,81],58:[2,81]},{5:[2,20],7:[2,20],9:[2,20],11:[2,20],13:[2,20],19:[2,20],20:[2,20],21:[2,20],35:[2,20],38:[2,20],43:[2,20],44:[2,20],45:[2,20],48:[2,20],57:[2,20],58:[2,20]},{5:[2,21],7:[2,21],9:[2,21],11:[2,21],13:[2,21],19:[2,21],20:[2,21],21:[2,21],35:[2,21],38:[2,21],43:[2,21],44:[2,21],45:[2,21],48:[2,21],57:[2,21],58:[2,21]},{51:[2,35],59:[1,31],60:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],75:[1,46],76:[1,47],77:[1,48],78:[2,35]}],
defaultActions: {3:[2,1],53:[2,10],54:[2,11],108:[2,65],120:[2,9]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 43
break;
case 11:return 44
break;
case 12:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 45;
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 45;
break;
case 14:return 38
break;
case 15:return 40
break;
case 16:return 21
break;
case 17:return 24
break;
case 18:return 48
break;
case 19:return 51
break;
case 20:return 78
break;
case 21:return 53
break;
case 22:return 14
break;
case 23:return 73
break;
case 24:return 41
break;
case 25:return 66
break;
case 26:return 67
break;
case 27:return 68
break;
case 28:return 69
break;
case 29:return 70
break;
case 30:return 71
break;
case 31:return 26
break;
case 32:return 27
break;
case 33:return 30
break;
case 34:return 31
break;
case 35:return 32
break;
case 36:return 33
break;
case 37:return 34
break;
case 38:return 75
break;
case 39:return 76
break;
case 40:return 77
break;
case 41:return 59
break;
case 42:return 60
break;
case 43:return 61
break;
case 44:return 62
break;
case 45:return 63
break;
case 46:return 64
break;
case 47:return 65
break;
case 48:return 29
break;
case 49:return '?'
break;
case 50:return 57
break;
case 51:return 58
break;
case 52:return 35
break;
case 53:return 36
break;
case 54:return 11
break;
case 55:return 72
break;
case 56:return 19
break;
case 57:return 20
break;
case 58:return 'STOP'
break;
case 59:return 'TRY'
break;
case 60:return 13
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:true|false\b)/,/^(?:(([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:~>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:receive\b)/,/^(?:holds\b)/,/^(?:skip\b)/,/^(?:reply|fail\b)/,/^(?:stop\b)/,/^(?:try\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}