/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"block":6,"BEGIN":7,"block_repetition0":8,"END":9,"statement":10,"RECEIVE":11,"statement_repetition0":12,"ID":13,";":14,"expr":15,"termination":16,"assignment":17,"conditional":18,"loop":19,"SKIP":20,"CHANNEL":21,"(":22,"termination_repetition0":23,"termination_option0":24,")":25,"atom":26,"++":27,"--":28,"assignment_op":29,"=":30,"+=":31,"-=":32,"*=":33,"/=":34,"%=":35,"IF":36,":":37,"ELSE":38,"WHILE":39,"literal":40,"[":41,"atom_option0":42,"]":43,".":44,"request":45,"BOOLEAN":46,"NUMBER":47,"STRING":48,"literal_repetition0":49,"literal_option0":50,"{":51,"literal_repetition1":52,"literal_option1":53,"}":54,"dyad":55,"request_repetition0":56,"request_option0":57,"unary_expr":58,"#":59,"!":60,"+":61,"-":62,"*":63,"/":64,"%":65,"<":66,">":67,"<=":68,">=":69,"==":70,"!=":71,"AND":72,"OR":73,"IN":74,"SEQ":75,"connection":76,"->":77,"~>":78,">>":79,",":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",9:"END",11:"RECEIVE",13:"ID",14:";",20:"SKIP",21:"CHANNEL",22:"(",25:")",27:"++",28:"--",30:"=",31:"+=",32:"-=",33:"*=",34:"/=",35:"%=",36:"IF",37:":",38:"ELSE",39:"WHILE",41:"[",43:"]",44:".",46:"BOOLEAN",47:"NUMBER",48:"STRING",51:"{",54:"}",59:"#",60:"!",61:"+",62:"-",63:"*",64:"/",65:"%",66:"<",67:">",68:"<=",69:">=",70:"==",71:"!=",72:"AND",73:"OR",74:"IN",75:"SEQ",77:"->",78:"~>",79:">>",80:","},
productions_: [0,[3,2],[6,3],[10,4],[10,2],[10,2],[10,2],[10,1],[10,1],[10,2],[16,5],[17,2],[17,2],[17,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[18,4],[18,7],[18,6],[19,4],[26,1],[26,1],[26,4],[26,3],[26,3],[26,1],[40,1],[40,1],[40,1],[40,4],[40,4],[40,1],[55,1],[55,3],[45,5],[58,1],[58,2],[58,2],[15,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[76,3],[76,3],[76,3],[4,0],[4,2],[8,0],[8,2],[12,0],[12,3],[23,0],[23,3],[24,0],[24,1],[42,0],[42,1],[49,0],[49,3],[50,0],[50,1],[52,0],[52,3],[53,0],[53,1],[56,0],[56,3],[57,0],[57,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'program', statements: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: "receive", names: $$[$0-2].concat($$[$0-1])};
break;
case 9:this.$ = {type: 'skip'};
break;
case 10:this.$ = {type: "termination", channel: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 11:this.$ = {type: "assign", op: $$[$0], left: $$[$0-1]};
break;
case 12:this.$ = {type: "assign", op: $$[$0], left: $$[$0-1]};
break;
case 13:this.$ = {type: "assign", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 20:this.$ = {type: "conditional", predicate: $$[$0-2], affirmative: $$[$0]};
break;
case 21:this.$ = {type: "conditional", predicate: $$[$0-5], affirmative: $$[$0-3], negative: $$[$0]};
break;
case 22:this.$ = {type: "conditional", predicate: $$[$0-4], affirmative: $$[$0-2], negative: $$[$0]};
break;
case 23:this.$ = {type: "loop", condition: $$[$0-2], statements: $$[$0]};
break;
case 25:this.$ = {type: "id", name: $$[$0]};
break;
case 26:this.$ = {type: "subscript", list: $$[$0-3], index: $$[$0-1]};
break;
case 27:this.$ = {type: "select", set: $$[$0-2], member: $$[$0]};
break;
case 28:this.$ = $$[$0-1];
break;
case 30:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 31:this.$ = {type: 'number', val: parseFloat($$[$0])};
break;
case 32:this.$ = {type: 'string', val: $$[$0]};
break;
case 33:this.$ = {type: "list", elements: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 34:this.$ = {type: "set", members: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 35:this.$ = {type: "closure", statements: $$[$0]};
break;
case 37:this.$ = ["dyad", $$[$0-2], $$[$0]];;
break;
case 38:this.$ = {type: "request", to: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 40:this.$ = {type: "cardinality", operand: $$[$0]};
break;
case 41:this.$ = {type: "complement", operand: $$[$0]};
break;
case 43:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 44:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 45:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 46:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 47:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 48:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 49:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 50:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 51:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 52:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 53:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 54:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 55:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 56:this.$ = {type: "in", left: $$[$0-2], right: $$[$0]};
break;
case 57:this.$ = {type: "sequence", first: $$[$0-2], last: $$[$0]};
break;
case 59:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 60:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 61:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 62:this.$ = [];
break;
case 63:$$[$0-1].push($$[$0]);
break;
case 64:this.$ = [];
break;
case 65:$$[$0-1].push($$[$0]);
break;
case 66:this.$ = [];
break;
case 67:$$[$0-2].push($$[$0-1]);
break;
case 68:this.$ = [];
break;
case 69:$$[$0-2].push($$[$0-1]);
break;
case 74:this.$ = [];
break;
case 75:$$[$0-2].push($$[$0-1]);
break;
case 78:this.$ = [];
break;
case 79:$$[$0-2].push($$[$0-1]);
break;
case 82:this.$ = [];
break;
case 83:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,62],7:[2,62],11:[2,62],13:[2,62],20:[2,62],21:[2,62],22:[2,62],36:[2,62],39:[2,62],41:[2,62],46:[2,62],47:[2,62],48:[2,62],51:[2,62],59:[2,62],60:[2,62]},{1:[3]},{5:[1,3],6:29,7:[1,30],10:4,11:[1,5],13:[1,21],15:6,16:7,17:8,18:9,19:10,20:[1,11],21:[1,14],22:[1,22],26:15,36:[1,16],39:[1,17],40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{1:[2,1]},{5:[2,63],7:[2,63],11:[2,63],13:[2,63],20:[2,63],21:[2,63],22:[2,63],36:[2,63],39:[2,63],41:[2,63],46:[2,63],47:[2,63],48:[2,63],51:[2,63],59:[2,63],60:[2,63]},{12:31,13:[2,66]},{14:[1,32],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50]},{14:[1,51]},{14:[1,52]},{5:[2,7],7:[2,7],9:[2,7],11:[2,7],13:[2,7],20:[2,7],21:[2,7],22:[2,7],36:[2,7],39:[2,7],41:[2,7],46:[2,7],47:[2,7],48:[2,7],51:[2,7],59:[2,7],60:[2,7]},{5:[2,8],7:[2,8],9:[2,8],11:[2,8],13:[2,8],20:[2,8],21:[2,8],22:[2,8],36:[2,8],39:[2,8],41:[2,8],46:[2,8],47:[2,8],48:[2,8],51:[2,8],59:[2,8],60:[2,8]},{14:[1,53]},{14:[2,42],25:[2,42],37:[2,42],43:[2,42],54:[2,42],61:[2,42],62:[2,42],63:[2,42],64:[2,42],65:[2,42],66:[2,42],67:[2,42],68:[2,42],69:[2,42],70:[2,42],71:[2,42],72:[2,42],73:[2,42],74:[2,42],75:[2,42],77:[2,42],78:[2,42],79:[2,42],80:[2,42]},{14:[2,58],25:[2,58],37:[2,58],43:[2,58],54:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],68:[2,58],69:[2,58],70:[2,58],71:[2,58],72:[2,58],73:[2,58],74:[2,58],75:[2,58],77:[2,58],78:[2,58],79:[2,58],80:[2,58]},{22:[1,54]},{14:[2,39],22:[1,60],27:[1,55],28:[1,56],29:57,30:[1,61],31:[1,62],32:[1,63],33:[1,64],34:[1,65],35:[1,66],41:[1,58],44:[1,59],61:[2,39],62:[2,39],63:[2,39],64:[2,39],65:[2,39],66:[2,39],67:[2,39],68:[2,39],69:[2,39],70:[2,39],71:[2,39],72:[2,39],73:[2,39],74:[2,39],75:[2,39],77:[2,39],78:[2,39],79:[2,39]},{6:29,7:[1,30],13:[1,21],15:67,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:69,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],22:[1,22],26:70,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28]},{6:29,7:[1,30],13:[1,21],22:[1,22],26:71,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28]},{14:[2,24],22:[2,24],25:[2,24],27:[2,24],28:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],37:[2,24],41:[2,24],43:[2,24],44:[2,24],54:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24],65:[2,24],66:[2,24],67:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],77:[2,24],78:[2,24],79:[2,24],80:[2,24]},{14:[2,25],22:[2,25],25:[2,25],27:[2,25],28:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],37:[2,25],41:[2,25],43:[2,25],44:[2,25],54:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],77:[2,25],78:[2,25],79:[2,25],80:[2,25]},{6:29,7:[1,30],13:[1,21],15:72,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{14:[2,29],22:[2,29],25:[2,29],27:[2,29],28:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],37:[2,29],41:[2,29],43:[2,29],44:[2,29],54:[2,29],61:[2,29],62:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],67:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],77:[2,29],78:[2,29],79:[2,29],80:[2,29]},{14:[2,30],22:[2,30],25:[2,30],27:[2,30],28:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],37:[2,30],41:[2,30],43:[2,30],44:[2,30],54:[2,30],61:[2,30],62:[2,30],63:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],77:[2,30],78:[2,30],79:[2,30],80:[2,30]},{14:[2,31],22:[2,31],25:[2,31],27:[2,31],28:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],37:[2,31],41:[2,31],43:[2,31],44:[2,31],54:[2,31],61:[2,31],62:[2,31],63:[2,31],64:[2,31],65:[2,31],66:[2,31],67:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],77:[2,31],78:[2,31],79:[2,31],80:[2,31]},{14:[2,32],22:[2,32],25:[2,32],27:[2,32],28:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],37:[2,32],41:[2,32],43:[2,32],44:[2,32],54:[2,32],61:[2,32],62:[2,32],63:[2,32],64:[2,32],65:[2,32],66:[2,32],67:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],77:[2,32],78:[2,32],79:[2,32],80:[2,32]},{7:[2,74],13:[2,74],22:[2,74],41:[2,74],43:[2,74],46:[2,74],47:[2,74],48:[2,74],49:73,51:[2,74],59:[2,74],60:[2,74]},{7:[2,78],13:[2,78],22:[2,78],41:[2,78],46:[2,78],47:[2,78],48:[2,78],51:[2,78],52:74,54:[2,78],59:[2,78],60:[2,78]},{14:[2,35],22:[2,35],25:[2,35],27:[2,35],28:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35],35:[2,35],37:[2,35],41:[2,35],43:[2,35],44:[2,35],54:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35],65:[2,35],66:[2,35],67:[2,35],68:[2,35],69:[2,35],70:[2,35],71:[2,35],72:[2,35],73:[2,35],74:[2,35],75:[2,35],77:[2,35],78:[2,35],79:[2,35],80:[2,35]},{7:[2,64],8:75,9:[2,64],11:[2,64],13:[2,64],20:[2,64],21:[2,64],22:[2,64],36:[2,64],39:[2,64],41:[2,64],46:[2,64],47:[2,64],48:[2,64],51:[2,64],59:[2,64],60:[2,64]},{13:[1,76]},{5:[2,4],7:[2,4],9:[2,4],11:[2,4],13:[2,4],20:[2,4],21:[2,4],22:[2,4],36:[2,4],39:[2,4],41:[2,4],46:[2,4],47:[2,4],48:[2,4],51:[2,4],59:[2,4],60:[2,4]},{6:29,7:[1,30],13:[1,21],15:77,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:78,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:79,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:80,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:81,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:82,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:83,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:84,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:85,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:86,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:87,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:88,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:89,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:90,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:91,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:92,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:93,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:94,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{5:[2,5],7:[2,5],9:[2,5],11:[2,5],13:[2,5],20:[2,5],21:[2,5],22:[2,5],36:[2,5],39:[2,5],41:[2,5],46:[2,5],47:[2,5],48:[2,5],51:[2,5],59:[2,5],60:[2,5]},{5:[2,6],7:[2,6],9:[2,6],11:[2,6],13:[2,6],20:[2,6],21:[2,6],22:[2,6],36:[2,6],39:[2,6],41:[2,6],46:[2,6],47:[2,6],48:[2,6],51:[2,6],59:[2,6],60:[2,6]},{5:[2,9],7:[2,9],9:[2,9],11:[2,9],13:[2,9],20:[2,9],21:[2,9],22:[2,9],36:[2,9],39:[2,9],41:[2,9],46:[2,9],47:[2,9],48:[2,9],51:[2,9],59:[2,9],60:[2,9]},{7:[2,68],13:[2,68],22:[2,68],23:95,25:[2,68],41:[2,68],46:[2,68],47:[2,68],48:[2,68],51:[2,68],59:[2,68],60:[2,68]},{14:[2,11]},{14:[2,12]},{6:29,7:[1,30],13:[1,21],15:96,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:98,22:[1,22],26:68,40:20,41:[1,27],42:97,43:[2,72],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{13:[1,99]},{7:[2,82],13:[2,82],22:[2,82],25:[2,82],41:[2,82],46:[2,82],47:[2,82],48:[2,82],51:[2,82],56:100,59:[2,82],60:[2,82]},{7:[2,14],13:[2,14],22:[2,14],41:[2,14],46:[2,14],47:[2,14],48:[2,14],51:[2,14],59:[2,14],60:[2,14]},{7:[2,15],13:[2,15],22:[2,15],41:[2,15],46:[2,15],47:[2,15],48:[2,15],51:[2,15],59:[2,15],60:[2,15]},{7:[2,16],13:[2,16],22:[2,16],41:[2,16],46:[2,16],47:[2,16],48:[2,16],51:[2,16],59:[2,16],60:[2,16]},{7:[2,17],13:[2,17],22:[2,17],41:[2,17],46:[2,17],47:[2,17],48:[2,17],51:[2,17],59:[2,17],60:[2,17]},{7:[2,18],13:[2,18],22:[2,18],41:[2,18],46:[2,18],47:[2,18],48:[2,18],51:[2,18],59:[2,18],60:[2,18]},{7:[2,19],13:[2,19],22:[2,19],41:[2,19],46:[2,19],47:[2,19],48:[2,19],51:[2,19],59:[2,19],60:[2,19]},{37:[1,101],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50]},{14:[2,39],22:[1,60],25:[2,39],37:[2,39],41:[1,58],43:[2,39],44:[1,59],54:[2,39],61:[2,39],62:[2,39],63:[2,39],64:[2,39],65:[2,39],66:[2,39],67:[2,39],68:[2,39],69:[2,39],70:[2,39],71:[2,39],72:[2,39],73:[2,39],74:[2,39],75:[2,39],77:[2,39],78:[2,39],79:[2,39],80:[2,39]},{37:[1,102],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50]},{14:[2,40],22:[1,60],25:[2,40],37:[2,40],41:[1,58],43:[2,40],44:[1,59],54:[2,40],61:[2,40],62:[2,40],63:[2,40],64:[2,40],65:[2,40],66:[2,40],67:[2,40],68:[2,40],69:[2,40],70:[2,40],71:[2,40],72:[2,40],73:[2,40],74:[2,40],75:[2,40],77:[2,40],78:[2,40],79:[2,40],80:[2,40]},{14:[2,41],22:[1,60],25:[2,41],37:[2,41],41:[1,58],43:[2,41],44:[1,59],54:[2,41],61:[2,41],62:[2,41],63:[2,41],64:[2,41],65:[2,41],66:[2,41],67:[2,41],68:[2,41],69:[2,41],70:[2,41],71:[2,41],72:[2,41],73:[2,41],74:[2,41],75:[2,41],77:[2,41],78:[2,41],79:[2,41],80:[2,41]},{25:[1,103],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50]},{6:29,7:[1,30],13:[1,21],15:105,22:[1,22],26:68,40:20,41:[1,27],43:[2,76],45:23,46:[1,24],47:[1,25],48:[1,26],50:104,51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],13:[1,21],15:108,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],53:106,54:[2,80],55:107,58:12,59:[1,18],60:[1,19],76:13},{6:29,7:[1,30],9:[1,109],10:110,11:[1,5],13:[1,21],15:6,16:7,17:8,18:9,19:10,20:[1,11],21:[1,14],22:[1,22],26:15,36:[1,16],39:[1,17],40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{14:[1,111],80:[1,112]},{14:[2,43],25:[2,43],37:[2,43],43:[2,43],54:[2,43],61:[2,43],62:[2,43],63:[1,35],64:[1,36],65:[1,37],66:[2,43],67:[2,43],68:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43],77:[2,43],78:[2,43],79:[2,43],80:[2,43]},{14:[2,44],25:[2,44],37:[2,44],43:[2,44],54:[2,44],61:[2,44],62:[2,44],63:[1,35],64:[1,36],65:[1,37],66:[2,44],67:[2,44],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],77:[2,44],78:[2,44],79:[2,44],80:[2,44]},{14:[2,45],25:[2,45],37:[2,45],43:[2,45],54:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45],65:[2,45],66:[2,45],67:[2,45],68:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],77:[2,45],78:[2,45],79:[2,45],80:[2,45]},{14:[2,46],25:[2,46],37:[2,46],43:[2,46],54:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],68:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],77:[2,46],78:[2,46],79:[2,46],80:[2,46]},{14:[2,47],25:[2,47],37:[2,47],43:[2,47],54:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47],69:[2,47],70:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47],77:[2,47],78:[2,47],79:[2,47],80:[2,47]},{14:[2,48],25:[2,48],37:[2,48],43:[2,48],54:[2,48],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[2,48],67:[2,48],68:[2,48],69:[2,48],70:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48],75:[2,48],77:[2,48],78:[2,48],79:[2,48],80:[2,48]},{14:[2,49],25:[2,49],37:[2,49],43:[2,49],54:[2,49],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[2,49],67:[2,49],68:[2,49],69:[2,49],70:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49],75:[2,49],77:[2,49],78:[2,49],79:[2,49],80:[2,49]},{14:[2,50],25:[2,50],37:[2,50],43:[2,50],54:[2,50],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[2,50],67:[2,50],68:[2,50],69:[2,50],70:[2,50],71:[2,50],72:[2,50],73:[2,50],74:[2,50],75:[2,50],77:[2,50],78:[2,50],79:[2,50],80:[2,50]},{14:[2,51],25:[2,51],37:[2,51],43:[2,51],54:[2,51],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[2,51],67:[2,51],68:[2,51],69:[2,51],70:[2,51],71:[2,51],72:[2,51],73:[2,51],74:[2,51],75:[2,51],77:[2,51],78:[2,51],79:[2,51],80:[2,51]},{14:[2,52],25:[2,52],37:[2,52],43:[2,52],54:[2,52],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[2,52],67:[2,52],68:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],77:[2,52],78:[2,52],79:[2,52],80:[2,52]},{14:[2,53],25:[2,53],37:[2,53],43:[2,53],54:[2,53],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[2,53],67:[2,53],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53],77:[2,53],78:[2,53],79:[2,53],80:[2,53]},{14:[2,54],25:[2,54],37:[2,54],43:[2,54],54:[2,54],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[2,54],73:[2,54],74:[2,54],75:[2,54],77:[2,54],78:[2,54],79:[2,54],80:[2,54]},{14:[2,55],25:[2,55],37:[2,55],43:[2,55],54:[2,55],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[2,55],73:[2,55],74:[2,55],75:[2,55],77:[2,55],78:[2,55],79:[2,55],80:[2,55]},{14:[2,56],25:[2,56],37:[2,56],43:[2,56],54:[2,56],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[2,56],73:[2,56],74:[2,56],75:[2,56],77:[2,56],78:[2,56],79:[2,56],80:[2,56]},{14:[2,57],25:[2,57],37:[2,57],43:[2,57],54:[2,57],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[2,57],73:[2,57],74:[2,57],75:[2,57],77:[2,57],78:[2,57],79:[2,57],80:[2,57]},{14:[2,59],25:[2,59],37:[2,59],43:[2,59],54:[2,59],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[2,59],78:[2,59],79:[2,59],80:[2,59]},{14:[2,60],25:[2,60],37:[2,60],43:[2,60],54:[2,60],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[2,60],78:[2,60],79:[2,60],80:[2,60]},{14:[2,61],25:[2,61],37:[2,61],43:[2,61],54:[2,61],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[2,61],78:[2,61],79:[2,61],80:[2,61]},{6:29,7:[1,30],13:[1,21],15:114,22:[1,22],24:113,25:[2,70],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{14:[2,13],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50]},{43:[1,115]},{43:[2,73],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50]},{14:[2,27],22:[2,27],25:[2,27],27:[2,27],28:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],37:[2,27],41:[2,27],43:[2,27],44:[2,27],54:[2,27],61:[2,27],62:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],77:[2,27],78:[2,27],79:[2,27],80:[2,27]},{6:29,7:[1,30],13:[1,21],15:117,22:[1,22],25:[2,84],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],57:116,58:12,59:[1,18],60:[1,19],76:13},{6:118,7:[1,30]},{6:119,7:[1,30]},{14:[2,28],22:[2,28],25:[2,28],27:[2,28],28:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],37:[2,28],41:[2,28],43:[2,28],44:[2,28],54:[2,28],61:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],77:[2,28],78:[2,28],79:[2,28],80:[2,28]},{43:[1,120]},{43:[2,77],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50],80:[1,121]},{54:[1,122]},{54:[2,81],80:[1,123]},{37:[1,124],54:[2,36],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50],80:[2,36]},{5:[2,2],7:[2,2],9:[2,2],11:[2,2],13:[2,2],14:[2,2],20:[2,2],21:[2,2],22:[2,2],25:[2,2],27:[2,2],28:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],41:[2,2],43:[2,2],44:[2,2],46:[2,2],47:[2,2],48:[2,2],51:[2,2],54:[2,2],59:[2,2],60:[2,2],61:[2,2],62:[2,2],63:[2,2],64:[2,2],65:[2,2],66:[2,2],67:[2,2],68:[2,2],69:[2,2],70:[2,2],71:[2,2],72:[2,2],73:[2,2],74:[2,2],75:[2,2],77:[2,2],78:[2,2],79:[2,2],80:[2,2]},{7:[2,65],9:[2,65],11:[2,65],13:[2,65],20:[2,65],21:[2,65],22:[2,65],36:[2,65],39:[2,65],41:[2,65],46:[2,65],47:[2,65],48:[2,65],51:[2,65],59:[2,65],60:[2,65]},{5:[2,3],7:[2,3],9:[2,3],11:[2,3],13:[2,3],20:[2,3],21:[2,3],22:[2,3],36:[2,3],39:[2,3],41:[2,3],46:[2,3],47:[2,3],48:[2,3],51:[2,3],59:[2,3],60:[2,3]},{13:[2,67]},{25:[1,125]},{25:[2,71],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50],80:[1,126]},{14:[2,26],22:[2,26],25:[2,26],27:[2,26],28:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],37:[2,26],41:[2,26],43:[2,26],44:[2,26],54:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],77:[2,26],78:[2,26],79:[2,26],80:[2,26]},{25:[1,127]},{25:[2,85],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50],80:[1,128]},{5:[2,20],7:[2,20],9:[2,20],11:[2,20],13:[2,20],20:[2,20],21:[2,20],22:[2,20],36:[2,20],38:[1,129],39:[2,20],41:[2,20],46:[2,20],47:[2,20],48:[2,20],51:[2,20],59:[2,20],60:[2,20]},{5:[2,23],7:[2,23],9:[2,23],11:[2,23],13:[2,23],20:[2,23],21:[2,23],22:[2,23],36:[2,23],39:[2,23],41:[2,23],46:[2,23],47:[2,23],48:[2,23],51:[2,23],59:[2,23],60:[2,23]},{14:[2,33],22:[2,33],25:[2,33],27:[2,33],28:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],37:[2,33],41:[2,33],43:[2,33],44:[2,33],54:[2,33],61:[2,33],62:[2,33],63:[2,33],64:[2,33],65:[2,33],66:[2,33],67:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],77:[2,33],78:[2,33],79:[2,33],80:[2,33]},{7:[2,75],13:[2,75],22:[2,75],41:[2,75],43:[2,75],46:[2,75],47:[2,75],48:[2,75],51:[2,75],59:[2,75],60:[2,75]},{14:[2,34],22:[2,34],25:[2,34],27:[2,34],28:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],37:[2,34],41:[2,34],43:[2,34],44:[2,34],54:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34],65:[2,34],66:[2,34],67:[2,34],68:[2,34],69:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34],77:[2,34],78:[2,34],79:[2,34],80:[2,34]},{7:[2,79],13:[2,79],22:[2,79],41:[2,79],46:[2,79],47:[2,79],48:[2,79],51:[2,79],54:[2,79],59:[2,79],60:[2,79]},{6:29,7:[1,30],13:[1,21],15:130,22:[1,22],26:68,40:20,41:[1,27],45:23,46:[1,24],47:[1,25],48:[1,26],51:[1,28],58:12,59:[1,18],60:[1,19],76:13},{14:[2,10]},{7:[2,69],13:[2,69],22:[2,69],25:[2,69],41:[2,69],46:[2,69],47:[2,69],48:[2,69],51:[2,69],59:[2,69],60:[2,69]},{14:[2,38],22:[2,38],25:[2,38],27:[2,38],28:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],37:[2,38],41:[2,38],43:[2,38],44:[2,38],54:[2,38],61:[2,38],62:[2,38],63:[2,38],64:[2,38],65:[2,38],66:[2,38],67:[2,38],68:[2,38],69:[2,38],70:[2,38],71:[2,38],72:[2,38],73:[2,38],74:[2,38],75:[2,38],77:[2,38],78:[2,38],79:[2,38],80:[2,38]},{7:[2,83],13:[2,83],22:[2,83],25:[2,83],41:[2,83],46:[2,83],47:[2,83],48:[2,83],51:[2,83],59:[2,83],60:[2,83]},{18:132,36:[1,16],37:[1,131]},{54:[2,37],61:[1,33],62:[1,34],63:[1,35],64:[1,36],65:[1,37],66:[1,38],67:[1,39],68:[1,40],69:[1,41],70:[1,42],71:[1,43],72:[1,44],73:[1,45],74:[1,46],75:[1,47],77:[1,48],78:[1,49],79:[1,50],80:[2,37]},{6:133,7:[1,30]},{5:[2,22],7:[2,22],9:[2,22],11:[2,22],13:[2,22],20:[2,22],21:[2,22],22:[2,22],36:[2,22],39:[2,22],41:[2,22],46:[2,22],47:[2,22],48:[2,22],51:[2,22],59:[2,22],60:[2,22]},{5:[2,21],7:[2,21],9:[2,21],11:[2,21],13:[2,21],20:[2,21],21:[2,21],22:[2,21],36:[2,21],39:[2,21],41:[2,21],46:[2,21],47:[2,21],48:[2,21],51:[2,21],59:[2,21],60:[2,21]}],
defaultActions: {3:[2,1],55:[2,11],56:[2,12],112:[2,67],125:[2,10]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 46
break;
case 11:return 47
break;
case 12:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 48;
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 48;
break;
case 14:return 41
break;
case 15:return 43
break;
case 16:return 22
break;
case 17:return 25
break;
case 18:return 51
break;
case 19:return 54
break;
case 20:return 80
break;
case 21:return 37
break;
case 22:return 14
break;
case 23:return 75
break;
case 24:return 44
break;
case 25:return 68
break;
case 26:return 69
break;
case 27:return 70
break;
case 28:return 71
break;
case 29:return 72
break;
case 30:return 73
break;
case 31:return 27
break;
case 32:return 28
break;
case 33:return 31
break;
case 34:return 32
break;
case 35:return 33
break;
case 36:return 34
break;
case 37:return 35
break;
case 38:return 77 // success connector
break;
case 39:return 78 // failure connector
break;
case 40:return 79 // sequence connector
break;
case 41:return 61
break;
case 42:return 62
break;
case 43:return 63
break;
case 44:return 64
break;
case 45:return 65
break;
case 46:return 66
break;
case 47:return 67
break;
case 48:return 30
break;
case 49:return '?'
break;
case 50:return 59
break;
case 51:return 60
break;
case 52:return 36
break;
case 53:return 38
break;
case 54:return 11
break;
case 55:return 39
break;
case 56:return 74
break;
case 57:return 20
break;
case 58:return 21
break;
case 59:return 'STOP'
break;
case 60:return 'TRY'
break;
case 61:return 13
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:true|false\b)/,/^(?:(([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:~>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:receive\b)/,/^(?:while\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply|fail\b)/,/^(?:stop\b)/,/^(?:try\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}