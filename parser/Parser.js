/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"block":6,"BEGIN":7,"block_repetition0":8,"END":9,"statement":10,"RECEIVE":11,"statement_repetition0":12,"ID":13,";":14,"message":15,"assignment":16,"selection":17,"source":18,">>":19,"TRY":20,"><":21,"SKIP":22,"atom":23,"++":24,"--":25,"assignment_op":26,"expr":27,"=":28,"+=":29,"-=":30,"*=":31,"/=":32,"%=":33,"IF":34,"ELSE":35,"literal":36,"[":37,"atom_option0":38,"]":39,".":40,"(":41,")":42,"BOOLEAN":43,"NUMBER":44,"STRING":45,"literal_repetition0":46,"literal_option0":47,"literal_repetition1":48,"literal_option1":49,"{":50,"literal_repetition2":51,"literal_option2":52,"}":53,"literal_repetition3":54,"literal_option3":55,"dyad":56,":":57,"message_repetition0":58,"message_option0":59,"..":60,"unary_expr":61,"#":62,"!":63,"+":64,"-":65,"*":66,"/":67,"%":68,"<":69,">":70,"<=":71,">=":72,"==":73,"!=":74,"IN":75,"AND":76,"OR":77,",":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",9:"END",11:"RECEIVE",13:"ID",14:";",19:">>",20:"TRY",21:"><",22:"SKIP",24:"++",25:"--",28:"=",29:"+=",30:"-=",31:"*=",32:"/=",33:"%=",34:"IF",35:"ELSE",37:"[",39:"]",40:".",41:"(",42:")",43:"BOOLEAN",44:"NUMBER",45:"STRING",50:"{",53:"}",57:":",60:"..",62:"#",63:"!",64:"+",65:"-",66:"*",67:"/",68:"%",69:"<",70:">",71:"<=",72:">=",73:"==",74:"!=",75:"IN",76:"AND",77:"OR",78:","},
productions_: [0,[3,2],[6,3],[10,4],[10,2],[10,2],[10,1],[10,3],[10,4],[10,2],[16,2],[16,2],[16,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[17,3],[17,5],[17,5],[23,1],[23,1],[23,4],[23,3],[23,3],[23,1],[36,1],[36,1],[36,1],[36,4],[36,6],[36,4],[36,6],[56,1],[56,3],[56,3],[15,5],[18,3],[61,1],[61,2],[61,2],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[4,0],[4,2],[8,0],[8,2],[12,0],[12,3],[38,0],[38,1],[46,0],[46,3],[47,0],[47,1],[48,0],[48,3],[49,0],[49,1],[51,0],[51,3],[52,0],[52,1],[54,0],[54,3],[55,0],[55,1],[58,0],[58,3],[59,0],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'program', statements: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: "receive", names: $$[$0-2].concat($$[$0-1])};
break;
case 7:this.$ = ["pipe", $$[$0-2], $$[$0]];
break;
case 8:this.$ = ["try", $$[$0-2], $$[$0]];
break;
case 9:this.$ = ["skip"];
break;
case 10:this.$ = ["inc", $$[$0-1]];
break;
case 11:this.$ = ["dec", $$[$0-1]];
break;
case 12:this.$ = {type: "assign", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 19:this.$ = {type: "select", cond: $$[$0-1], block: $$[$0]};
break;
case 20:this.$ = {type: "select", cond: $$[$0-3], block: $$[$0-2], else: $$[$0]};
break;
case 21:this.$ = ["select", $$[$0-3], $$[$0-2], $$[$0]];
break;
case 22:this.$ = {type: "id", name: $$[$0]};;
break;
case 24:this.$ = ["subscript", $$[$0-3], $$[$0-1]];
break;
case 25:this.$ = ["access", $$[$0-2], $$[$0]];
break;
case 26:this.$ = $$[$0-1];
break;
case 28:this.$ = $$[$0] == 'true';
break;
case 29:this.$ = {type: 'number', val: parseFloat($$[$0])};
break;
case 30:this.$ = {type: 'string', val: $$[$0]};
break;
case 31:this.$ = ["list", $$[$0-2] ? $$[$0-2].concat($$[$0-1]): $$[$0-1]];
break;
case 32:this.$ = ["list", $$[$0-4] ? $$[$0-4].concat($$[$0-3]): $$[$0-3]];
break;
case 33:this.$ = ["set", $$[$0-2] ? $$[$0-2].concat($$[$0-1]): $$[$0-1]];
break;
case 34:this.$ = ["set", $$[$0-4] ? $$[$0-4].concat($$[$0-3]): $$[$0-3]];
break;
case 36:this.$ = ["dyad", $$[$0-2], $$[$0]];;
break;
case 37:this.$ = ["dyad", $$[$0-2], $$[$0]]; // this isn't general enough;
break;
case 38:this.$ = {type: "send", to: $$[$0-4], message: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 39:this.$ = ["count", $$[$0-2], $$[$0]];
break;
case 41:this.$ = {type: "unary_op", op: $$[$0-1], right: $$[$0]};
break;
case 42:this.$ = {type: "unary_op", op: $$[$0-1], right: $$[$0]};
break;
case 44:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 45:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 46:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 47:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 48:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 49:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 50:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 51:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 52:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 53:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 54:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 55:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 56:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 57:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 58:this.$ = [];
break;
case 59:$$[$0-1].push($$[$0]);
break;
case 60:this.$ = [];
break;
case 61:$$[$0-1].push($$[$0]);
break;
case 62:this.$ = [];
break;
case 63:$$[$0-2].push($$[$0-1]);
break;
case 66:this.$ = [];
break;
case 67:$$[$0-2].push($$[$0-1]);
break;
case 70:this.$ = [];
break;
case 71:$$[$0-2].push($$[$0-1]);
break;
case 74:this.$ = [];
break;
case 75:$$[$0-2].push($$[$0-1]);
break;
case 78:this.$ = [];
break;
case 79:$$[$0-2].push($$[$0-1]);
break;
case 82:this.$ = [];
break;
case 83:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,58],11:[2,58],13:[2,58],20:[2,58],22:[2,58],34:[2,58],37:[2,58],41:[2,58],43:[2,58],44:[2,58],45:[2,58],50:[2,58],62:[2,58],63:[2,58]},{1:[3]},{5:[1,3],10:4,11:[1,5],13:[1,15],15:6,16:7,17:8,18:9,20:[1,10],22:[1,11],23:12,27:14,34:[1,13],36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{1:[2,1]},{5:[2,59],11:[2,59],13:[2,59],20:[2,59],22:[2,59],34:[2,59],37:[2,59],41:[2,59],43:[2,59],44:[2,59],45:[2,59],50:[2,59],62:[2,59],63:[2,59]},{12:26,13:[2,62]},{14:[1,27],24:[2,27],25:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],37:[2,27],40:[2,27],41:[2,27],60:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27]},{14:[1,28]},{5:[2,6],9:[2,6],11:[2,6],13:[2,6],20:[2,6],22:[2,6],34:[2,6],37:[2,6],41:[2,6],43:[2,6],44:[2,6],45:[2,6],50:[2,6],62:[2,6],63:[2,6]},{19:[1,29]},{6:30,7:[1,31]},{14:[1,32]},{24:[1,34],25:[1,35],26:36,28:[1,39],29:[1,40],30:[1,41],31:[1,42],32:[1,43],33:[1,44],37:[1,37],40:[1,38],41:[1,33],60:[2,40],64:[2,40],65:[2,40],66:[2,40],67:[2,40],68:[2,40],69:[2,40],70:[2,40],71:[2,40],72:[2,40],73:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40]},{13:[1,15],15:47,23:46,27:45,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{60:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62]},{7:[2,22],9:[2,22],14:[2,22],19:[2,22],24:[2,22],25:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],37:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],53:[2,22],57:[2,22],60:[2,22],64:[2,22],65:[2,22],66:[2,22],67:[2,22],68:[2,22],69:[2,22],70:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22],77:[2,22],78:[2,22]},{7:[2,23],9:[2,23],14:[2,23],19:[2,23],24:[2,23],25:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],37:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],53:[2,23],57:[2,23],60:[2,23],64:[2,23],65:[2,23],66:[2,23],67:[2,23],68:[2,23],69:[2,23],70:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23],77:[2,23],78:[2,23]},{13:[1,15],15:47,23:46,27:63,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{7:[2,43],9:[2,43],14:[2,43],19:[2,43],39:[2,43],42:[2,43],53:[2,43],57:[2,43],60:[2,43],64:[2,43],65:[2,43],66:[2,43],67:[2,43],68:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43],78:[2,43]},{7:[2,28],9:[2,28],14:[2,28],19:[2,28],24:[2,28],25:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],37:[2,28],39:[2,28],40:[2,28],41:[2,28],42:[2,28],53:[2,28],57:[2,28],60:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28]},{7:[2,29],9:[2,29],14:[2,29],19:[2,29],24:[2,29],25:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],37:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],53:[2,29],57:[2,29],60:[2,29],64:[2,29],65:[2,29],66:[2,29],67:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29]},{7:[2,30],9:[2,30],14:[2,30],19:[2,30],24:[2,30],25:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],37:[2,30],39:[2,30],40:[2,30],41:[2,30],42:[2,30],53:[2,30],57:[2,30],60:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30]},{7:[1,65],13:[2,66],37:[2,66],39:[2,66],41:[2,66],43:[2,66],44:[2,66],45:[2,66],46:64,50:[2,66],62:[2,66],63:[2,66]},{7:[1,67],13:[2,74],37:[2,74],41:[2,74],43:[2,74],44:[2,74],45:[2,74],50:[2,74],51:66,53:[2,74],62:[2,74],63:[2,74]},{13:[1,15],15:47,23:68,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23]},{13:[1,15],15:47,23:69,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23]},{13:[1,70]},{5:[2,4],9:[2,4],11:[2,4],13:[2,4],20:[2,4],22:[2,4],34:[2,4],37:[2,4],41:[2,4],43:[2,4],44:[2,4],45:[2,4],50:[2,4],62:[2,4],63:[2,4]},{5:[2,5],9:[2,5],11:[2,5],13:[2,5],20:[2,5],22:[2,5],34:[2,5],37:[2,5],41:[2,5],43:[2,5],44:[2,5],45:[2,5],50:[2,5],62:[2,5],63:[2,5]},{6:71,7:[1,31]},{21:[1,72]},{8:73,9:[2,60],11:[2,60],13:[2,60],20:[2,60],22:[2,60],34:[2,60],37:[2,60],41:[2,60],43:[2,60],44:[2,60],45:[2,60],50:[2,60],62:[2,60],63:[2,60]},{5:[2,9],9:[2,9],11:[2,9],13:[2,9],20:[2,9],22:[2,9],34:[2,9],37:[2,9],41:[2,9],43:[2,9],44:[2,9],45:[2,9],50:[2,9],62:[2,9],63:[2,9]},{13:[2,82],37:[2,82],41:[2,82],42:[2,82],43:[2,82],44:[2,82],45:[2,82],50:[2,82],58:74,62:[2,82],63:[2,82]},{14:[2,10]},{14:[2,11]},{13:[1,15],15:47,23:46,27:75,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:77,36:16,37:[1,22],38:76,39:[2,64],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,78]},{13:[2,13],37:[2,13],41:[2,13],43:[2,13],44:[2,13],45:[2,13],50:[2,13],62:[2,13],63:[2,13]},{13:[2,14],37:[2,14],41:[2,14],43:[2,14],44:[2,14],45:[2,14],50:[2,14],62:[2,14],63:[2,14]},{13:[2,15],37:[2,15],41:[2,15],43:[2,15],44:[2,15],45:[2,15],50:[2,15],62:[2,15],63:[2,15]},{13:[2,16],37:[2,16],41:[2,16],43:[2,16],44:[2,16],45:[2,16],50:[2,16],62:[2,16],63:[2,16]},{13:[2,17],37:[2,17],41:[2,17],43:[2,17],44:[2,17],45:[2,17],50:[2,17],62:[2,17],63:[2,17]},{13:[2,18],37:[2,18],41:[2,18],43:[2,18],44:[2,18],45:[2,18],50:[2,18],62:[2,18],63:[2,18]},{6:79,7:[1,31],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62]},{7:[2,40],9:[2,40],14:[2,40],19:[2,40],37:[1,37],39:[2,40],40:[1,38],41:[1,33],42:[2,40],53:[2,40],57:[2,40],60:[2,40],64:[2,40],65:[2,40],66:[2,40],67:[2,40],68:[2,40],69:[2,40],70:[2,40],71:[2,40],72:[2,40],73:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],78:[2,40]},{7:[2,27],9:[2,27],14:[2,27],19:[2,27],37:[2,27],39:[2,27],40:[2,27],41:[2,27],42:[2,27],53:[2,27],57:[2,27],60:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27],78:[2,27]},{13:[1,15],15:47,23:46,27:80,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:81,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:82,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:83,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:84,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:85,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:86,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:87,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:88,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:89,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:90,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:91,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:92,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:93,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:94,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{42:[1,95],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62]},{13:[1,15],15:47,23:46,27:97,36:16,37:[1,22],39:[2,68],41:[1,17],43:[1,19],44:[1,20],45:[1,21],47:96,50:[1,23],61:18,62:[1,24],63:[1,25]},{9:[2,70],13:[2,70],37:[2,70],41:[2,70],43:[2,70],44:[2,70],45:[2,70],48:98,50:[2,70],62:[2,70],63:[2,70]},{13:[1,15],15:47,23:46,27:101,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],52:99,53:[2,76],56:100,61:18,62:[1,24],63:[1,25]},{9:[2,78],13:[2,78],37:[2,78],41:[2,78],43:[2,78],44:[2,78],45:[2,78],50:[2,78],54:102,62:[2,78],63:[2,78]},{7:[2,41],9:[2,41],14:[2,41],19:[2,41],37:[1,37],39:[2,41],40:[1,38],41:[1,33],42:[2,41],53:[2,41],57:[2,41],60:[2,41],64:[2,41],65:[2,41],66:[2,41],67:[2,41],68:[2,41],69:[2,41],70:[2,41],71:[2,41],72:[2,41],73:[2,41],74:[2,41],75:[2,41],76:[2,41],77:[2,41],78:[2,41]},{7:[2,42],9:[2,42],14:[2,42],19:[2,42],37:[1,37],39:[2,42],40:[1,38],41:[1,33],42:[2,42],53:[2,42],57:[2,42],60:[2,42],64:[2,42],65:[2,42],66:[2,42],67:[2,42],68:[2,42],69:[2,42],70:[2,42],71:[2,42],72:[2,42],73:[2,42],74:[2,42],75:[2,42],76:[2,42],77:[2,42],78:[2,42]},{14:[1,103],78:[1,104]},{5:[2,7],9:[2,7],11:[2,7],13:[2,7],20:[2,7],22:[2,7],34:[2,7],37:[2,7],41:[2,7],43:[2,7],44:[2,7],45:[2,7],50:[2,7],62:[2,7],63:[2,7]},{6:105,7:[1,31]},{9:[1,106],10:107,11:[1,5],13:[1,15],15:6,16:7,17:8,18:9,20:[1,10],22:[1,11],23:12,27:14,34:[1,13],36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{13:[1,15],15:47,23:46,27:109,36:16,37:[1,22],41:[1,17],42:[2,84],43:[1,19],44:[1,20],45:[1,21],50:[1,23],59:108,61:18,62:[1,24],63:[1,25]},{14:[2,12],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62]},{39:[1,110]},{39:[2,65],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62]},{7:[2,25],9:[2,25],14:[2,25],19:[2,25],24:[2,25],25:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],37:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],53:[2,25],57:[2,25],60:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25],78:[2,25]},{5:[2,19],9:[2,19],11:[2,19],13:[2,19],20:[2,19],22:[2,19],34:[2,19],35:[1,111],37:[2,19],41:[2,19],43:[2,19],44:[2,19],45:[2,19],50:[2,19],62:[2,19],63:[2,19]},{19:[2,39],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62]},{7:[2,44],9:[2,44],14:[2,44],19:[2,44],39:[2,44],42:[2,44],53:[2,44],57:[2,44],60:[2,44],64:[2,44],65:[2,44],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,44]},{7:[2,45],9:[2,45],14:[2,45],19:[2,45],39:[2,45],42:[2,45],53:[2,45],57:[2,45],60:[2,45],64:[2,45],65:[2,45],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,45]},{7:[2,46],9:[2,46],14:[2,46],19:[2,46],39:[2,46],42:[2,46],53:[2,46],57:[2,46],60:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],68:[2,46],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,46]},{7:[2,47],9:[2,47],14:[2,47],19:[2,47],39:[2,47],42:[2,47],53:[2,47],57:[2,47],60:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,47]},{7:[2,48],9:[2,48],14:[2,48],19:[2,48],39:[2,48],42:[2,48],53:[2,48],57:[2,48],60:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,48]},{7:[2,49],9:[2,49],14:[2,49],19:[2,49],39:[2,49],42:[2,49],53:[2,49],57:[2,49],60:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[2,49],69:[2,49],70:[2,49],71:[2,49],72:[2,49],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,49]},{7:[2,50],9:[2,50],14:[2,50],19:[2,50],39:[2,50],42:[2,50],53:[2,50],57:[2,50],60:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50],69:[2,50],70:[2,50],71:[2,50],72:[2,50],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,50]},{7:[2,51],9:[2,51],14:[2,51],19:[2,51],39:[2,51],42:[2,51],53:[2,51],57:[2,51],60:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51],69:[2,51],70:[2,51],71:[2,51],72:[2,51],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,51]},{7:[2,52],9:[2,52],14:[2,52],19:[2,52],39:[2,52],42:[2,52],53:[2,52],57:[2,52],60:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,52]},{7:[2,53],9:[2,53],14:[2,53],19:[2,53],39:[2,53],42:[2,53],53:[2,53],57:[2,53],60:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[1,60],76:[1,61],77:[1,62],78:[2,53]},{7:[2,54],9:[2,54],14:[2,54],19:[2,54],39:[2,54],42:[2,54],53:[2,54],57:[2,54],60:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],69:[2,54],70:[2,54],71:[2,54],72:[2,54],73:[2,54],74:[2,54],75:[1,60],76:[1,61],77:[1,62],78:[2,54]},{7:[2,55],9:[2,55],14:[2,55],19:[2,55],39:[2,55],42:[2,55],53:[2,55],57:[2,55],60:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],69:[2,55],70:[2,55],71:[2,55],72:[2,55],73:[2,55],74:[2,55],76:[1,61],77:[1,62],78:[2,55]},{7:[2,56],9:[2,56],14:[2,56],19:[2,56],39:[2,56],42:[2,56],53:[2,56],57:[2,56],60:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],69:[2,56],70:[2,56],71:[2,56],72:[2,56],73:[2,56],74:[2,56],75:[2,56],76:[2,56],77:[2,56],78:[2,56]},{7:[2,57],9:[2,57],14:[2,57],19:[2,57],39:[2,57],42:[2,57],53:[2,57],57:[2,57],60:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],69:[2,57],70:[2,57],71:[2,57],72:[2,57],73:[2,57],74:[2,57],75:[2,57],76:[2,57],77:[2,57],78:[2,57]},{7:[2,26],9:[2,26],14:[2,26],19:[2,26],24:[2,26],25:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],37:[2,26],39:[2,26],40:[2,26],41:[2,26],42:[2,26],53:[2,26],57:[2,26],60:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26],78:[2,26]},{39:[1,112]},{39:[2,69],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,113]},{9:[2,72],13:[1,15],15:47,23:46,27:115,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],49:114,50:[1,23],61:18,62:[1,24],63:[1,25]},{53:[1,116]},{53:[2,77],78:[1,117]},{9:[2,35],53:[2,35],57:[1,118],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,35]},{9:[2,80],13:[1,15],15:47,23:46,27:101,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],55:119,56:120,61:18,62:[1,24],63:[1,25]},{5:[2,3],9:[2,3],11:[2,3],13:[2,3],20:[2,3],22:[2,3],34:[2,3],37:[2,3],41:[2,3],43:[2,3],44:[2,3],45:[2,3],50:[2,3],62:[2,3],63:[2,3]},{13:[2,63]},{5:[2,8],9:[2,8],11:[2,8],13:[2,8],20:[2,8],22:[2,8],34:[2,8],37:[2,8],41:[2,8],43:[2,8],44:[2,8],45:[2,8],50:[2,8],62:[2,8],63:[2,8]},{5:[2,2],9:[2,2],11:[2,2],13:[2,2],20:[2,2],21:[2,2],22:[2,2],34:[2,2],35:[2,2],37:[2,2],41:[2,2],43:[2,2],44:[2,2],45:[2,2],50:[2,2],53:[2,2],62:[2,2],63:[2,2],78:[2,2]},{9:[2,61],11:[2,61],13:[2,61],20:[2,61],22:[2,61],34:[2,61],37:[2,61],41:[2,61],43:[2,61],44:[2,61],45:[2,61],50:[2,61],62:[2,61],63:[2,61]},{42:[1,121]},{42:[2,85],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,122]},{7:[2,24],9:[2,24],14:[2,24],19:[2,24],24:[2,24],25:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],37:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],53:[2,24],57:[2,24],60:[2,24],64:[2,24],65:[2,24],66:[2,24],67:[2,24],68:[2,24],69:[2,24],70:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24],78:[2,24]},{6:123,7:[1,31],17:124,34:[1,13]},{7:[2,31],9:[2,31],14:[2,31],19:[2,31],24:[2,31],25:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],37:[2,31],39:[2,31],40:[2,31],41:[2,31],42:[2,31],53:[2,31],57:[2,31],60:[2,31],64:[2,31],65:[2,31],66:[2,31],67:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31]},{13:[2,67],37:[2,67],39:[2,67],41:[2,67],43:[2,67],44:[2,67],45:[2,67],50:[2,67],62:[2,67],63:[2,67]},{9:[1,125]},{9:[2,73],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[1,126]},{7:[2,33],9:[2,33],14:[2,33],19:[2,33],24:[2,33],25:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],37:[2,33],39:[2,33],40:[2,33],41:[2,33],42:[2,33],53:[2,33],57:[2,33],60:[2,33],64:[2,33],65:[2,33],66:[2,33],67:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33],78:[2,33]},{13:[2,75],37:[2,75],41:[2,75],43:[2,75],44:[2,75],45:[2,75],50:[2,75],53:[2,75],62:[2,75],63:[2,75]},{6:128,7:[1,31],13:[1,15],15:47,23:46,27:127,36:16,37:[1,22],41:[1,17],43:[1,19],44:[1,20],45:[1,21],50:[1,23],61:18,62:[1,24],63:[1,25]},{9:[1,129]},{9:[2,81],78:[1,130]},{7:[2,38],9:[2,38],14:[2,38],19:[2,38],24:[2,38],25:[2,38],28:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],37:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],53:[2,38],57:[2,38],60:[2,38],64:[2,38],65:[2,38],66:[2,38],67:[2,38],68:[2,38],69:[2,38],70:[2,38],71:[2,38],72:[2,38],73:[2,38],74:[2,38],75:[2,38],76:[2,38],77:[2,38],78:[2,38]},{13:[2,83],37:[2,83],41:[2,83],42:[2,83],43:[2,83],44:[2,83],45:[2,83],50:[2,83],62:[2,83],63:[2,83]},{5:[2,20],9:[2,20],11:[2,20],13:[2,20],20:[2,20],22:[2,20],34:[2,20],37:[2,20],41:[2,20],43:[2,20],44:[2,20],45:[2,20],50:[2,20],62:[2,20],63:[2,20]},{5:[2,21],9:[2,21],11:[2,21],13:[2,21],20:[2,21],22:[2,21],34:[2,21],37:[2,21],41:[2,21],43:[2,21],44:[2,21],45:[2,21],50:[2,21],62:[2,21],63:[2,21]},{39:[1,131]},{9:[2,71],13:[2,71],37:[2,71],41:[2,71],43:[2,71],44:[2,71],45:[2,71],50:[2,71],62:[2,71],63:[2,71]},{9:[2,36],53:[2,36],64:[1,49],65:[1,50],66:[1,51],67:[1,52],68:[1,53],69:[1,54],70:[1,55],71:[1,56],72:[1,57],73:[1,58],74:[1,59],75:[1,60],76:[1,61],77:[1,62],78:[2,36]},{9:[2,37],53:[2,37],78:[2,37]},{53:[1,132]},{9:[2,79],13:[2,79],37:[2,79],41:[2,79],43:[2,79],44:[2,79],45:[2,79],50:[2,79],62:[2,79],63:[2,79]},{7:[2,32],9:[2,32],14:[2,32],19:[2,32],24:[2,32],25:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],37:[2,32],39:[2,32],40:[2,32],41:[2,32],42:[2,32],53:[2,32],57:[2,32],60:[2,32],64:[2,32],65:[2,32],66:[2,32],67:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32],78:[2,32]},{7:[2,34],9:[2,34],14:[2,34],19:[2,34],24:[2,34],25:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],37:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],53:[2,34],57:[2,34],60:[2,34],64:[2,34],65:[2,34],66:[2,34],67:[2,34],68:[2,34],69:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34],78:[2,34]}],
defaultActions: {3:[2,1],34:[2,10],35:[2,11],104:[2,63]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];

    ast = require('../ast');
    util = require('util');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 43
break;
case 11:return 44
break;
case 12:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 45;
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 45;
break;
case 14:return 37
break;
case 15:return 39
break;
case 16:return 41
break;
case 17:return 42
break;
case 18:return 50
break;
case 19:return 53
break;
case 20:return 78
break;
case 21:return 57
break;
case 22:return 14
break;
case 23:return 60
break;
case 24:return 40
break;
case 25:return 71
break;
case 26:return 72
break;
case 27:return 73
break;
case 28:return 74
break;
case 29:return 76
break;
case 30:return 77
break;
case 31:return 24
break;
case 32:return 25
break;
case 33:return 29
break;
case 34:return 30
break;
case 35:return 31
break;
case 36:return 32
break;
case 37:return 33
break;
case 38:return '->'
break;
case 39:return 19
break;
case 40:return '=>'
break;
case 41:return 21
break;
case 42:return 64
break;
case 43:return 65
break;
case 44:return 66
break;
case 45:return 67
break;
case 46:return 68
break;
case 47:return 69
break;
case 48:return 70
break;
case 49:return 28
break;
case 50:return '?'
break;
case 51:return 62
break;
case 52:return 63
break;
case 53:return 34
break;
case 54:return 35
break;
case 55:return 11
break;
case 56:return 22
break;
case 57:return 'BREAK'
break;
case 58:return 20
break;
case 59:return 75
break;
case 60:return 13
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:true|false\b)/,/^(?:(([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:>>)/,/^(?:=>)/,/^(?:><)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:receive\b)/,/^(?:skip\b)/,/^(?:break\b)/,/^(?:try\b)/,/^(?:in\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}