/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"action_definition":4,"EOF":5,"ACTION":6,"block":7,"(":8,"action_definition_repetition0":9,"action_definition_option0":10,")":11,"BEGIN":12,"PASS":13,"END":14,"block_repetition0":15,"statement":16,"NAME":17,"IS":18,"literal":19,"identifier":20,"=":21,"expression":22,"selection_statement":23,"sequence_statement":24,"return_statement":25,"jump_statement":26,"IF":27,"ELSE":28,"RETURN":29,"FAIL":30,"SKIP":31,"BOOLEAN":32,"CONSTANT":33,"STRING_LITERAL":34,"[":35,"]":36,".":37,"primary_expression":38,"unary_expression":39,"#":40,"multiplicative_expression":41,"*":42,"/":43,"%":44,"additive_expression":45,"+":46,"-":47,"relational_expression":48,"<":49,">":50,"<=":51,">=":52,"equality_expression":53,"==":54,"!=":55,"and_expression":56,"&":57,"exclusive_or_expression":58,"^":59,"inclusive_or_expression":60,"|":61,"logical_and_expression":62,"&&":63,"logical_or_expression":64,"||":65,"conditional_expression":66,"?":67,":":68,"..":69,"invocation":70,"invocation_repetition0":71,"invocation_option0":72,"connector":73,"sink":74,"sink_repetition0":75,"sink_option0":76,">~":77,"->":78,"=>":79,">>":80,">|":81,",":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ACTION",8:"(",11:")",12:"BEGIN",13:"PASS",14:"END",17:"NAME",18:"IS",21:"=",27:"IF",28:"ELSE",29:"RETURN",30:"FAIL",31:"SKIP",32:"BOOLEAN",33:"CONSTANT",34:"STRING_LITERAL",35:"[",36:"]",37:".",40:"#",42:"*",43:"/",44:"%",46:"+",47:"-",49:"<",50:">",51:"<=",52:">=",54:"==",55:"!=",57:"&",59:"^",61:"|",63:"&&",65:"||",67:"?",68:":",69:"..",77:">~",78:"->",79:"=>",80:">>",81:">|",82:","},
productions_: [0,[3,2],[4,2],[4,6],[7,3],[7,3],[16,3],[16,3],[16,1],[16,1],[16,1],[16,1],[23,3],[23,5],[23,5],[25,2],[25,2],[26,1],[19,1],[19,1],[19,1],[20,1],[20,4],[20,3],[38,1],[38,1],[38,1],[38,3],[39,1],[39,2],[41,1],[41,3],[41,3],[41,3],[45,1],[45,3],[45,3],[48,1],[48,3],[48,3],[48,3],[48,3],[53,1],[53,3],[53,3],[56,1],[56,3],[58,1],[58,3],[60,1],[60,3],[62,1],[62,3],[64,1],[64,3],[66,1],[66,5],[22,1],[22,3],[70,5],[24,1],[24,3],[24,3],[74,1],[74,5],[74,1],[73,1],[73,1],[73,1],[73,1],[73,1],[9,0],[9,3],[10,0],[10,1],[15,0],[15,2],[71,0],[71,3],[72,0],[72,1],[75,0],[75,3],[76,0],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; return this.$; 
break;
case 2:this.$ = new ast.Action([], $$[$0]);
break;
case 3:this.$ = new ast.Action($$[$0-2] ? $$[$0-3].concat([$$[$0-2]]) : $$[$0-3], $$[$0]);
break;
case 4:this.$ = [];
break;
case 5:this.$ = $$[$0-1];
break;
case 6:this.$ = ['define', $$[$0-2], $$[$0]];
break;
case 7:this.$ = new ast.Operator('assign', $$[$0-2], $$[$0]);
break;
case 12:this.$ = new ast.Selection($$[$0-1], $$[$0]);
break;
case 13:this.$ = new ast.Selection($$[$0-3], $$[$0-2], $$[$0]);
break;
case 14:this.$ = new ast.Selection($$[$0-3], $$[$0-2], $$[$0]);
break;
case 15:this.$ = new ast.Result(true, $$[$0]);
break;
case 16:this.$ = new ast.Result(false, $$[$0]);
break;
case 17:this.$ = new ast.Jump($$[$0]);
break;
case 18:this.$ = new ast.Literal($$[$0] === 'true' ? true : false);
break;
case 19:this.$ = new ast.Literal(parseFloat($$[$0]));
break;
case 20:this.$ = new ast.Literal($$[$0]);
break;
case 21:this.$ = new ast.Identifier($$[$0]);
break;
case 22:this.$ = new ast.Identifier($$[$0-3], $$[$0-1]);
break;
case 23:this.$ = new ast.Identifier($$[$0-2], $$[$0]);
break;
case 27:this.$ = $$[$0-1];
break;
case 29:this.$ = new ast.Operator('card', $$[$0]);
break;
case 31:this.$ = new ast.Operator('mult', $$[$0-2], $$[$0]);
break;
case 32:this.$ = new ast.Operator('div', $$[$0-2], $$[$0]);
break;
case 33:this.$ = new ast.Operator('mod', $$[$0-2], $$[$0]);
break;
case 35:this.$ = new ast.Operator('add', $$[$0-2], $$[$0]);
break;
case 36:this.$ = new ast.Operator('sub', $$[$0-2], $$[$0]);
break;
case 38:this.$ = new ast.Relational('lt', $$[$0-2], $$[$0]);
break;
case 39:this.$ = new ast.Relational('gt', $$[$0-2], $$[$0]);
break;
case 40:this.$ = new ast.Relational('le', $$[$0-2], $$[$0]);
break;
case 41:this.$ = new ast.Relational('ge', $$[$0-2], $$[$0]);
break;
case 43:this.$ = new ast.Relational('equality', $$[$0-2], $$[$0]);
break;
case 44:this.$ = new ast.Relational('inequality', $$[$0-2], $$[$0]);
break;
case 46:this.$ = ['bitwise_and', $$[$0-2], $$[$0]];
break;
case 48:this.$ = ['xor', $$[$0-2], $$[$0]];
break;
case 50:this.$ = ['bitwise_or', $$[$0-2], $$[$0]];
break;
case 52:this.$ = ['and', $$[$0-2], $$[$0]];
break;
case 54:this.$ = ['or', $$[$0-2], $$[$0]];
break;
case 56:this.$ = ['conditional', $$[$0-4], $$[$0-2], $$[$0]];
break;
case 59:this.$ = new ast.Invocation($$[$0-4], $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : $$[$0-2]);
break;
case 61:this.$ = [$$[$0-1], $$[$0-2], $$[$0]];
break;
case 62:this.$ = [$$[$0-1], $$[$0-2], $$[$0]];
break;
case 64:this.$ = {action: ($$[$0-2] ? $$[$0-3].concat([$$[$0-2]]) : $$[$0-3]), statements: $$[$0]};
break;
case 65:this.$ = {'action': [], statements: $$[$0]};
break;
case 71:this.$ = [];
break;
case 72:$$[$0-2].push($$[$0-1]);
break;
case 75:this.$ = [];
break;
case 76:$$[$0-1].push($$[$0]);
break;
case 77:this.$ = [];
break;
case 78:$$[$0-2].push($$[$0-1]);
break;
case 81:this.$ = [];
break;
case 82:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:5,8:[1,6],12:[1,7]},{1:[2,1]},{5:[2,2],6:[2,2],8:[2,2],11:[2,2],12:[2,2],14:[2,2],17:[2,2],27:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],34:[2,2],36:[2,2],40:[2,2],42:[2,2],43:[2,2],44:[2,2],46:[2,2],47:[2,2],49:[2,2],50:[2,2],51:[2,2],52:[2,2],54:[2,2],55:[2,2],57:[2,2],59:[2,2],61:[2,2],63:[2,2],65:[2,2],67:[2,2],68:[2,2],69:[2,2],77:[2,2],78:[2,2],79:[2,2],80:[2,2],81:[2,2],82:[2,2]},{9:8,11:[2,71],17:[2,71]},{6:[2,75],8:[2,75],13:[1,9],14:[2,75],15:10,17:[2,75],27:[2,75],29:[2,75],30:[2,75],31:[2,75],32:[2,75],33:[2,75],34:[2,75],40:[2,75]},{10:11,11:[2,73],17:[1,12]},{14:[1,13]},{4:42,6:[1,3],8:[1,43],14:[1,14],16:15,17:[1,16],19:41,20:17,22:24,23:18,24:19,25:20,26:21,27:[1,22],29:[1,25],30:[1,26],31:[1,27],32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28,70:23},{11:[1,47]},{11:[2,74],82:[1,48]},{5:[2,4],6:[2,4],8:[2,4],11:[2,4],12:[2,4],14:[2,4],17:[2,4],27:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],34:[2,4],36:[2,4],40:[2,4],42:[2,4],43:[2,4],44:[2,4],46:[2,4],47:[2,4],49:[2,4],50:[2,4],51:[2,4],52:[2,4],54:[2,4],55:[2,4],57:[2,4],59:[2,4],61:[2,4],63:[2,4],65:[2,4],67:[2,4],68:[2,4],69:[2,4],77:[2,4],78:[2,4],79:[2,4],80:[2,4],81:[2,4],82:[2,4]},{5:[2,5],6:[2,5],8:[2,5],11:[2,5],12:[2,5],14:[2,5],17:[2,5],27:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],34:[2,5],36:[2,5],40:[2,5],42:[2,5],43:[2,5],44:[2,5],46:[2,5],47:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],54:[2,5],55:[2,5],57:[2,5],59:[2,5],61:[2,5],63:[2,5],65:[2,5],67:[2,5],68:[2,5],69:[2,5],77:[2,5],78:[2,5],79:[2,5],80:[2,5],81:[2,5],82:[2,5]},{6:[2,76],8:[2,76],14:[2,76],17:[2,76],27:[2,76],29:[2,76],30:[2,76],31:[2,76],32:[2,76],33:[2,76],34:[2,76],40:[2,76]},{8:[2,21],18:[1,49],21:[2,21],35:[2,21],37:[2,21],42:[2,21],43:[2,21],44:[2,21],46:[2,21],47:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],54:[2,21],55:[2,21],57:[2,21],59:[2,21],61:[2,21],63:[2,21],65:[2,21],67:[2,21],69:[2,21],77:[2,21],78:[2,21],79:[2,21],80:[2,21],81:[2,21]},{8:[1,53],21:[1,50],35:[1,51],37:[1,52],42:[2,25],43:[2,25],44:[2,25],46:[2,25],47:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],54:[2,25],55:[2,25],57:[2,25],59:[2,25],61:[2,25],63:[2,25],65:[2,25],67:[2,25],69:[2,25],77:[2,25],78:[2,25],79:[2,25],80:[2,25],81:[2,25]},{6:[2,8],8:[2,8],14:[2,8],17:[2,8],27:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],40:[2,8]},{6:[2,9],8:[2,9],14:[2,9],17:[2,9],27:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],40:[2,9],73:54,77:[1,55],78:[1,56],79:[1,57],80:[1,58],81:[1,59]},{6:[2,10],8:[2,10],14:[2,10],17:[2,10],27:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],40:[2,10]},{6:[2,11],8:[2,11],14:[2,11],17:[2,11],27:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],40:[2,11]},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,22:60,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28},{6:[2,60],8:[2,60],14:[2,60],17:[2,60],27:[2,60],29:[2,60],30:[2,60],31:[2,60],32:[2,60],33:[2,60],34:[2,60],40:[2,60],77:[2,60],78:[2,60],79:[2,60],80:[2,60],81:[2,60]},{69:[1,64],73:63,77:[1,55],78:[1,56],79:[1,57],80:[1,58],81:[1,59]},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,22:65,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,22:66,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28},{6:[2,17],8:[2,17],14:[2,17],17:[2,17],27:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],40:[2,17]},{6:[2,57],8:[2,57],11:[2,57],12:[2,57],14:[2,57],17:[2,57],27:[2,57],29:[2,57],30:[2,57],31:[2,57],32:[2,57],33:[2,57],34:[2,57],36:[2,57],40:[2,57],68:[2,57],69:[2,57],77:[2,57],78:[2,57],79:[2,57],80:[2,57],81:[2,57],82:[2,57]},{6:[2,55],8:[2,55],11:[2,55],12:[2,55],14:[2,55],17:[2,55],27:[2,55],29:[2,55],30:[2,55],31:[2,55],32:[2,55],33:[2,55],34:[2,55],36:[2,55],40:[2,55],65:[1,68],67:[1,67],68:[2,55],69:[2,55],77:[2,55],78:[2,55],79:[2,55],80:[2,55],81:[2,55],82:[2,55]},{6:[2,53],8:[2,53],11:[2,53],12:[2,53],14:[2,53],17:[2,53],27:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],36:[2,53],40:[2,53],63:[1,69],65:[2,53],67:[2,53],68:[2,53],69:[2,53],77:[2,53],78:[2,53],79:[2,53],80:[2,53],81:[2,53],82:[2,53]},{6:[2,51],8:[2,51],11:[2,51],12:[2,51],14:[2,51],17:[2,51],27:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],34:[2,51],36:[2,51],40:[2,51],61:[1,70],63:[2,51],65:[2,51],67:[2,51],68:[2,51],69:[2,51],77:[2,51],78:[2,51],79:[2,51],80:[2,51],81:[2,51],82:[2,51]},{6:[2,49],8:[2,49],11:[2,49],12:[2,49],14:[2,49],17:[2,49],27:[2,49],29:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],36:[2,49],40:[2,49],59:[1,71],61:[2,49],63:[2,49],65:[2,49],67:[2,49],68:[2,49],69:[2,49],77:[2,49],78:[2,49],79:[2,49],80:[2,49],81:[2,49],82:[2,49]},{6:[2,47],8:[2,47],11:[2,47],12:[2,47],14:[2,47],17:[2,47],27:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],36:[2,47],40:[2,47],57:[1,72],59:[2,47],61:[2,47],63:[2,47],65:[2,47],67:[2,47],68:[2,47],69:[2,47],77:[2,47],78:[2,47],79:[2,47],80:[2,47],81:[2,47],82:[2,47]},{6:[2,45],8:[2,45],11:[2,45],12:[2,45],14:[2,45],17:[2,45],27:[2,45],29:[2,45],30:[2,45],31:[2,45],32:[2,45],33:[2,45],34:[2,45],36:[2,45],40:[2,45],54:[1,73],55:[1,74],57:[2,45],59:[2,45],61:[2,45],63:[2,45],65:[2,45],67:[2,45],68:[2,45],69:[2,45],77:[2,45],78:[2,45],79:[2,45],80:[2,45],81:[2,45],82:[2,45]},{6:[2,42],8:[2,42],11:[2,42],12:[2,42],14:[2,42],17:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],36:[2,42],40:[2,42],49:[1,75],50:[1,76],51:[1,77],52:[1,78],54:[2,42],55:[2,42],57:[2,42],59:[2,42],61:[2,42],63:[2,42],65:[2,42],67:[2,42],68:[2,42],69:[2,42],77:[2,42],78:[2,42],79:[2,42],80:[2,42],81:[2,42],82:[2,42]},{6:[2,37],8:[2,37],11:[2,37],12:[2,37],14:[2,37],17:[2,37],27:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],34:[2,37],36:[2,37],40:[2,37],46:[1,79],47:[1,80],49:[2,37],50:[2,37],51:[2,37],52:[2,37],54:[2,37],55:[2,37],57:[2,37],59:[2,37],61:[2,37],63:[2,37],65:[2,37],67:[2,37],68:[2,37],69:[2,37],77:[2,37],78:[2,37],79:[2,37],80:[2,37],81:[2,37],82:[2,37]},{6:[2,34],8:[2,34],11:[2,34],12:[2,34],14:[2,34],17:[2,34],27:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],36:[2,34],40:[2,34],42:[1,81],43:[1,82],44:[1,83],46:[2,34],47:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],54:[2,34],55:[2,34],57:[2,34],59:[2,34],61:[2,34],63:[2,34],65:[2,34],67:[2,34],68:[2,34],69:[2,34],77:[2,34],78:[2,34],79:[2,34],80:[2,34],81:[2,34],82:[2,34]},{6:[2,30],8:[2,30],11:[2,30],12:[2,30],14:[2,30],17:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],36:[2,30],40:[2,30],42:[2,30],43:[2,30],44:[2,30],46:[2,30],47:[2,30],49:[2,30],50:[2,30],51:[2,30],52:[2,30],54:[2,30],55:[2,30],57:[2,30],59:[2,30],61:[2,30],63:[2,30],65:[2,30],67:[2,30],68:[2,30],69:[2,30],77:[2,30],78:[2,30],79:[2,30],80:[2,30],81:[2,30],82:[2,30]},{6:[2,28],8:[2,28],11:[2,28],12:[2,28],14:[2,28],17:[2,28],27:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],36:[2,28],40:[2,28],42:[2,28],43:[2,28],44:[2,28],46:[2,28],47:[2,28],49:[2,28],50:[2,28],51:[2,28],52:[2,28],54:[2,28],55:[2,28],57:[2,28],59:[2,28],61:[2,28],63:[2,28],65:[2,28],67:[2,28],68:[2,28],69:[2,28],77:[2,28],78:[2,28],79:[2,28],80:[2,28],81:[2,28],82:[2,28]},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:84},{6:[2,24],8:[2,24],11:[2,24],12:[2,24],14:[2,24],17:[2,24],27:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],36:[2,24],40:[2,24],42:[2,24],43:[2,24],44:[2,24],46:[2,24],47:[2,24],49:[2,24],50:[2,24],51:[2,24],52:[2,24],54:[2,24],55:[2,24],57:[2,24],59:[2,24],61:[2,24],63:[2,24],65:[2,24],67:[2,24],68:[2,24],69:[2,24],77:[2,24],78:[2,24],79:[2,24],80:[2,24],81:[2,24],82:[2,24]},{6:[2,26],8:[2,26],11:[2,26],12:[2,26],14:[2,26],17:[2,26],27:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],36:[2,26],40:[2,26],42:[2,26],43:[2,26],44:[2,26],46:[2,26],47:[2,26],49:[2,26],50:[2,26],51:[2,26],52:[2,26],54:[2,26],55:[2,26],57:[2,26],59:[2,26],61:[2,26],63:[2,26],65:[2,26],67:[2,26],68:[2,26],69:[2,26],77:[2,26],78:[2,26],79:[2,26],80:[2,26],81:[2,26],82:[2,26]},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,22:85,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28},{6:[2,18],8:[2,18],11:[2,18],12:[2,18],14:[2,18],17:[2,18],27:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],36:[2,18],40:[2,18],42:[2,18],43:[2,18],44:[2,18],46:[2,18],47:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],54:[2,18],55:[2,18],57:[2,18],59:[2,18],61:[2,18],63:[2,18],65:[2,18],67:[2,18],68:[2,18],69:[2,18],77:[2,18],78:[2,18],79:[2,18],80:[2,18],81:[2,18],82:[2,18]},{6:[2,19],8:[2,19],11:[2,19],12:[2,19],14:[2,19],17:[2,19],27:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],36:[2,19],40:[2,19],42:[2,19],43:[2,19],44:[2,19],46:[2,19],47:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],54:[2,19],55:[2,19],57:[2,19],59:[2,19],61:[2,19],63:[2,19],65:[2,19],67:[2,19],68:[2,19],69:[2,19],77:[2,19],78:[2,19],79:[2,19],80:[2,19],81:[2,19],82:[2,19]},{6:[2,20],8:[2,20],11:[2,20],12:[2,20],14:[2,20],17:[2,20],27:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],36:[2,20],40:[2,20],42:[2,20],43:[2,20],44:[2,20],46:[2,20],47:[2,20],49:[2,20],50:[2,20],51:[2,20],52:[2,20],54:[2,20],55:[2,20],57:[2,20],59:[2,20],61:[2,20],63:[2,20],65:[2,20],67:[2,20],68:[2,20],69:[2,20],77:[2,20],78:[2,20],79:[2,20],80:[2,20],81:[2,20],82:[2,20]},{7:86,12:[1,7]},{11:[2,72],17:[2,72]},{19:87,32:[1,44],33:[1,45],34:[1,46]},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,22:88,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,22:89,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28},{17:[1,90]},{6:[2,77],8:[2,77],11:[2,77],17:[2,77],32:[2,77],33:[2,77],34:[2,77],40:[2,77],71:91},{7:95,8:[1,94],12:[1,7],17:[1,62],20:93,74:92},{8:[2,66],12:[2,66],17:[2,66]},{8:[2,67],12:[2,67],17:[2,67]},{8:[2,68],12:[2,68],17:[2,68]},{8:[2,69],12:[2,69],17:[2,69]},{8:[2,70],12:[2,70],17:[2,70]},{7:96,12:[1,7],69:[1,64]},{6:[2,25],8:[2,25],11:[2,25],12:[2,25],14:[2,25],17:[2,25],27:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[1,51],36:[2,25],37:[1,52],40:[2,25],42:[2,25],43:[2,25],44:[2,25],46:[2,25],47:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],54:[2,25],55:[2,25],57:[2,25],59:[2,25],61:[2,25],63:[2,25],65:[2,25],67:[2,25],68:[2,25],69:[2,25],77:[2,25],78:[2,25],79:[2,25],80:[2,25],81:[2,25],82:[2,25]},{6:[2,21],8:[2,21],11:[2,21],12:[2,21],14:[2,21],17:[2,21],27:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],40:[2,21],42:[2,21],43:[2,21],44:[2,21],46:[2,21],47:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],54:[2,21],55:[2,21],57:[2,21],59:[2,21],61:[2,21],63:[2,21],65:[2,21],67:[2,21],68:[2,21],69:[2,21],77:[2,21],78:[2,21],79:[2,21],80:[2,21],81:[2,21],82:[2,21]},{7:95,8:[1,94],12:[1,7],17:[1,62],20:93,74:97},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:98},{6:[2,15],8:[2,15],14:[2,15],17:[2,15],27:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],40:[2,15],69:[1,64]},{6:[2,16],8:[2,16],14:[2,16],17:[2,16],27:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],40:[2,16],69:[1,64]},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,22:99,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:100},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:101},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:102},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:103},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:104},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:105},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:106},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:107},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:108},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:109},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:110},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:111},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:112},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:113},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:114},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:115},{6:[2,29],8:[2,29],11:[2,29],12:[2,29],14:[2,29],17:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],36:[2,29],40:[2,29],42:[2,29],43:[2,29],44:[2,29],46:[2,29],47:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],54:[2,29],55:[2,29],57:[2,29],59:[2,29],61:[2,29],63:[2,29],65:[2,29],67:[2,29],68:[2,29],69:[2,29],77:[2,29],78:[2,29],79:[2,29],80:[2,29],81:[2,29],82:[2,29]},{11:[1,116],69:[1,64]},{5:[2,3],6:[2,3],8:[2,3],11:[2,3],12:[2,3],14:[2,3],17:[2,3],27:[2,3],29:[2,3],30:[2,3],31:[2,3],32:[2,3],33:[2,3],34:[2,3],36:[2,3],40:[2,3],42:[2,3],43:[2,3],44:[2,3],46:[2,3],47:[2,3],49:[2,3],50:[2,3],51:[2,3],52:[2,3],54:[2,3],55:[2,3],57:[2,3],59:[2,3],61:[2,3],63:[2,3],65:[2,3],67:[2,3],68:[2,3],69:[2,3],77:[2,3],78:[2,3],79:[2,3],80:[2,3],81:[2,3],82:[2,3]},{6:[2,6],8:[2,6],14:[2,6],17:[2,6],27:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6],40:[2,6]},{6:[2,7],8:[2,7],14:[2,7],17:[2,7],27:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7],40:[2,7],69:[1,64]},{36:[1,117],69:[1,64]},{6:[2,23],8:[2,23],11:[2,23],12:[2,23],14:[2,23],17:[2,23],21:[2,23],27:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[2,23],36:[2,23],37:[2,23],40:[2,23],42:[2,23],43:[2,23],44:[2,23],46:[2,23],47:[2,23],49:[2,23],50:[2,23],51:[2,23],52:[2,23],54:[2,23],55:[2,23],57:[2,23],59:[2,23],61:[2,23],63:[2,23],65:[2,23],67:[2,23],68:[2,23],69:[2,23],77:[2,23],78:[2,23],79:[2,23],80:[2,23],81:[2,23],82:[2,23]},{4:42,6:[1,3],8:[1,43],11:[2,79],17:[1,62],19:41,20:61,22:119,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:28,72:118},{6:[2,62],8:[2,62],14:[2,62],17:[2,62],27:[2,62],29:[2,62],30:[2,62],31:[2,62],32:[2,62],33:[2,62],34:[2,62],40:[2,62],77:[2,62],78:[2,62],79:[2,62],80:[2,62],81:[2,62]},{6:[2,63],8:[2,63],14:[2,63],17:[2,63],27:[2,63],29:[2,63],30:[2,63],31:[2,63],32:[2,63],33:[2,63],34:[2,63],35:[1,51],37:[1,52],40:[2,63],77:[2,63],78:[2,63],79:[2,63],80:[2,63],81:[2,63]},{11:[2,81],17:[2,81],75:120},{6:[2,65],8:[2,65],14:[2,65],17:[2,65],27:[2,65],29:[2,65],30:[2,65],31:[2,65],32:[2,65],33:[2,65],34:[2,65],40:[2,65],77:[2,65],78:[2,65],79:[2,65],80:[2,65],81:[2,65]},{6:[2,12],8:[2,12],14:[2,12],17:[2,12],27:[2,12],28:[1,121],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],40:[2,12]},{6:[2,61],8:[2,61],14:[2,61],17:[2,61],27:[2,61],29:[2,61],30:[2,61],31:[2,61],32:[2,61],33:[2,61],34:[2,61],40:[2,61],77:[2,61],78:[2,61],79:[2,61],80:[2,61],81:[2,61]},{6:[2,58],8:[2,58],11:[2,58],12:[2,58],14:[2,58],17:[2,58],27:[2,58],29:[2,58],30:[2,58],31:[2,58],32:[2,58],33:[2,58],34:[2,58],36:[2,58],40:[2,58],68:[2,58],69:[2,58],77:[2,58],78:[2,58],79:[2,58],80:[2,58],81:[2,58],82:[2,58]},{68:[1,122],69:[1,64]},{6:[2,54],8:[2,54],11:[2,54],12:[2,54],14:[2,54],17:[2,54],27:[2,54],29:[2,54],30:[2,54],31:[2,54],32:[2,54],33:[2,54],34:[2,54],36:[2,54],40:[2,54],63:[1,69],65:[2,54],67:[2,54],68:[2,54],69:[2,54],77:[2,54],78:[2,54],79:[2,54],80:[2,54],81:[2,54],82:[2,54]},{6:[2,52],8:[2,52],11:[2,52],12:[2,52],14:[2,52],17:[2,52],27:[2,52],29:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,52],34:[2,52],36:[2,52],40:[2,52],61:[1,70],63:[2,52],65:[2,52],67:[2,52],68:[2,52],69:[2,52],77:[2,52],78:[2,52],79:[2,52],80:[2,52],81:[2,52],82:[2,52]},{6:[2,50],8:[2,50],11:[2,50],12:[2,50],14:[2,50],17:[2,50],27:[2,50],29:[2,50],30:[2,50],31:[2,50],32:[2,50],33:[2,50],34:[2,50],36:[2,50],40:[2,50],59:[1,71],61:[2,50],63:[2,50],65:[2,50],67:[2,50],68:[2,50],69:[2,50],77:[2,50],78:[2,50],79:[2,50],80:[2,50],81:[2,50],82:[2,50]},{6:[2,48],8:[2,48],11:[2,48],12:[2,48],14:[2,48],17:[2,48],27:[2,48],29:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],34:[2,48],36:[2,48],40:[2,48],57:[1,72],59:[2,48],61:[2,48],63:[2,48],65:[2,48],67:[2,48],68:[2,48],69:[2,48],77:[2,48],78:[2,48],79:[2,48],80:[2,48],81:[2,48],82:[2,48]},{6:[2,46],8:[2,46],11:[2,46],12:[2,46],14:[2,46],17:[2,46],27:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],36:[2,46],40:[2,46],54:[1,73],55:[1,74],57:[2,46],59:[2,46],61:[2,46],63:[2,46],65:[2,46],67:[2,46],68:[2,46],69:[2,46],77:[2,46],78:[2,46],79:[2,46],80:[2,46],81:[2,46],82:[2,46]},{6:[2,43],8:[2,43],11:[2,43],12:[2,43],14:[2,43],17:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],36:[2,43],40:[2,43],49:[1,75],50:[1,76],51:[1,77],52:[1,78],54:[2,43],55:[2,43],57:[2,43],59:[2,43],61:[2,43],63:[2,43],65:[2,43],67:[2,43],68:[2,43],69:[2,43],77:[2,43],78:[2,43],79:[2,43],80:[2,43],81:[2,43],82:[2,43]},{6:[2,44],8:[2,44],11:[2,44],12:[2,44],14:[2,44],17:[2,44],27:[2,44],29:[2,44],30:[2,44],31:[2,44],32:[2,44],33:[2,44],34:[2,44],36:[2,44],40:[2,44],49:[1,75],50:[1,76],51:[1,77],52:[1,78],54:[2,44],55:[2,44],57:[2,44],59:[2,44],61:[2,44],63:[2,44],65:[2,44],67:[2,44],68:[2,44],69:[2,44],77:[2,44],78:[2,44],79:[2,44],80:[2,44],81:[2,44],82:[2,44]},{6:[2,38],8:[2,38],11:[2,38],12:[2,38],14:[2,38],17:[2,38],27:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],34:[2,38],36:[2,38],40:[2,38],46:[1,79],47:[1,80],49:[2,38],50:[2,38],51:[2,38],52:[2,38],54:[2,38],55:[2,38],57:[2,38],59:[2,38],61:[2,38],63:[2,38],65:[2,38],67:[2,38],68:[2,38],69:[2,38],77:[2,38],78:[2,38],79:[2,38],80:[2,38],81:[2,38],82:[2,38]},{6:[2,39],8:[2,39],11:[2,39],12:[2,39],14:[2,39],17:[2,39],27:[2,39],29:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],34:[2,39],36:[2,39],40:[2,39],46:[1,79],47:[1,80],49:[2,39],50:[2,39],51:[2,39],52:[2,39],54:[2,39],55:[2,39],57:[2,39],59:[2,39],61:[2,39],63:[2,39],65:[2,39],67:[2,39],68:[2,39],69:[2,39],77:[2,39],78:[2,39],79:[2,39],80:[2,39],81:[2,39],82:[2,39]},{6:[2,40],8:[2,40],11:[2,40],12:[2,40],14:[2,40],17:[2,40],27:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],36:[2,40],40:[2,40],46:[1,79],47:[1,80],49:[2,40],50:[2,40],51:[2,40],52:[2,40],54:[2,40],55:[2,40],57:[2,40],59:[2,40],61:[2,40],63:[2,40],65:[2,40],67:[2,40],68:[2,40],69:[2,40],77:[2,40],78:[2,40],79:[2,40],80:[2,40],81:[2,40],82:[2,40]},{6:[2,41],8:[2,41],11:[2,41],12:[2,41],14:[2,41],17:[2,41],27:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],34:[2,41],36:[2,41],40:[2,41],46:[1,79],47:[1,80],49:[2,41],50:[2,41],51:[2,41],52:[2,41],54:[2,41],55:[2,41],57:[2,41],59:[2,41],61:[2,41],63:[2,41],65:[2,41],67:[2,41],68:[2,41],69:[2,41],77:[2,41],78:[2,41],79:[2,41],80:[2,41],81:[2,41],82:[2,41]},{6:[2,35],8:[2,35],11:[2,35],12:[2,35],14:[2,35],17:[2,35],27:[2,35],29:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35],36:[2,35],40:[2,35],42:[1,81],43:[1,82],44:[1,83],46:[2,35],47:[2,35],49:[2,35],50:[2,35],51:[2,35],52:[2,35],54:[2,35],55:[2,35],57:[2,35],59:[2,35],61:[2,35],63:[2,35],65:[2,35],67:[2,35],68:[2,35],69:[2,35],77:[2,35],78:[2,35],79:[2,35],80:[2,35],81:[2,35],82:[2,35]},{6:[2,36],8:[2,36],11:[2,36],12:[2,36],14:[2,36],17:[2,36],27:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],34:[2,36],36:[2,36],40:[2,36],42:[1,81],43:[1,82],44:[1,83],46:[2,36],47:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],54:[2,36],55:[2,36],57:[2,36],59:[2,36],61:[2,36],63:[2,36],65:[2,36],67:[2,36],68:[2,36],69:[2,36],77:[2,36],78:[2,36],79:[2,36],80:[2,36],81:[2,36],82:[2,36]},{6:[2,31],8:[2,31],11:[2,31],12:[2,31],14:[2,31],17:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],36:[2,31],40:[2,31],42:[2,31],43:[2,31],44:[2,31],46:[2,31],47:[2,31],49:[2,31],50:[2,31],51:[2,31],52:[2,31],54:[2,31],55:[2,31],57:[2,31],59:[2,31],61:[2,31],63:[2,31],65:[2,31],67:[2,31],68:[2,31],69:[2,31],77:[2,31],78:[2,31],79:[2,31],80:[2,31],81:[2,31],82:[2,31]},{6:[2,32],8:[2,32],11:[2,32],12:[2,32],14:[2,32],17:[2,32],27:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],36:[2,32],40:[2,32],42:[2,32],43:[2,32],44:[2,32],46:[2,32],47:[2,32],49:[2,32],50:[2,32],51:[2,32],52:[2,32],54:[2,32],55:[2,32],57:[2,32],59:[2,32],61:[2,32],63:[2,32],65:[2,32],67:[2,32],68:[2,32],69:[2,32],77:[2,32],78:[2,32],79:[2,32],80:[2,32],81:[2,32],82:[2,32]},{6:[2,33],8:[2,33],11:[2,33],12:[2,33],14:[2,33],17:[2,33],27:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],36:[2,33],40:[2,33],42:[2,33],43:[2,33],44:[2,33],46:[2,33],47:[2,33],49:[2,33],50:[2,33],51:[2,33],52:[2,33],54:[2,33],55:[2,33],57:[2,33],59:[2,33],61:[2,33],63:[2,33],65:[2,33],67:[2,33],68:[2,33],69:[2,33],77:[2,33],78:[2,33],79:[2,33],80:[2,33],81:[2,33],82:[2,33]},{6:[2,27],8:[2,27],11:[2,27],12:[2,27],14:[2,27],17:[2,27],27:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],36:[2,27],40:[2,27],42:[2,27],43:[2,27],44:[2,27],46:[2,27],47:[2,27],49:[2,27],50:[2,27],51:[2,27],52:[2,27],54:[2,27],55:[2,27],57:[2,27],59:[2,27],61:[2,27],63:[2,27],65:[2,27],67:[2,27],68:[2,27],69:[2,27],77:[2,27],78:[2,27],79:[2,27],80:[2,27],81:[2,27],82:[2,27]},{6:[2,22],8:[2,22],11:[2,22],12:[2,22],14:[2,22],17:[2,22],21:[2,22],27:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],40:[2,22],42:[2,22],43:[2,22],44:[2,22],46:[2,22],47:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],54:[2,22],55:[2,22],57:[2,22],59:[2,22],61:[2,22],63:[2,22],65:[2,22],67:[2,22],68:[2,22],69:[2,22],77:[2,22],78:[2,22],79:[2,22],80:[2,22],81:[2,22],82:[2,22]},{11:[1,123]},{11:[2,80],69:[1,64],82:[1,124]},{11:[2,83],17:[1,126],76:125},{7:127,12:[1,7],23:128,27:[1,22]},{4:42,6:[1,3],8:[1,43],17:[1,62],19:41,20:61,32:[1,44],33:[1,45],34:[1,46],38:39,39:38,40:[1,40],41:37,45:36,48:35,53:34,56:33,58:32,60:31,62:30,64:29,66:129},{6:[2,59],8:[2,59],14:[2,59],17:[2,59],27:[2,59],29:[2,59],30:[2,59],31:[2,59],32:[2,59],33:[2,59],34:[2,59],40:[2,59],77:[2,59],78:[2,59],79:[2,59],80:[2,59],81:[2,59]},{6:[2,78],8:[2,78],11:[2,78],17:[2,78],32:[2,78],33:[2,78],34:[2,78],40:[2,78]},{11:[1,130]},{11:[2,84],82:[1,131]},{6:[2,13],8:[2,13],14:[2,13],17:[2,13],27:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],40:[2,13]},{6:[2,14],8:[2,14],14:[2,14],17:[2,14],27:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],40:[2,14]},{6:[2,56],8:[2,56],11:[2,56],12:[2,56],14:[2,56],17:[2,56],27:[2,56],29:[2,56],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],36:[2,56],40:[2,56],68:[2,56],69:[2,56],77:[2,56],78:[2,56],79:[2,56],80:[2,56],81:[2,56],82:[2,56]},{7:132,12:[1,7]},{11:[2,82],17:[2,82]},{6:[2,64],8:[2,64],14:[2,64],17:[2,64],27:[2,64],29:[2,64],30:[2,64],31:[2,64],32:[2,64],33:[2,64],34:[2,64],40:[2,64],77:[2,64],78:[2,64],79:[2,64],80:[2,64],81:[2,64]}],
defaultActions: {4:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];

    ast = require('../ast');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:this.popState();
break;
case 3:/* skip comment */
break;
case 4:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 5:this.begin("indent");
break;
case 6:/* ignore blank lines */
break;
case 7:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 12;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 8:/* ignore all other whitespace */
break;
case 9:return 33
break;
case 10:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 34;
break;
case 11:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 34;
break;
case 12:return 35
break;
case 13:return 36
break;
case 14:return 8
break;
case 15:return 11
break;
case 16:return 82
break;
case 17:return 69
break;
case 18:return 37
break;
case 19:return 54
break;
case 20:return 55
break;
case 21:return 51
break;
case 22:return 52
break;
case 23:return 68
break;
case 24:return 65
break;
case 25:return 63
break;
case 26:return 57
break;
case 27:return 61
break;
case 28:return 59
break;
case 29:return 77
break;
case 30:return 78
break;
case 31:return 80
break;
case 32:return 79
break;
case 33:return 81
break;
case 34:return 49
break;
case 35:return 50
break;
case 36:return 21
break;
case 37:return 46
break;
case 38:return 47
break;
case 39:return 42
break;
case 40:return 43
break;
case 41:return 44
break;
case 42:return 67
break;
case 43:return 40
break;
case 44:return 27
break;
case 45:return 28
break;
case 46:return 30
break;
case 47:return 18
break;
case 48:return 6
break;
case 49:return 32
break;
case 50:return 13   // do we need pass if we have skip?
break;
case 51:return 31
break;
case 52:return 'BREAK'
break;
case 53:return 29
break;
case 54:return 17
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:".*")/,/^(?:'.*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?::)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:>~)/,/^(?:->)/,/^(?:>>)/,/^(?:=>)/,/^(?:>\|)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:#)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:fail\b)/,/^(?:is\b)/,/^(?:action\b)/,/^(?:true|false\b)/,/^(?:pass\b)/,/^(?:skip\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:[a-zA-Z][a-zA-Z0-9]*)/,/^(?:.)/],
conditions: {"indent":{"rules":[6,7],"inclusive":false},"comment":{"rules":[0,1,2,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}