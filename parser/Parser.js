/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_repetition0":4,"EOF":5,"block":6,"BEGIN":7,"PASS":8,"END":9,"block_repetition0":10,"statement":11,"RECEIVE":12,"NAME":13,"statement_repetition0":14,"IS":15,"literal":16,"identifier":17,"=":18,"expression":19,"selection_statement":20,"sequence_statement":21,"return_statement":22,"jump_statement":23,"IF":24,"ELSE":25,"RETURN":26,"FAIL":27,"SKIP":28,"BOOLEAN":29,"CONSTANT":30,"STRING_LITERAL":31,"[":32,"]":33,".":34,"primary_expression":35,"(":36,")":37,"unary_expression":38,"#":39,"multiplicative_expression":40,"*":41,"/":42,"%":43,"additive_expression":44,"+":45,"-":46,"relational_expression":47,"<":48,">":49,"<=":50,">=":51,"equality_expression":52,"==":53,"!=":54,"and_expression":55,"&":56,"exclusive_or_expression":57,"^":58,"inclusive_or_expression":59,"|":60,"logical_and_expression":61,"&&":62,"logical_or_expression":63,"||":64,"conditional_expression":65,"?":66,":":67,"..":68,"invocation":69,"invocation_repetition0":70,"invocation_option0":71,"connector":72,"sink":73,"sink_repetition0":74,"sink_option0":75,">~":76,"->":77,"=>":78,">>":79,">|":80,",":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"PASS",9:"END",12:"RECEIVE",13:"NAME",15:"IS",18:"=",24:"IF",25:"ELSE",26:"RETURN",27:"FAIL",28:"SKIP",29:"BOOLEAN",30:"CONSTANT",31:"STRING_LITERAL",32:"[",33:"]",34:".",36:"(",37:")",39:"#",41:"*",42:"/",43:"%",45:"+",46:"-",48:"<",49:">",50:"<=",51:">=",53:"==",54:"!=",56:"&",58:"^",60:"|",62:"&&",64:"||",66:"?",67:":",68:"..",76:">~",77:"->",78:"=>",79:">>",80:">|",81:","},
productions_: [0,[3,2],[6,3],[6,3],[11,3],[11,3],[11,3],[11,1],[11,1],[11,1],[11,1],[20,3],[20,5],[20,5],[22,2],[22,2],[23,1],[16,1],[16,1],[16,1],[17,1],[17,4],[17,3],[35,1],[35,1],[35,1],[35,3],[38,1],[38,2],[40,1],[40,3],[40,3],[40,3],[44,1],[44,3],[44,3],[47,1],[47,3],[47,3],[47,3],[47,3],[52,1],[52,3],[52,3],[55,1],[55,3],[57,1],[57,3],[59,1],[59,3],[61,1],[61,3],[63,1],[63,3],[65,1],[65,5],[19,1],[19,3],[69,5],[21,1],[21,3],[21,3],[73,1],[73,5],[73,1],[72,1],[72,1],[72,1],[72,1],[72,1],[4,0],[4,2],[10,0],[10,2],[14,0],[14,3],[70,0],[70,3],[71,0],[71,1],[74,0],[74,3],[75,0],[75,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; return this.$; 
break;
case 2:this.$ = [];
break;
case 3:this.$ = $$[$0-1];
break;
case 4:this.$ = ['receive', $$[$0] ? $$[$0].concat([$$[$0-1]]): [$$[$0-1]]];
break;
case 5:this.$ = ['define', $$[$0-2], $$[$0]];
break;
case 6:this.$ = new ast.Operator('assign', $$[$0-2], $$[$0]);
break;
case 11:this.$ = new ast.Selection($$[$0-1], $$[$0]);
break;
case 12:this.$ = new ast.Selection($$[$0-3], $$[$0-2], $$[$0]);
break;
case 13:this.$ = new ast.Selection($$[$0-3], $$[$0-2], $$[$0]);
break;
case 14:this.$ = new ast.Result(true, $$[$0]);
break;
case 15:this.$ = new ast.Result(false, $$[$0]);
break;
case 16:this.$ = new ast.Jump($$[$0]);
break;
case 17:this.$ = new ast.Literal($$[$0] === 'true' ? true : false);
break;
case 18:this.$ = new ast.Literal(parseFloat($$[$0]));
break;
case 19:this.$ = new ast.Literal($$[$0]);
break;
case 20:this.$ = new ast.Identifier($$[$0]);
break;
case 21:this.$ = new ast.Identifier($$[$0-3], $$[$0-1]);
break;
case 22:this.$ = new ast.Identifier($$[$0-2], $$[$0]);
break;
case 25:this.$ = new ast.Action([], $$[$0]);
break;
case 26:this.$ = $$[$0-1];
break;
case 28:this.$ = new ast.Operator('card', $$[$0]);
break;
case 30:this.$ = new ast.Operator('mult', $$[$0-2], $$[$0]);
break;
case 31:this.$ = new ast.Operator('div', $$[$0-2], $$[$0]);
break;
case 32:this.$ = new ast.Operator('mod', $$[$0-2], $$[$0]);
break;
case 34:this.$ = new ast.Operator('add', $$[$0-2], $$[$0]);
break;
case 35:this.$ = new ast.Operator('sub', $$[$0-2], $$[$0]);
break;
case 37:this.$ = new ast.Relational('lt', $$[$0-2], $$[$0]);
break;
case 38:this.$ = new ast.Relational('gt', $$[$0-2], $$[$0]);
break;
case 39:this.$ = new ast.Relational('le', $$[$0-2], $$[$0]);
break;
case 40:this.$ = new ast.Relational('ge', $$[$0-2], $$[$0]);
break;
case 42:this.$ = new ast.Relational('equality', $$[$0-2], $$[$0]);
break;
case 43:this.$ = new ast.Relational('inequality', $$[$0-2], $$[$0]);
break;
case 45:this.$ = ['bitwise_and', $$[$0-2], $$[$0]];
break;
case 47:this.$ = ['xor', $$[$0-2], $$[$0]];
break;
case 49:this.$ = ['bitwise_or', $$[$0-2], $$[$0]];
break;
case 51:this.$ = ['and', $$[$0-2], $$[$0]];
break;
case 53:this.$ = ['or', $$[$0-2], $$[$0]];
break;
case 55:this.$ = ['conditional', $$[$0-4], $$[$0-2], $$[$0]];
break;
case 58:this.$ = new ast.Invocation($$[$0-4], $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : $$[$0-2]);
break;
case 60:this.$ = [$$[$0-1], $$[$0-2], $$[$0]];
break;
case 61:this.$ = [$$[$0-1], $$[$0-2], $$[$0]];
break;
case 63:this.$ = {action: ($$[$0-2] ? $$[$0-3].concat([$$[$0-2]]) : $$[$0-3]), statements: $$[$0]};
break;
case 64:this.$ = {'action': [], statements: $$[$0]};
break;
case 70:this.$ = [];
break;
case 71:$$[$0-1].push($$[$0]);
break;
case 72:this.$ = [];
break;
case 73:$$[$0-1].push($$[$0]);
break;
case 74:this.$ = [];
break;
case 75:$$[$0-2].push($$[$0-1]);
break;
case 76:this.$ = [];
break;
case 77:$$[$0-2].push($$[$0-1]);
break;
case 80:this.$ = [];
break;
case 81:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,70],7:[2,70],12:[2,70],13:[2,70],24:[2,70],26:[2,70],27:[2,70],28:[2,70],29:[2,70],30:[2,70],31:[2,70],36:[2,70],39:[2,70]},{1:[3]},{5:[1,3],6:32,7:[1,37],11:4,12:[1,5],13:[1,6],16:31,17:7,19:14,20:8,21:9,22:10,23:11,24:[1,12],26:[1,15],27:[1,16],28:[1,17],29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18,69:13},{1:[2,1]},{5:[2,71],7:[2,71],12:[2,71],13:[2,71],24:[2,71],26:[2,71],27:[2,71],28:[2,71],29:[2,71],30:[2,71],31:[2,71],36:[2,71],39:[2,71]},{13:[1,38]},{15:[1,39],18:[2,20],32:[2,20],34:[2,20],36:[2,20],41:[2,20],42:[2,20],43:[2,20],45:[2,20],46:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],53:[2,20],54:[2,20],56:[2,20],58:[2,20],60:[2,20],62:[2,20],64:[2,20],66:[2,20],68:[2,20],76:[2,20],77:[2,20],78:[2,20],79:[2,20],80:[2,20]},{18:[1,40],32:[1,41],34:[1,42],36:[1,43],41:[2,24],42:[2,24],43:[2,24],45:[2,24],46:[2,24],48:[2,24],49:[2,24],50:[2,24],51:[2,24],53:[2,24],54:[2,24],56:[2,24],58:[2,24],60:[2,24],62:[2,24],64:[2,24],66:[2,24],68:[2,24],76:[2,24],77:[2,24],78:[2,24],79:[2,24],80:[2,24]},{5:[2,7],7:[2,7],9:[2,7],12:[2,7],13:[2,7],24:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],36:[2,7],39:[2,7]},{5:[2,8],7:[2,8],9:[2,8],12:[2,8],13:[2,8],24:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],36:[2,8],39:[2,8],72:44,76:[1,45],77:[1,46],78:[1,47],79:[1,48],80:[1,49]},{5:[2,9],7:[2,9],9:[2,9],12:[2,9],13:[2,9],24:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],36:[2,9],39:[2,9]},{5:[2,10],7:[2,10],9:[2,10],12:[2,10],13:[2,10],24:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],36:[2,10],39:[2,10]},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:50,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18},{5:[2,59],7:[2,59],9:[2,59],12:[2,59],13:[2,59],24:[2,59],26:[2,59],27:[2,59],28:[2,59],29:[2,59],30:[2,59],31:[2,59],36:[2,59],39:[2,59],76:[2,59],77:[2,59],78:[2,59],79:[2,59],80:[2,59]},{68:[1,54],72:53,76:[1,45],77:[1,46],78:[1,47],79:[1,48],80:[1,49]},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:55,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:56,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18},{5:[2,16],7:[2,16],9:[2,16],12:[2,16],13:[2,16],24:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],36:[2,16],39:[2,16]},{5:[2,56],7:[2,56],9:[2,56],12:[2,56],13:[2,56],24:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],30:[2,56],31:[2,56],33:[2,56],36:[2,56],37:[2,56],39:[2,56],67:[2,56],68:[2,56],76:[2,56],77:[2,56],78:[2,56],79:[2,56],80:[2,56],81:[2,56]},{5:[2,54],7:[2,54],9:[2,54],12:[2,54],13:[2,54],24:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],30:[2,54],31:[2,54],33:[2,54],36:[2,54],37:[2,54],39:[2,54],64:[1,58],66:[1,57],67:[2,54],68:[2,54],76:[2,54],77:[2,54],78:[2,54],79:[2,54],80:[2,54],81:[2,54]},{5:[2,52],7:[2,52],9:[2,52],12:[2,52],13:[2,52],24:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:[2,52],33:[2,52],36:[2,52],37:[2,52],39:[2,52],62:[1,59],64:[2,52],66:[2,52],67:[2,52],68:[2,52],76:[2,52],77:[2,52],78:[2,52],79:[2,52],80:[2,52],81:[2,52]},{5:[2,50],7:[2,50],9:[2,50],12:[2,50],13:[2,50],24:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:[2,50],33:[2,50],36:[2,50],37:[2,50],39:[2,50],60:[1,60],62:[2,50],64:[2,50],66:[2,50],67:[2,50],68:[2,50],76:[2,50],77:[2,50],78:[2,50],79:[2,50],80:[2,50],81:[2,50]},{5:[2,48],7:[2,48],9:[2,48],12:[2,48],13:[2,48],24:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],31:[2,48],33:[2,48],36:[2,48],37:[2,48],39:[2,48],58:[1,61],60:[2,48],62:[2,48],64:[2,48],66:[2,48],67:[2,48],68:[2,48],76:[2,48],77:[2,48],78:[2,48],79:[2,48],80:[2,48],81:[2,48]},{5:[2,46],7:[2,46],9:[2,46],12:[2,46],13:[2,46],24:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],33:[2,46],36:[2,46],37:[2,46],39:[2,46],56:[1,62],58:[2,46],60:[2,46],62:[2,46],64:[2,46],66:[2,46],67:[2,46],68:[2,46],76:[2,46],77:[2,46],78:[2,46],79:[2,46],80:[2,46],81:[2,46]},{5:[2,44],7:[2,44],9:[2,44],12:[2,44],13:[2,44],24:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],30:[2,44],31:[2,44],33:[2,44],36:[2,44],37:[2,44],39:[2,44],53:[1,63],54:[1,64],56:[2,44],58:[2,44],60:[2,44],62:[2,44],64:[2,44],66:[2,44],67:[2,44],68:[2,44],76:[2,44],77:[2,44],78:[2,44],79:[2,44],80:[2,44],81:[2,44]},{5:[2,41],7:[2,41],9:[2,41],12:[2,41],13:[2,41],24:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],30:[2,41],31:[2,41],33:[2,41],36:[2,41],37:[2,41],39:[2,41],48:[1,65],49:[1,66],50:[1,67],51:[1,68],53:[2,41],54:[2,41],56:[2,41],58:[2,41],60:[2,41],62:[2,41],64:[2,41],66:[2,41],67:[2,41],68:[2,41],76:[2,41],77:[2,41],78:[2,41],79:[2,41],80:[2,41],81:[2,41]},{5:[2,36],7:[2,36],9:[2,36],12:[2,36],13:[2,36],24:[2,36],26:[2,36],27:[2,36],28:[2,36],29:[2,36],30:[2,36],31:[2,36],33:[2,36],36:[2,36],37:[2,36],39:[2,36],45:[1,69],46:[1,70],48:[2,36],49:[2,36],50:[2,36],51:[2,36],53:[2,36],54:[2,36],56:[2,36],58:[2,36],60:[2,36],62:[2,36],64:[2,36],66:[2,36],67:[2,36],68:[2,36],76:[2,36],77:[2,36],78:[2,36],79:[2,36],80:[2,36],81:[2,36]},{5:[2,33],7:[2,33],9:[2,33],12:[2,33],13:[2,33],24:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],33:[2,33],36:[2,33],37:[2,33],39:[2,33],41:[1,71],42:[1,72],43:[1,73],45:[2,33],46:[2,33],48:[2,33],49:[2,33],50:[2,33],51:[2,33],53:[2,33],54:[2,33],56:[2,33],58:[2,33],60:[2,33],62:[2,33],64:[2,33],66:[2,33],67:[2,33],68:[2,33],76:[2,33],77:[2,33],78:[2,33],79:[2,33],80:[2,33],81:[2,33]},{5:[2,29],7:[2,29],9:[2,29],12:[2,29],13:[2,29],24:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],33:[2,29],36:[2,29],37:[2,29],39:[2,29],41:[2,29],42:[2,29],43:[2,29],45:[2,29],46:[2,29],48:[2,29],49:[2,29],50:[2,29],51:[2,29],53:[2,29],54:[2,29],56:[2,29],58:[2,29],60:[2,29],62:[2,29],64:[2,29],66:[2,29],67:[2,29],68:[2,29],76:[2,29],77:[2,29],78:[2,29],79:[2,29],80:[2,29],81:[2,29]},{5:[2,27],7:[2,27],9:[2,27],12:[2,27],13:[2,27],24:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],33:[2,27],36:[2,27],37:[2,27],39:[2,27],41:[2,27],42:[2,27],43:[2,27],45:[2,27],46:[2,27],48:[2,27],49:[2,27],50:[2,27],51:[2,27],53:[2,27],54:[2,27],56:[2,27],58:[2,27],60:[2,27],62:[2,27],64:[2,27],66:[2,27],67:[2,27],68:[2,27],76:[2,27],77:[2,27],78:[2,27],79:[2,27],80:[2,27],81:[2,27]},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:74,36:[1,33]},{5:[2,23],7:[2,23],9:[2,23],12:[2,23],13:[2,23],24:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],33:[2,23],36:[2,23],37:[2,23],39:[2,23],41:[2,23],42:[2,23],43:[2,23],45:[2,23],46:[2,23],48:[2,23],49:[2,23],50:[2,23],51:[2,23],53:[2,23],54:[2,23],56:[2,23],58:[2,23],60:[2,23],62:[2,23],64:[2,23],66:[2,23],67:[2,23],68:[2,23],76:[2,23],77:[2,23],78:[2,23],79:[2,23],80:[2,23],81:[2,23]},{5:[2,25],7:[2,25],9:[2,25],12:[2,25],13:[2,25],24:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],33:[2,25],36:[2,25],37:[2,25],39:[2,25],41:[2,25],42:[2,25],43:[2,25],45:[2,25],46:[2,25],48:[2,25],49:[2,25],50:[2,25],51:[2,25],53:[2,25],54:[2,25],56:[2,25],58:[2,25],60:[2,25],62:[2,25],64:[2,25],66:[2,25],67:[2,25],68:[2,25],76:[2,25],77:[2,25],78:[2,25],79:[2,25],80:[2,25],81:[2,25]},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:75,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18},{5:[2,17],7:[2,17],9:[2,17],12:[2,17],13:[2,17],24:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],33:[2,17],36:[2,17],37:[2,17],39:[2,17],41:[2,17],42:[2,17],43:[2,17],45:[2,17],46:[2,17],48:[2,17],49:[2,17],50:[2,17],51:[2,17],53:[2,17],54:[2,17],56:[2,17],58:[2,17],60:[2,17],62:[2,17],64:[2,17],66:[2,17],67:[2,17],68:[2,17],76:[2,17],77:[2,17],78:[2,17],79:[2,17],80:[2,17],81:[2,17]},{5:[2,18],7:[2,18],9:[2,18],12:[2,18],13:[2,18],24:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],33:[2,18],36:[2,18],37:[2,18],39:[2,18],41:[2,18],42:[2,18],43:[2,18],45:[2,18],46:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],53:[2,18],54:[2,18],56:[2,18],58:[2,18],60:[2,18],62:[2,18],64:[2,18],66:[2,18],67:[2,18],68:[2,18],76:[2,18],77:[2,18],78:[2,18],79:[2,18],80:[2,18],81:[2,18]},{5:[2,19],7:[2,19],9:[2,19],12:[2,19],13:[2,19],24:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],33:[2,19],36:[2,19],37:[2,19],39:[2,19],41:[2,19],42:[2,19],43:[2,19],45:[2,19],46:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],53:[2,19],54:[2,19],56:[2,19],58:[2,19],60:[2,19],62:[2,19],64:[2,19],66:[2,19],67:[2,19],68:[2,19],76:[2,19],77:[2,19],78:[2,19],79:[2,19],80:[2,19],81:[2,19]},{7:[2,72],8:[1,76],9:[2,72],10:77,12:[2,72],13:[2,72],24:[2,72],26:[2,72],27:[2,72],28:[2,72],29:[2,72],30:[2,72],31:[2,72],36:[2,72],39:[2,72]},{5:[2,74],7:[2,74],9:[2,74],12:[2,74],13:[2,74],14:78,24:[2,74],26:[2,74],27:[2,74],28:[2,74],29:[2,74],30:[2,74],31:[2,74],36:[2,74],39:[2,74],81:[2,74]},{16:79,29:[1,34],30:[1,35],31:[1,36]},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:80,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:81,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18},{13:[1,82]},{7:[2,76],13:[2,76],29:[2,76],30:[2,76],31:[2,76],36:[2,76],37:[2,76],39:[2,76],70:83},{6:87,7:[1,37],13:[1,52],17:85,36:[1,86],73:84},{7:[2,65],13:[2,65],36:[2,65]},{7:[2,66],13:[2,66],36:[2,66]},{7:[2,67],13:[2,67],36:[2,67]},{7:[2,68],13:[2,68],36:[2,68]},{7:[2,69],13:[2,69],36:[2,69]},{6:88,7:[1,37],68:[1,54]},{5:[2,24],7:[2,24],9:[2,24],12:[2,24],13:[2,24],24:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[1,41],33:[2,24],34:[1,42],36:[2,24],37:[2,24],39:[2,24],41:[2,24],42:[2,24],43:[2,24],45:[2,24],46:[2,24],48:[2,24],49:[2,24],50:[2,24],51:[2,24],53:[2,24],54:[2,24],56:[2,24],58:[2,24],60:[2,24],62:[2,24],64:[2,24],66:[2,24],67:[2,24],68:[2,24],76:[2,24],77:[2,24],78:[2,24],79:[2,24],80:[2,24],81:[2,24]},{5:[2,20],7:[2,20],9:[2,20],12:[2,20],13:[2,20],24:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],36:[2,20],37:[2,20],39:[2,20],41:[2,20],42:[2,20],43:[2,20],45:[2,20],46:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],53:[2,20],54:[2,20],56:[2,20],58:[2,20],60:[2,20],62:[2,20],64:[2,20],66:[2,20],67:[2,20],68:[2,20],76:[2,20],77:[2,20],78:[2,20],79:[2,20],80:[2,20],81:[2,20]},{6:87,7:[1,37],13:[1,52],17:85,36:[1,86],73:89},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:90},{5:[2,14],7:[2,14],9:[2,14],12:[2,14],13:[2,14],24:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],36:[2,14],39:[2,14],68:[1,54]},{5:[2,15],7:[2,15],9:[2,15],12:[2,15],13:[2,15],24:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],36:[2,15],39:[2,15],68:[1,54]},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:91,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:92},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:93},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:94},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:95},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:96},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:97},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:98},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:99},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:100},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:101},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:102},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:103},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:104},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:105,36:[1,33]},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:106,36:[1,33]},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:107,36:[1,33]},{5:[2,28],7:[2,28],9:[2,28],12:[2,28],13:[2,28],24:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],33:[2,28],36:[2,28],37:[2,28],39:[2,28],41:[2,28],42:[2,28],43:[2,28],45:[2,28],46:[2,28],48:[2,28],49:[2,28],50:[2,28],51:[2,28],53:[2,28],54:[2,28],56:[2,28],58:[2,28],60:[2,28],62:[2,28],64:[2,28],66:[2,28],67:[2,28],68:[2,28],76:[2,28],77:[2,28],78:[2,28],79:[2,28],80:[2,28],81:[2,28]},{37:[1,108],68:[1,54]},{9:[1,109]},{6:32,7:[1,37],9:[1,110],11:111,12:[1,5],13:[1,6],16:31,17:7,19:14,20:8,21:9,22:10,23:11,24:[1,12],26:[1,15],27:[1,16],28:[1,17],29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18,69:13},{5:[2,4],7:[2,4],9:[2,4],12:[2,4],13:[2,4],24:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],36:[2,4],39:[2,4],81:[1,112]},{5:[2,5],7:[2,5],9:[2,5],12:[2,5],13:[2,5],24:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],36:[2,5],39:[2,5]},{5:[2,6],7:[2,6],9:[2,6],12:[2,6],13:[2,6],24:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],36:[2,6],39:[2,6],68:[1,54]},{33:[1,113],68:[1,54]},{5:[2,22],7:[2,22],9:[2,22],12:[2,22],13:[2,22],18:[2,22],24:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],36:[2,22],37:[2,22],39:[2,22],41:[2,22],42:[2,22],43:[2,22],45:[2,22],46:[2,22],48:[2,22],49:[2,22],50:[2,22],51:[2,22],53:[2,22],54:[2,22],56:[2,22],58:[2,22],60:[2,22],62:[2,22],64:[2,22],66:[2,22],67:[2,22],68:[2,22],76:[2,22],77:[2,22],78:[2,22],79:[2,22],80:[2,22],81:[2,22]},{6:32,7:[1,37],13:[1,52],16:31,17:51,19:115,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],37:[2,78],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:18,71:114},{5:[2,61],7:[2,61],9:[2,61],12:[2,61],13:[2,61],24:[2,61],26:[2,61],27:[2,61],28:[2,61],29:[2,61],30:[2,61],31:[2,61],36:[2,61],39:[2,61],76:[2,61],77:[2,61],78:[2,61],79:[2,61],80:[2,61]},{5:[2,62],7:[2,62],9:[2,62],12:[2,62],13:[2,62],24:[2,62],26:[2,62],27:[2,62],28:[2,62],29:[2,62],30:[2,62],31:[2,62],32:[1,41],34:[1,42],36:[2,62],39:[2,62],76:[2,62],77:[2,62],78:[2,62],79:[2,62],80:[2,62]},{13:[2,80],37:[2,80],74:116},{5:[2,64],7:[2,64],9:[2,64],12:[2,64],13:[2,64],24:[2,64],26:[2,64],27:[2,64],28:[2,64],29:[2,64],30:[2,64],31:[2,64],36:[2,64],39:[2,64],76:[2,64],77:[2,64],78:[2,64],79:[2,64],80:[2,64]},{5:[2,11],7:[2,11],9:[2,11],12:[2,11],13:[2,11],24:[2,11],25:[1,117],26:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],36:[2,11],39:[2,11]},{5:[2,60],7:[2,60],9:[2,60],12:[2,60],13:[2,60],24:[2,60],26:[2,60],27:[2,60],28:[2,60],29:[2,60],30:[2,60],31:[2,60],36:[2,60],39:[2,60],76:[2,60],77:[2,60],78:[2,60],79:[2,60],80:[2,60]},{5:[2,57],7:[2,57],9:[2,57],12:[2,57],13:[2,57],24:[2,57],26:[2,57],27:[2,57],28:[2,57],29:[2,57],30:[2,57],31:[2,57],33:[2,57],36:[2,57],37:[2,57],39:[2,57],67:[2,57],68:[2,57],76:[2,57],77:[2,57],78:[2,57],79:[2,57],80:[2,57],81:[2,57]},{67:[1,118],68:[1,54]},{5:[2,53],7:[2,53],9:[2,53],12:[2,53],13:[2,53],24:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],33:[2,53],36:[2,53],37:[2,53],39:[2,53],62:[1,59],64:[2,53],66:[2,53],67:[2,53],68:[2,53],76:[2,53],77:[2,53],78:[2,53],79:[2,53],80:[2,53],81:[2,53]},{5:[2,51],7:[2,51],9:[2,51],12:[2,51],13:[2,51],24:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],33:[2,51],36:[2,51],37:[2,51],39:[2,51],60:[1,60],62:[2,51],64:[2,51],66:[2,51],67:[2,51],68:[2,51],76:[2,51],77:[2,51],78:[2,51],79:[2,51],80:[2,51],81:[2,51]},{5:[2,49],7:[2,49],9:[2,49],12:[2,49],13:[2,49],24:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:[2,49],33:[2,49],36:[2,49],37:[2,49],39:[2,49],58:[1,61],60:[2,49],62:[2,49],64:[2,49],66:[2,49],67:[2,49],68:[2,49],76:[2,49],77:[2,49],78:[2,49],79:[2,49],80:[2,49],81:[2,49]},{5:[2,47],7:[2,47],9:[2,47],12:[2,47],13:[2,47],24:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],30:[2,47],31:[2,47],33:[2,47],36:[2,47],37:[2,47],39:[2,47],56:[1,62],58:[2,47],60:[2,47],62:[2,47],64:[2,47],66:[2,47],67:[2,47],68:[2,47],76:[2,47],77:[2,47],78:[2,47],79:[2,47],80:[2,47],81:[2,47]},{5:[2,45],7:[2,45],9:[2,45],12:[2,45],13:[2,45],24:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:[2,45],33:[2,45],36:[2,45],37:[2,45],39:[2,45],53:[1,63],54:[1,64],56:[2,45],58:[2,45],60:[2,45],62:[2,45],64:[2,45],66:[2,45],67:[2,45],68:[2,45],76:[2,45],77:[2,45],78:[2,45],79:[2,45],80:[2,45],81:[2,45]},{5:[2,42],7:[2,42],9:[2,42],12:[2,42],13:[2,42],24:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],30:[2,42],31:[2,42],33:[2,42],36:[2,42],37:[2,42],39:[2,42],48:[1,65],49:[1,66],50:[1,67],51:[1,68],53:[2,42],54:[2,42],56:[2,42],58:[2,42],60:[2,42],62:[2,42],64:[2,42],66:[2,42],67:[2,42],68:[2,42],76:[2,42],77:[2,42],78:[2,42],79:[2,42],80:[2,42],81:[2,42]},{5:[2,43],7:[2,43],9:[2,43],12:[2,43],13:[2,43],24:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],31:[2,43],33:[2,43],36:[2,43],37:[2,43],39:[2,43],48:[1,65],49:[1,66],50:[1,67],51:[1,68],53:[2,43],54:[2,43],56:[2,43],58:[2,43],60:[2,43],62:[2,43],64:[2,43],66:[2,43],67:[2,43],68:[2,43],76:[2,43],77:[2,43],78:[2,43],79:[2,43],80:[2,43],81:[2,43]},{5:[2,37],7:[2,37],9:[2,37],12:[2,37],13:[2,37],24:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],30:[2,37],31:[2,37],33:[2,37],36:[2,37],37:[2,37],39:[2,37],45:[1,69],46:[1,70],48:[2,37],49:[2,37],50:[2,37],51:[2,37],53:[2,37],54:[2,37],56:[2,37],58:[2,37],60:[2,37],62:[2,37],64:[2,37],66:[2,37],67:[2,37],68:[2,37],76:[2,37],77:[2,37],78:[2,37],79:[2,37],80:[2,37],81:[2,37]},{5:[2,38],7:[2,38],9:[2,38],12:[2,38],13:[2,38],24:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[2,38],30:[2,38],31:[2,38],33:[2,38],36:[2,38],37:[2,38],39:[2,38],45:[1,69],46:[1,70],48:[2,38],49:[2,38],50:[2,38],51:[2,38],53:[2,38],54:[2,38],56:[2,38],58:[2,38],60:[2,38],62:[2,38],64:[2,38],66:[2,38],67:[2,38],68:[2,38],76:[2,38],77:[2,38],78:[2,38],79:[2,38],80:[2,38],81:[2,38]},{5:[2,39],7:[2,39],9:[2,39],12:[2,39],13:[2,39],24:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[2,39],30:[2,39],31:[2,39],33:[2,39],36:[2,39],37:[2,39],39:[2,39],45:[1,69],46:[1,70],48:[2,39],49:[2,39],50:[2,39],51:[2,39],53:[2,39],54:[2,39],56:[2,39],58:[2,39],60:[2,39],62:[2,39],64:[2,39],66:[2,39],67:[2,39],68:[2,39],76:[2,39],77:[2,39],78:[2,39],79:[2,39],80:[2,39],81:[2,39]},{5:[2,40],7:[2,40],9:[2,40],12:[2,40],13:[2,40],24:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],30:[2,40],31:[2,40],33:[2,40],36:[2,40],37:[2,40],39:[2,40],45:[1,69],46:[1,70],48:[2,40],49:[2,40],50:[2,40],51:[2,40],53:[2,40],54:[2,40],56:[2,40],58:[2,40],60:[2,40],62:[2,40],64:[2,40],66:[2,40],67:[2,40],68:[2,40],76:[2,40],77:[2,40],78:[2,40],79:[2,40],80:[2,40],81:[2,40]},{5:[2,34],7:[2,34],9:[2,34],12:[2,34],13:[2,34],24:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],33:[2,34],36:[2,34],37:[2,34],39:[2,34],41:[1,71],42:[1,72],43:[1,73],45:[2,34],46:[2,34],48:[2,34],49:[2,34],50:[2,34],51:[2,34],53:[2,34],54:[2,34],56:[2,34],58:[2,34],60:[2,34],62:[2,34],64:[2,34],66:[2,34],67:[2,34],68:[2,34],76:[2,34],77:[2,34],78:[2,34],79:[2,34],80:[2,34],81:[2,34]},{5:[2,35],7:[2,35],9:[2,35],12:[2,35],13:[2,35],24:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],30:[2,35],31:[2,35],33:[2,35],36:[2,35],37:[2,35],39:[2,35],41:[1,71],42:[1,72],43:[1,73],45:[2,35],46:[2,35],48:[2,35],49:[2,35],50:[2,35],51:[2,35],53:[2,35],54:[2,35],56:[2,35],58:[2,35],60:[2,35],62:[2,35],64:[2,35],66:[2,35],67:[2,35],68:[2,35],76:[2,35],77:[2,35],78:[2,35],79:[2,35],80:[2,35],81:[2,35]},{5:[2,30],7:[2,30],9:[2,30],12:[2,30],13:[2,30],24:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],33:[2,30],36:[2,30],37:[2,30],39:[2,30],41:[2,30],42:[2,30],43:[2,30],45:[2,30],46:[2,30],48:[2,30],49:[2,30],50:[2,30],51:[2,30],53:[2,30],54:[2,30],56:[2,30],58:[2,30],60:[2,30],62:[2,30],64:[2,30],66:[2,30],67:[2,30],68:[2,30],76:[2,30],77:[2,30],78:[2,30],79:[2,30],80:[2,30],81:[2,30]},{5:[2,31],7:[2,31],9:[2,31],12:[2,31],13:[2,31],24:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],33:[2,31],36:[2,31],37:[2,31],39:[2,31],41:[2,31],42:[2,31],43:[2,31],45:[2,31],46:[2,31],48:[2,31],49:[2,31],50:[2,31],51:[2,31],53:[2,31],54:[2,31],56:[2,31],58:[2,31],60:[2,31],62:[2,31],64:[2,31],66:[2,31],67:[2,31],68:[2,31],76:[2,31],77:[2,31],78:[2,31],79:[2,31],80:[2,31],81:[2,31]},{5:[2,32],7:[2,32],9:[2,32],12:[2,32],13:[2,32],24:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],33:[2,32],36:[2,32],37:[2,32],39:[2,32],41:[2,32],42:[2,32],43:[2,32],45:[2,32],46:[2,32],48:[2,32],49:[2,32],50:[2,32],51:[2,32],53:[2,32],54:[2,32],56:[2,32],58:[2,32],60:[2,32],62:[2,32],64:[2,32],66:[2,32],67:[2,32],68:[2,32],76:[2,32],77:[2,32],78:[2,32],79:[2,32],80:[2,32],81:[2,32]},{5:[2,26],7:[2,26],9:[2,26],12:[2,26],13:[2,26],24:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],33:[2,26],36:[2,26],37:[2,26],39:[2,26],41:[2,26],42:[2,26],43:[2,26],45:[2,26],46:[2,26],48:[2,26],49:[2,26],50:[2,26],51:[2,26],53:[2,26],54:[2,26],56:[2,26],58:[2,26],60:[2,26],62:[2,26],64:[2,26],66:[2,26],67:[2,26],68:[2,26],76:[2,26],77:[2,26],78:[2,26],79:[2,26],80:[2,26],81:[2,26]},{5:[2,2],7:[2,2],9:[2,2],12:[2,2],13:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],33:[2,2],36:[2,2],37:[2,2],39:[2,2],41:[2,2],42:[2,2],43:[2,2],45:[2,2],46:[2,2],48:[2,2],49:[2,2],50:[2,2],51:[2,2],53:[2,2],54:[2,2],56:[2,2],58:[2,2],60:[2,2],62:[2,2],64:[2,2],66:[2,2],67:[2,2],68:[2,2],76:[2,2],77:[2,2],78:[2,2],79:[2,2],80:[2,2],81:[2,2]},{5:[2,3],7:[2,3],9:[2,3],12:[2,3],13:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],33:[2,3],36:[2,3],37:[2,3],39:[2,3],41:[2,3],42:[2,3],43:[2,3],45:[2,3],46:[2,3],48:[2,3],49:[2,3],50:[2,3],51:[2,3],53:[2,3],54:[2,3],56:[2,3],58:[2,3],60:[2,3],62:[2,3],64:[2,3],66:[2,3],67:[2,3],68:[2,3],76:[2,3],77:[2,3],78:[2,3],79:[2,3],80:[2,3],81:[2,3]},{7:[2,73],9:[2,73],12:[2,73],13:[2,73],24:[2,73],26:[2,73],27:[2,73],28:[2,73],29:[2,73],30:[2,73],31:[2,73],36:[2,73],39:[2,73]},{13:[1,119]},{5:[2,21],7:[2,21],9:[2,21],12:[2,21],13:[2,21],18:[2,21],24:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],36:[2,21],37:[2,21],39:[2,21],41:[2,21],42:[2,21],43:[2,21],45:[2,21],46:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],53:[2,21],54:[2,21],56:[2,21],58:[2,21],60:[2,21],62:[2,21],64:[2,21],66:[2,21],67:[2,21],68:[2,21],76:[2,21],77:[2,21],78:[2,21],79:[2,21],80:[2,21],81:[2,21]},{37:[1,120]},{37:[2,79],68:[1,54],81:[1,121]},{13:[1,123],37:[2,82],75:122},{6:124,7:[1,37],20:125,24:[1,12]},{6:32,7:[1,37],13:[1,52],16:31,17:51,29:[1,34],30:[1,35],31:[1,36],35:29,36:[1,33],38:28,39:[1,30],40:27,44:26,47:25,52:24,55:23,57:22,59:21,61:20,63:19,65:126},{5:[2,75],7:[2,75],9:[2,75],12:[2,75],13:[2,75],24:[2,75],26:[2,75],27:[2,75],28:[2,75],29:[2,75],30:[2,75],31:[2,75],36:[2,75],39:[2,75],81:[2,75]},{5:[2,58],7:[2,58],9:[2,58],12:[2,58],13:[2,58],24:[2,58],26:[2,58],27:[2,58],28:[2,58],29:[2,58],30:[2,58],31:[2,58],36:[2,58],39:[2,58],76:[2,58],77:[2,58],78:[2,58],79:[2,58],80:[2,58]},{7:[2,77],13:[2,77],29:[2,77],30:[2,77],31:[2,77],36:[2,77],37:[2,77],39:[2,77]},{37:[1,127]},{37:[2,83],81:[1,128]},{5:[2,12],7:[2,12],9:[2,12],12:[2,12],13:[2,12],24:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],36:[2,12],39:[2,12]},{5:[2,13],7:[2,13],9:[2,13],12:[2,13],13:[2,13],24:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],36:[2,13],39:[2,13]},{5:[2,55],7:[2,55],9:[2,55],12:[2,55],13:[2,55],24:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],30:[2,55],31:[2,55],33:[2,55],36:[2,55],37:[2,55],39:[2,55],67:[2,55],68:[2,55],76:[2,55],77:[2,55],78:[2,55],79:[2,55],80:[2,55],81:[2,55]},{6:129,7:[1,37]},{13:[2,81],37:[2,81]},{5:[2,63],7:[2,63],9:[2,63],12:[2,63],13:[2,63],24:[2,63],26:[2,63],27:[2,63],28:[2,63],29:[2,63],30:[2,63],31:[2,63],36:[2,63],39:[2,63],76:[2,63],77:[2,63],78:[2,63],79:[2,63],80:[2,63]}],
defaultActions: {3:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];

    ast = require('../ast');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:this.popState();
break;
case 3:/* skip comment */
break;
case 4:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 5:this.begin("indent");
break;
case 6:/* ignore blank lines */
break;
case 7:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 8:/* ignore all other whitespace */
break;
case 9:return 30
break;
case 10:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 31;
break;
case 11:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 31;
break;
case 12:return 32
break;
case 13:return 33
break;
case 14:return 36
break;
case 15:return 37
break;
case 16:return 81
break;
case 17:return 68
break;
case 18:return 34
break;
case 19:return 53
break;
case 20:return 54
break;
case 21:return 50
break;
case 22:return 51
break;
case 23:return 67
break;
case 24:return 64
break;
case 25:return 62
break;
case 26:return 56
break;
case 27:return 60
break;
case 28:return 58
break;
case 29:return 76
break;
case 30:return 77
break;
case 31:return 79
break;
case 32:return 78
break;
case 33:return 80
break;
case 34:return 48
break;
case 35:return 49
break;
case 36:return 18
break;
case 37:return 45
break;
case 38:return 46
break;
case 39:return 41
break;
case 40:return 42
break;
case 41:return 43
break;
case 42:return 66
break;
case 43:return 39
break;
case 44:return 12
break;
case 45:return 24
break;
case 46:return 25
break;
case 47:return 27
break;
case 48:return 15
break;
case 49:return 29
break;
case 50:return 8   // do we need pass if we have skip?
break;
case 51:return 28
break;
case 52:return 'BREAK'
break;
case 53:return 26
break;
case 54:return 13
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:".*")/,/^(?:'.*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?::)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:>~)/,/^(?:->)/,/^(?:>>)/,/^(?:=>)/,/^(?:>\|)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:#)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:fail\b)/,/^(?:is\b)/,/^(?:true|false\b)/,/^(?:pass\b)/,/^(?:skip\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:[a-zA-Z][a-zA-Z0-9]*)/,/^(?:.)/],
conditions: {"indent":{"rules":[6,7],"inclusive":false},"comment":{"rules":[0,1,2,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}