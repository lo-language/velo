/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_repetition0":4,"EOF":5,"block":6,"BEGIN":7,"PASS":8,"END":9,"block_repetition0":10,"statement":11,"RECEIVE":12,"IDENTIFIER":13,"statement_repetition0":14,"IS":15,"literal":16,"assignment_statement":17,"selection_statement":18,"sequence_statement":19,"result_statement":20,"jump_statement":21,"postfix_expression":22,"assignment_operator":23,"expression":24,"ASSIGN":25,"MUL_ASSIGN":26,"DIV_ASSIGN":27,"MOD_ASSIGN":28,"ADD_ASSIGN":29,"SUB_ASSIGN":30,"IF":31,"ELSE":32,"SKIP":33,"primary_expression":34,"(":35,")":36,"BOOLEAN":37,"NUMBER":38,"STRING_LITERAL":39,"[":40,"]":41,"postfix_expression_repetition0":42,"postfix_expression_option0":43,".":44,"INC_OP":45,"DEC_OP":46,"unary_expression":47,"unary_operator":48,"#":49,"!":50,"multiplicative_expression":51,"*":52,"/":53,"%":54,"additive_expression":55,"+":56,"-":57,"relational_expression":58,"<":59,">":60,"<=":61,">=":62,"equality_expression":63,"==":64,"!=":65,"and_expression":66,"&":67,"exclusive_or_expression":68,"^":69,"inclusive_or_expression":70,"|":71,"logical_and_expression":72,"&&":73,"logical_or_expression":74,"||":75,"conditional_expression":76,"?":77,":":78,"..":79,"connector":80,">~":81,"->":82,"=>":83,">>":84,">|":85,",":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"PASS",9:"END",12:"RECEIVE",13:"IDENTIFIER",15:"IS",19:"sequence_statement",20:"result_statement",25:"ASSIGN",26:"MUL_ASSIGN",27:"DIV_ASSIGN",28:"MOD_ASSIGN",29:"ADD_ASSIGN",30:"SUB_ASSIGN",31:"IF",32:"ELSE",33:"SKIP",35:"(",36:")",37:"BOOLEAN",38:"NUMBER",39:"STRING_LITERAL",40:"[",41:"]",44:".",45:"INC_OP",46:"DEC_OP",49:"#",50:"!",52:"*",53:"/",54:"%",56:"+",57:"-",59:"<",60:">",61:"<=",62:">=",64:"==",65:"!=",67:"&",69:"^",71:"|",73:"&&",75:"||",77:"?",78:":",79:"..",81:">~",82:"->",83:"=>",84:">>",85:">|",86:","},
productions_: [0,[3,2],[6,3],[6,3],[11,3],[11,3],[11,1],[11,1],[11,1],[11,1],[11,1],[17,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[18,3],[18,5],[18,5],[21,1],[34,1],[34,1],[34,1],[34,3],[16,1],[16,1],[16,1],[22,1],[22,4],[22,5],[22,3],[22,2],[22,2],[47,1],[47,2],[47,2],[47,2],[48,1],[48,1],[51,1],[51,3],[51,3],[51,3],[55,1],[55,3],[55,3],[58,1],[58,3],[58,3],[58,3],[58,3],[63,1],[63,3],[63,3],[66,1],[66,3],[68,1],[68,3],[70,1],[70,3],[72,1],[72,3],[74,1],[74,3],[76,1],[76,5],[24,1],[24,3],[80,1],[80,1],[80,1],[80,1],[80,1],[4,0],[4,2],[10,0],[10,2],[14,0],[14,3],[42,0],[42,3],[43,0],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; return this.$; 
break;
case 2:this.$ = [];
break;
case 3:this.$ = $$[$0-1];
break;
case 4:this.$ = new ast.Receive($$[$0] ? $$[$0].concat([$$[$0-1]]): [$$[$0-1]]);
break;
case 5:this.$ = ['define', $$[$0-2], $$[$0]];
break;
case 11:this.$ = new ast.Operator($$[$0-1], $$[$0-2], $$[$0]);
break;
case 12:this.$ = 'assign';
break;
case 18:this.$ = new ast.Selection($$[$0-1], $$[$0]);
break;
case 19:this.$ = new ast.Selection($$[$0-3], $$[$0-2], $$[$0]);
break;
case 20:this.$ = new ast.Selection($$[$0-3], $$[$0-2], $$[$0]);
break;
case 21:this.$ = new ast.Jump($$[$0]);
break;
case 22:this.$ = new ast.Identifier($$[$0], _$[$0]);
break;
case 24:this.$ = new ast.Action($$[$0]);
break;
case 25:this.$ = $$[$0-1];
break;
case 26:this.$ = new ast.Literal($$[$0] === 'true' ? true : false);
break;
case 27:this.$ = new ast.Literal(parseFloat($$[$0]));
break;
case 28:this.$ = new ast.Literal($$[$0]);
break;
case 30:this.$ = new ast.Operator('subscript', $$[$0-3], $$[$0-1]);
break;
case 31:this.$ = new ast.Operator('send', $$[$0-4], $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : $$[$0-2]);
break;
case 32:this.$ = new ast.Operator('access', $$[$0-2], $$[$0]);
break;
case 33:this.$ = new ast.Operator('inc', $$[$0-1]);
break;
case 34:this.$ = new ast.Operator('dec', $$[$0-1]);
break;
case 38:this.$ = new ast.Operator($$[$0-1], $$[$0]);
break;
case 42:this.$ = new ast.Operator('mult', $$[$0-2], $$[$0]);
break;
case 43:this.$ = new ast.Operator('div', $$[$0-2], $$[$0]);
break;
case 44:this.$ = new ast.Operator('mod', $$[$0-2], $$[$0]);
break;
case 46:this.$ = new ast.Operator('add', $$[$0-2], $$[$0]);
break;
case 47:this.$ = new ast.Operator('sub', $$[$0-2], $$[$0]);
break;
case 49:this.$ = new ast.Operator('lt', $$[$0-2], $$[$0]);
break;
case 50:this.$ = new ast.Operator('gt', $$[$0-2], $$[$0]);
break;
case 51:this.$ = new ast.Operator('le', $$[$0-2], $$[$0]);
break;
case 52:this.$ = new ast.Operator('ge', $$[$0-2], $$[$0]);
break;
case 54:this.$ = new ast.Operator('eq', $$[$0-2], $$[$0]);
break;
case 55:this.$ = new ast.Operator('ne', $$[$0-2], $$[$0]);
break;
case 57:this.$ = new ast.Operator('bitwise_and', $$[$0-2], $$[$0]);
break;
case 59:this.$ = new ast.Operator('xor', $$[$0-2], $$[$0]);
break;
case 61:this.$ = new ast.Operator('bitwise_or', $$[$0-2], $$[$0]);
break;
case 63:this.$ = new ast.Operator('and', $$[$0-2], $$[$0]);
break;
case 65:this.$ = new ast.Operator('or', $$[$0-2], $$[$0]);
break;
case 67:this.$ = new ast.Operator('conditional', $$[$0-4], $$[$0-2], $$[$0]);
break;
case 75:this.$ = [];
break;
case 76:$$[$0-1].push($$[$0]);
break;
case 77:this.$ = [];
break;
case 78:$$[$0-1].push($$[$0]);
break;
case 79:this.$ = [];
break;
case 80:$$[$0-2].push($$[$0-1]);
break;
case 81:this.$ = [];
break;
case 82:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,75],7:[2,75],12:[2,75],13:[2,75],19:[2,75],20:[2,75],31:[2,75],33:[2,75],35:[2,75],37:[2,75],38:[2,75],39:[2,75]},{1:[3]},{5:[1,3],6:17,7:[1,22],11:4,12:[1,5],13:[1,6],16:16,17:7,18:8,19:[1,9],20:[1,10],21:11,22:12,31:[1,13],33:[1,14],34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21]},{1:[2,1]},{5:[2,76],7:[2,76],12:[2,76],13:[2,76],19:[2,76],20:[2,76],31:[2,76],33:[2,76],35:[2,76],37:[2,76],38:[2,76],39:[2,76]},{13:[1,23]},{15:[1,24],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],35:[2,22],40:[2,22],44:[2,22],45:[2,22],46:[2,22]},{5:[2,6],7:[2,6],9:[2,6],12:[2,6],13:[2,6],19:[2,6],20:[2,6],31:[2,6],33:[2,6],35:[2,6],37:[2,6],38:[2,6],39:[2,6]},{5:[2,7],7:[2,7],9:[2,7],12:[2,7],13:[2,7],19:[2,7],20:[2,7],31:[2,7],33:[2,7],35:[2,7],37:[2,7],38:[2,7],39:[2,7]},{5:[2,8],7:[2,8],9:[2,8],12:[2,8],13:[2,8],19:[2,8],20:[2,8],31:[2,8],33:[2,8],35:[2,8],37:[2,8],38:[2,8],39:[2,8]},{5:[2,9],7:[2,9],9:[2,9],12:[2,9],13:[2,9],19:[2,9],20:[2,9],31:[2,9],33:[2,9],35:[2,9],37:[2,9],38:[2,9],39:[2,9]},{5:[2,10],7:[2,10],9:[2,10],12:[2,10],13:[2,10],19:[2,10],20:[2,10],31:[2,10],33:[2,10],35:[2,10],37:[2,10],38:[2,10],39:[2,10]},{23:25,25:[1,31],26:[1,32],27:[1,33],28:[1,34],29:[1,35],30:[1,36],35:[1,27],40:[1,26],44:[1,28],45:[1,29],46:[1,30]},{6:17,7:[1,22],13:[1,55],16:16,22:49,24:37,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:38},{5:[2,21],7:[2,21],9:[2,21],12:[2,21],13:[2,21],19:[2,21],20:[2,21],31:[2,21],33:[2,21],35:[2,21],37:[2,21],38:[2,21],39:[2,21]},{5:[2,29],7:[2,29],9:[2,29],12:[2,29],13:[2,29],19:[2,29],20:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],33:[2,29],35:[2,29],36:[2,29],37:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],44:[2,29],45:[2,29],46:[2,29],52:[2,29],53:[2,29],54:[2,29],56:[2,29],57:[2,29],59:[2,29],60:[2,29],61:[2,29],62:[2,29],64:[2,29],65:[2,29],67:[2,29],69:[2,29],71:[2,29],73:[2,29],75:[2,29],77:[2,29],78:[2,29],79:[2,29],86:[2,29]},{5:[2,23],7:[2,23],9:[2,23],12:[2,23],13:[2,23],19:[2,23],20:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],33:[2,23],35:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],41:[2,23],44:[2,23],45:[2,23],46:[2,23],52:[2,23],53:[2,23],54:[2,23],56:[2,23],57:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],64:[2,23],65:[2,23],67:[2,23],69:[2,23],71:[2,23],73:[2,23],75:[2,23],77:[2,23],78:[2,23],79:[2,23],86:[2,23]},{5:[2,24],7:[2,24],9:[2,24],12:[2,24],13:[2,24],19:[2,24],20:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],33:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],44:[2,24],45:[2,24],46:[2,24],52:[2,24],53:[2,24],54:[2,24],56:[2,24],57:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],64:[2,24],65:[2,24],67:[2,24],69:[2,24],71:[2,24],73:[2,24],75:[2,24],77:[2,24],78:[2,24],79:[2,24],86:[2,24]},{6:17,7:[1,22],13:[1,55],16:16,22:49,24:56,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:38},{5:[2,26],7:[2,26],9:[2,26],12:[2,26],13:[2,26],19:[2,26],20:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],33:[2,26],35:[2,26],36:[2,26],37:[2,26],38:[2,26],39:[2,26],40:[2,26],41:[2,26],44:[2,26],45:[2,26],46:[2,26],52:[2,26],53:[2,26],54:[2,26],56:[2,26],57:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],64:[2,26],65:[2,26],67:[2,26],69:[2,26],71:[2,26],73:[2,26],75:[2,26],77:[2,26],78:[2,26],79:[2,26],86:[2,26]},{5:[2,27],7:[2,27],9:[2,27],12:[2,27],13:[2,27],19:[2,27],20:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],33:[2,27],35:[2,27],36:[2,27],37:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],44:[2,27],45:[2,27],46:[2,27],52:[2,27],53:[2,27],54:[2,27],56:[2,27],57:[2,27],59:[2,27],60:[2,27],61:[2,27],62:[2,27],64:[2,27],65:[2,27],67:[2,27],69:[2,27],71:[2,27],73:[2,27],75:[2,27],77:[2,27],78:[2,27],79:[2,27],86:[2,27]},{5:[2,28],7:[2,28],9:[2,28],12:[2,28],13:[2,28],19:[2,28],20:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],33:[2,28],35:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[2,28],40:[2,28],41:[2,28],44:[2,28],45:[2,28],46:[2,28],52:[2,28],53:[2,28],54:[2,28],56:[2,28],57:[2,28],59:[2,28],60:[2,28],61:[2,28],62:[2,28],64:[2,28],65:[2,28],67:[2,28],69:[2,28],71:[2,28],73:[2,28],75:[2,28],77:[2,28],78:[2,28],79:[2,28],86:[2,28]},{7:[2,77],8:[1,57],9:[2,77],10:58,12:[2,77],13:[2,77],19:[2,77],20:[2,77],31:[2,77],33:[2,77],35:[2,77],37:[2,77],38:[2,77],39:[2,77]},{5:[2,79],7:[2,79],9:[2,79],12:[2,79],13:[2,79],14:59,19:[2,79],20:[2,79],31:[2,79],33:[2,79],35:[2,79],37:[2,79],38:[2,79],39:[2,79],86:[2,79]},{16:60,37:[1,19],38:[1,20],39:[1,21]},{6:17,7:[1,22],13:[1,55],16:16,22:49,24:61,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:38},{6:17,7:[1,22],13:[1,55],16:16,22:49,24:62,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:38},{7:[2,81],13:[2,81],35:[2,81],36:[2,81],37:[2,81],38:[2,81],39:[2,81],42:63,45:[2,81],46:[2,81],49:[2,81],50:[2,81]},{13:[1,64]},{5:[2,33],7:[2,33],9:[2,33],12:[2,33],13:[2,33],19:[2,33],20:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],33:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[2,33],40:[2,33],41:[2,33],44:[2,33],45:[2,33],46:[2,33],52:[2,33],53:[2,33],54:[2,33],56:[2,33],57:[2,33],59:[2,33],60:[2,33],61:[2,33],62:[2,33],64:[2,33],65:[2,33],67:[2,33],69:[2,33],71:[2,33],73:[2,33],75:[2,33],77:[2,33],78:[2,33],79:[2,33],86:[2,33]},{5:[2,34],7:[2,34],9:[2,34],12:[2,34],13:[2,34],19:[2,34],20:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],33:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],44:[2,34],45:[2,34],46:[2,34],52:[2,34],53:[2,34],54:[2,34],56:[2,34],57:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],64:[2,34],65:[2,34],67:[2,34],69:[2,34],71:[2,34],73:[2,34],75:[2,34],77:[2,34],78:[2,34],79:[2,34],86:[2,34]},{7:[2,12],13:[2,12],35:[2,12],37:[2,12],38:[2,12],39:[2,12],45:[2,12],46:[2,12],49:[2,12],50:[2,12]},{7:[2,13],13:[2,13],35:[2,13],37:[2,13],38:[2,13],39:[2,13],45:[2,13],46:[2,13],49:[2,13],50:[2,13]},{7:[2,14],13:[2,14],35:[2,14],37:[2,14],38:[2,14],39:[2,14],45:[2,14],46:[2,14],49:[2,14],50:[2,14]},{7:[2,15],13:[2,15],35:[2,15],37:[2,15],38:[2,15],39:[2,15],45:[2,15],46:[2,15],49:[2,15],50:[2,15]},{7:[2,16],13:[2,16],35:[2,16],37:[2,16],38:[2,16],39:[2,16],45:[2,16],46:[2,16],49:[2,16],50:[2,16]},{7:[2,17],13:[2,17],35:[2,17],37:[2,17],38:[2,17],39:[2,17],45:[2,17],46:[2,17],49:[2,17],50:[2,17]},{6:65,7:[1,22],79:[1,66]},{5:[2,68],7:[2,68],9:[2,68],12:[2,68],13:[2,68],19:[2,68],20:[2,68],31:[2,68],33:[2,68],35:[2,68],36:[2,68],37:[2,68],38:[2,68],39:[2,68],41:[2,68],78:[2,68],79:[2,68],86:[2,68]},{5:[2,66],7:[2,66],9:[2,66],12:[2,66],13:[2,66],19:[2,66],20:[2,66],31:[2,66],33:[2,66],35:[2,66],36:[2,66],37:[2,66],38:[2,66],39:[2,66],41:[2,66],75:[1,68],77:[1,67],78:[2,66],79:[2,66],86:[2,66]},{5:[2,64],7:[2,64],9:[2,64],12:[2,64],13:[2,64],19:[2,64],20:[2,64],31:[2,64],33:[2,64],35:[2,64],36:[2,64],37:[2,64],38:[2,64],39:[2,64],41:[2,64],73:[1,69],75:[2,64],77:[2,64],78:[2,64],79:[2,64],86:[2,64]},{5:[2,62],7:[2,62],9:[2,62],12:[2,62],13:[2,62],19:[2,62],20:[2,62],31:[2,62],33:[2,62],35:[2,62],36:[2,62],37:[2,62],38:[2,62],39:[2,62],41:[2,62],71:[1,70],73:[2,62],75:[2,62],77:[2,62],78:[2,62],79:[2,62],86:[2,62]},{5:[2,60],7:[2,60],9:[2,60],12:[2,60],13:[2,60],19:[2,60],20:[2,60],31:[2,60],33:[2,60],35:[2,60],36:[2,60],37:[2,60],38:[2,60],39:[2,60],41:[2,60],69:[1,71],71:[2,60],73:[2,60],75:[2,60],77:[2,60],78:[2,60],79:[2,60],86:[2,60]},{5:[2,58],7:[2,58],9:[2,58],12:[2,58],13:[2,58],19:[2,58],20:[2,58],31:[2,58],33:[2,58],35:[2,58],36:[2,58],37:[2,58],38:[2,58],39:[2,58],41:[2,58],67:[1,72],69:[2,58],71:[2,58],73:[2,58],75:[2,58],77:[2,58],78:[2,58],79:[2,58],86:[2,58]},{5:[2,56],7:[2,56],9:[2,56],12:[2,56],13:[2,56],19:[2,56],20:[2,56],31:[2,56],33:[2,56],35:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],41:[2,56],64:[1,73],65:[1,74],67:[2,56],69:[2,56],71:[2,56],73:[2,56],75:[2,56],77:[2,56],78:[2,56],79:[2,56],86:[2,56]},{5:[2,53],7:[2,53],9:[2,53],12:[2,53],13:[2,53],19:[2,53],20:[2,53],31:[2,53],33:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],41:[2,53],59:[1,75],60:[1,76],61:[1,77],62:[1,78],64:[2,53],65:[2,53],67:[2,53],69:[2,53],71:[2,53],73:[2,53],75:[2,53],77:[2,53],78:[2,53],79:[2,53],86:[2,53]},{5:[2,48],7:[2,48],9:[2,48],12:[2,48],13:[2,48],19:[2,48],20:[2,48],31:[2,48],33:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],41:[2,48],56:[1,79],57:[1,80],59:[2,48],60:[2,48],61:[2,48],62:[2,48],64:[2,48],65:[2,48],67:[2,48],69:[2,48],71:[2,48],73:[2,48],75:[2,48],77:[2,48],78:[2,48],79:[2,48],86:[2,48]},{5:[2,45],7:[2,45],9:[2,45],12:[2,45],13:[2,45],19:[2,45],20:[2,45],31:[2,45],33:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],41:[2,45],52:[1,81],53:[1,82],54:[1,83],56:[2,45],57:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],64:[2,45],65:[2,45],67:[2,45],69:[2,45],71:[2,45],73:[2,45],75:[2,45],77:[2,45],78:[2,45],79:[2,45],86:[2,45]},{5:[2,41],7:[2,41],9:[2,41],12:[2,41],13:[2,41],19:[2,41],20:[2,41],31:[2,41],33:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],41:[2,41],52:[2,41],53:[2,41],54:[2,41],56:[2,41],57:[2,41],59:[2,41],60:[2,41],61:[2,41],62:[2,41],64:[2,41],65:[2,41],67:[2,41],69:[2,41],71:[2,41],73:[2,41],75:[2,41],77:[2,41],78:[2,41],79:[2,41],86:[2,41]},{5:[2,35],7:[2,35],9:[2,35],12:[2,35],13:[2,35],19:[2,35],20:[2,35],31:[2,35],33:[2,35],35:[1,27],36:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[1,26],41:[2,35],44:[1,28],45:[1,29],46:[1,30],52:[2,35],53:[2,35],54:[2,35],56:[2,35],57:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],64:[2,35],65:[2,35],67:[2,35],69:[2,35],71:[2,35],73:[2,35],75:[2,35],77:[2,35],78:[2,35],79:[2,35],86:[2,35]},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:84,48:52,49:[1,53],50:[1,54]},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:85,48:52,49:[1,53],50:[1,54]},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:86,48:52,49:[1,53],50:[1,54]},{7:[2,39],13:[2,39],35:[2,39],37:[2,39],38:[2,39],39:[2,39],45:[2,39],46:[2,39],49:[2,39],50:[2,39]},{7:[2,40],13:[2,40],35:[2,40],37:[2,40],38:[2,40],39:[2,40],45:[2,40],46:[2,40],49:[2,40],50:[2,40]},{5:[2,22],7:[2,22],9:[2,22],12:[2,22],13:[2,22],19:[2,22],20:[2,22],31:[2,22],33:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],44:[2,22],45:[2,22],46:[2,22],52:[2,22],53:[2,22],54:[2,22],56:[2,22],57:[2,22],59:[2,22],60:[2,22],61:[2,22],62:[2,22],64:[2,22],65:[2,22],67:[2,22],69:[2,22],71:[2,22],73:[2,22],75:[2,22],77:[2,22],78:[2,22],79:[2,22],86:[2,22]},{36:[1,87],79:[1,66]},{9:[1,88]},{6:17,7:[1,22],9:[1,89],11:90,12:[1,5],13:[1,6],16:16,17:7,18:8,19:[1,9],20:[1,10],21:11,22:12,31:[1,13],33:[1,14],34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21]},{5:[2,4],7:[2,4],9:[2,4],12:[2,4],13:[2,4],19:[2,4],20:[2,4],31:[2,4],33:[2,4],35:[2,4],37:[2,4],38:[2,4],39:[2,4],86:[1,91]},{5:[2,5],7:[2,5],9:[2,5],12:[2,5],13:[2,5],19:[2,5],20:[2,5],31:[2,5],33:[2,5],35:[2,5],37:[2,5],38:[2,5],39:[2,5]},{5:[2,11],7:[2,11],9:[2,11],12:[2,11],13:[2,11],19:[2,11],20:[2,11],31:[2,11],33:[2,11],35:[2,11],37:[2,11],38:[2,11],39:[2,11],79:[1,66]},{41:[1,92],79:[1,66]},{6:17,7:[1,22],13:[1,55],16:16,22:49,24:94,34:15,35:[1,18],36:[2,83],37:[1,19],38:[1,20],39:[1,21],43:93,45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:38},{5:[2,32],7:[2,32],9:[2,32],12:[2,32],13:[2,32],19:[2,32],20:[2,32],25:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],33:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[2,32],41:[2,32],44:[2,32],45:[2,32],46:[2,32],52:[2,32],53:[2,32],54:[2,32],56:[2,32],57:[2,32],59:[2,32],60:[2,32],61:[2,32],62:[2,32],64:[2,32],65:[2,32],67:[2,32],69:[2,32],71:[2,32],73:[2,32],75:[2,32],77:[2,32],78:[2,32],79:[2,32],86:[2,32]},{5:[2,18],7:[2,18],9:[2,18],12:[2,18],13:[2,18],19:[2,18],20:[2,18],31:[2,18],32:[1,95],33:[2,18],35:[2,18],37:[2,18],38:[2,18],39:[2,18]},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:96},{6:17,7:[1,22],13:[1,55],16:16,22:49,24:97,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:38},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:98},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:99},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:100},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:101},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:102},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:103},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:104},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:105},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:106},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:107},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:108},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:109},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:110},{6:17,7:[1,22],13:[1,55],16:16,34:111,35:[1,18],37:[1,19],38:[1,20],39:[1,21]},{6:17,7:[1,22],13:[1,55],16:16,34:112,35:[1,18],37:[1,19],38:[1,20],39:[1,21]},{6:17,7:[1,22],13:[1,55],16:16,34:113,35:[1,18],37:[1,19],38:[1,20],39:[1,21]},{5:[2,36],7:[2,36],9:[2,36],12:[2,36],13:[2,36],19:[2,36],20:[2,36],31:[2,36],33:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],41:[2,36],52:[2,36],53:[2,36],54:[2,36],56:[2,36],57:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],64:[2,36],65:[2,36],67:[2,36],69:[2,36],71:[2,36],73:[2,36],75:[2,36],77:[2,36],78:[2,36],79:[2,36],86:[2,36]},{5:[2,37],7:[2,37],9:[2,37],12:[2,37],13:[2,37],19:[2,37],20:[2,37],31:[2,37],33:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],41:[2,37],52:[2,37],53:[2,37],54:[2,37],56:[2,37],57:[2,37],59:[2,37],60:[2,37],61:[2,37],62:[2,37],64:[2,37],65:[2,37],67:[2,37],69:[2,37],71:[2,37],73:[2,37],75:[2,37],77:[2,37],78:[2,37],79:[2,37],86:[2,37]},{5:[2,38],7:[2,38],9:[2,38],12:[2,38],13:[2,38],19:[2,38],20:[2,38],31:[2,38],33:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],41:[2,38],52:[2,38],53:[2,38],54:[2,38],56:[2,38],57:[2,38],59:[2,38],60:[2,38],61:[2,38],62:[2,38],64:[2,38],65:[2,38],67:[2,38],69:[2,38],71:[2,38],73:[2,38],75:[2,38],77:[2,38],78:[2,38],79:[2,38],86:[2,38]},{5:[2,25],7:[2,25],9:[2,25],12:[2,25],13:[2,25],19:[2,25],20:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],33:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],44:[2,25],45:[2,25],46:[2,25],52:[2,25],53:[2,25],54:[2,25],56:[2,25],57:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],64:[2,25],65:[2,25],67:[2,25],69:[2,25],71:[2,25],73:[2,25],75:[2,25],77:[2,25],78:[2,25],79:[2,25],86:[2,25]},{5:[2,2],7:[2,2],9:[2,2],12:[2,2],13:[2,2],19:[2,2],20:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],40:[2,2],41:[2,2],44:[2,2],45:[2,2],46:[2,2],52:[2,2],53:[2,2],54:[2,2],56:[2,2],57:[2,2],59:[2,2],60:[2,2],61:[2,2],62:[2,2],64:[2,2],65:[2,2],67:[2,2],69:[2,2],71:[2,2],73:[2,2],75:[2,2],77:[2,2],78:[2,2],79:[2,2],86:[2,2]},{5:[2,3],7:[2,3],9:[2,3],12:[2,3],13:[2,3],19:[2,3],20:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],32:[2,3],33:[2,3],35:[2,3],36:[2,3],37:[2,3],38:[2,3],39:[2,3],40:[2,3],41:[2,3],44:[2,3],45:[2,3],46:[2,3],52:[2,3],53:[2,3],54:[2,3],56:[2,3],57:[2,3],59:[2,3],60:[2,3],61:[2,3],62:[2,3],64:[2,3],65:[2,3],67:[2,3],69:[2,3],71:[2,3],73:[2,3],75:[2,3],77:[2,3],78:[2,3],79:[2,3],86:[2,3]},{7:[2,78],9:[2,78],12:[2,78],13:[2,78],19:[2,78],20:[2,78],31:[2,78],33:[2,78],35:[2,78],37:[2,78],38:[2,78],39:[2,78]},{13:[1,114]},{5:[2,30],7:[2,30],9:[2,30],12:[2,30],13:[2,30],19:[2,30],20:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],33:[2,30],35:[2,30],36:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],44:[2,30],45:[2,30],46:[2,30],52:[2,30],53:[2,30],54:[2,30],56:[2,30],57:[2,30],59:[2,30],60:[2,30],61:[2,30],62:[2,30],64:[2,30],65:[2,30],67:[2,30],69:[2,30],71:[2,30],73:[2,30],75:[2,30],77:[2,30],78:[2,30],79:[2,30],86:[2,30]},{36:[1,115]},{36:[2,84],79:[1,66],86:[1,116]},{6:117,7:[1,22],18:118,31:[1,13]},{5:[2,69],7:[2,69],9:[2,69],12:[2,69],13:[2,69],19:[2,69],20:[2,69],31:[2,69],33:[2,69],35:[2,69],36:[2,69],37:[2,69],38:[2,69],39:[2,69],41:[2,69],78:[2,69],79:[2,69],86:[2,69]},{78:[1,119],79:[1,66]},{5:[2,65],7:[2,65],9:[2,65],12:[2,65],13:[2,65],19:[2,65],20:[2,65],31:[2,65],33:[2,65],35:[2,65],36:[2,65],37:[2,65],38:[2,65],39:[2,65],41:[2,65],73:[1,69],75:[2,65],77:[2,65],78:[2,65],79:[2,65],86:[2,65]},{5:[2,63],7:[2,63],9:[2,63],12:[2,63],13:[2,63],19:[2,63],20:[2,63],31:[2,63],33:[2,63],35:[2,63],36:[2,63],37:[2,63],38:[2,63],39:[2,63],41:[2,63],71:[1,70],73:[2,63],75:[2,63],77:[2,63],78:[2,63],79:[2,63],86:[2,63]},{5:[2,61],7:[2,61],9:[2,61],12:[2,61],13:[2,61],19:[2,61],20:[2,61],31:[2,61],33:[2,61],35:[2,61],36:[2,61],37:[2,61],38:[2,61],39:[2,61],41:[2,61],69:[1,71],71:[2,61],73:[2,61],75:[2,61],77:[2,61],78:[2,61],79:[2,61],86:[2,61]},{5:[2,59],7:[2,59],9:[2,59],12:[2,59],13:[2,59],19:[2,59],20:[2,59],31:[2,59],33:[2,59],35:[2,59],36:[2,59],37:[2,59],38:[2,59],39:[2,59],41:[2,59],67:[1,72],69:[2,59],71:[2,59],73:[2,59],75:[2,59],77:[2,59],78:[2,59],79:[2,59],86:[2,59]},{5:[2,57],7:[2,57],9:[2,57],12:[2,57],13:[2,57],19:[2,57],20:[2,57],31:[2,57],33:[2,57],35:[2,57],36:[2,57],37:[2,57],38:[2,57],39:[2,57],41:[2,57],64:[1,73],65:[1,74],67:[2,57],69:[2,57],71:[2,57],73:[2,57],75:[2,57],77:[2,57],78:[2,57],79:[2,57],86:[2,57]},{5:[2,54],7:[2,54],9:[2,54],12:[2,54],13:[2,54],19:[2,54],20:[2,54],31:[2,54],33:[2,54],35:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],41:[2,54],59:[1,75],60:[1,76],61:[1,77],62:[1,78],64:[2,54],65:[2,54],67:[2,54],69:[2,54],71:[2,54],73:[2,54],75:[2,54],77:[2,54],78:[2,54],79:[2,54],86:[2,54]},{5:[2,55],7:[2,55],9:[2,55],12:[2,55],13:[2,55],19:[2,55],20:[2,55],31:[2,55],33:[2,55],35:[2,55],36:[2,55],37:[2,55],38:[2,55],39:[2,55],41:[2,55],59:[1,75],60:[1,76],61:[1,77],62:[1,78],64:[2,55],65:[2,55],67:[2,55],69:[2,55],71:[2,55],73:[2,55],75:[2,55],77:[2,55],78:[2,55],79:[2,55],86:[2,55]},{5:[2,49],7:[2,49],9:[2,49],12:[2,49],13:[2,49],19:[2,49],20:[2,49],31:[2,49],33:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],41:[2,49],56:[1,79],57:[1,80],59:[2,49],60:[2,49],61:[2,49],62:[2,49],64:[2,49],65:[2,49],67:[2,49],69:[2,49],71:[2,49],73:[2,49],75:[2,49],77:[2,49],78:[2,49],79:[2,49],86:[2,49]},{5:[2,50],7:[2,50],9:[2,50],12:[2,50],13:[2,50],19:[2,50],20:[2,50],31:[2,50],33:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],41:[2,50],56:[1,79],57:[1,80],59:[2,50],60:[2,50],61:[2,50],62:[2,50],64:[2,50],65:[2,50],67:[2,50],69:[2,50],71:[2,50],73:[2,50],75:[2,50],77:[2,50],78:[2,50],79:[2,50],86:[2,50]},{5:[2,51],7:[2,51],9:[2,51],12:[2,51],13:[2,51],19:[2,51],20:[2,51],31:[2,51],33:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],41:[2,51],56:[1,79],57:[1,80],59:[2,51],60:[2,51],61:[2,51],62:[2,51],64:[2,51],65:[2,51],67:[2,51],69:[2,51],71:[2,51],73:[2,51],75:[2,51],77:[2,51],78:[2,51],79:[2,51],86:[2,51]},{5:[2,52],7:[2,52],9:[2,52],12:[2,52],13:[2,52],19:[2,52],20:[2,52],31:[2,52],33:[2,52],35:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],41:[2,52],56:[1,79],57:[1,80],59:[2,52],60:[2,52],61:[2,52],62:[2,52],64:[2,52],65:[2,52],67:[2,52],69:[2,52],71:[2,52],73:[2,52],75:[2,52],77:[2,52],78:[2,52],79:[2,52],86:[2,52]},{5:[2,46],7:[2,46],9:[2,46],12:[2,46],13:[2,46],19:[2,46],20:[2,46],31:[2,46],33:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],41:[2,46],52:[1,81],53:[1,82],54:[1,83],56:[2,46],57:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],64:[2,46],65:[2,46],67:[2,46],69:[2,46],71:[2,46],73:[2,46],75:[2,46],77:[2,46],78:[2,46],79:[2,46],86:[2,46]},{5:[2,47],7:[2,47],9:[2,47],12:[2,47],13:[2,47],19:[2,47],20:[2,47],31:[2,47],33:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],41:[2,47],52:[1,81],53:[1,82],54:[1,83],56:[2,47],57:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],64:[2,47],65:[2,47],67:[2,47],69:[2,47],71:[2,47],73:[2,47],75:[2,47],77:[2,47],78:[2,47],79:[2,47],86:[2,47]},{5:[2,42],7:[2,42],9:[2,42],12:[2,42],13:[2,42],19:[2,42],20:[2,42],31:[2,42],33:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],41:[2,42],52:[2,42],53:[2,42],54:[2,42],56:[2,42],57:[2,42],59:[2,42],60:[2,42],61:[2,42],62:[2,42],64:[2,42],65:[2,42],67:[2,42],69:[2,42],71:[2,42],73:[2,42],75:[2,42],77:[2,42],78:[2,42],79:[2,42],86:[2,42]},{5:[2,43],7:[2,43],9:[2,43],12:[2,43],13:[2,43],19:[2,43],20:[2,43],31:[2,43],33:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],41:[2,43],52:[2,43],53:[2,43],54:[2,43],56:[2,43],57:[2,43],59:[2,43],60:[2,43],61:[2,43],62:[2,43],64:[2,43],65:[2,43],67:[2,43],69:[2,43],71:[2,43],73:[2,43],75:[2,43],77:[2,43],78:[2,43],79:[2,43],86:[2,43]},{5:[2,44],7:[2,44],9:[2,44],12:[2,44],13:[2,44],19:[2,44],20:[2,44],31:[2,44],33:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],41:[2,44],52:[2,44],53:[2,44],54:[2,44],56:[2,44],57:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],64:[2,44],65:[2,44],67:[2,44],69:[2,44],71:[2,44],73:[2,44],75:[2,44],77:[2,44],78:[2,44],79:[2,44],86:[2,44]},{5:[2,80],7:[2,80],9:[2,80],12:[2,80],13:[2,80],19:[2,80],20:[2,80],31:[2,80],33:[2,80],35:[2,80],37:[2,80],38:[2,80],39:[2,80],86:[2,80]},{5:[2,31],7:[2,31],9:[2,31],12:[2,31],13:[2,31],19:[2,31],20:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],33:[2,31],35:[2,31],36:[2,31],37:[2,31],38:[2,31],39:[2,31],40:[2,31],41:[2,31],44:[2,31],45:[2,31],46:[2,31],52:[2,31],53:[2,31],54:[2,31],56:[2,31],57:[2,31],59:[2,31],60:[2,31],61:[2,31],62:[2,31],64:[2,31],65:[2,31],67:[2,31],69:[2,31],71:[2,31],73:[2,31],75:[2,31],77:[2,31],78:[2,31],79:[2,31],86:[2,31]},{7:[2,82],13:[2,82],35:[2,82],36:[2,82],37:[2,82],38:[2,82],39:[2,82],45:[2,82],46:[2,82],49:[2,82],50:[2,82]},{5:[2,19],7:[2,19],9:[2,19],12:[2,19],13:[2,19],19:[2,19],20:[2,19],31:[2,19],33:[2,19],35:[2,19],37:[2,19],38:[2,19],39:[2,19]},{5:[2,20],7:[2,20],9:[2,20],12:[2,20],13:[2,20],19:[2,20],20:[2,20],31:[2,20],33:[2,20],35:[2,20],37:[2,20],38:[2,20],39:[2,20]},{6:17,7:[1,22],13:[1,55],16:16,22:49,34:15,35:[1,18],37:[1,19],38:[1,20],39:[1,21],45:[1,50],46:[1,51],47:48,48:52,49:[1,53],50:[1,54],51:47,55:46,58:45,63:44,66:43,68:42,70:41,72:40,74:39,76:120},{5:[2,67],7:[2,67],9:[2,67],12:[2,67],13:[2,67],19:[2,67],20:[2,67],31:[2,67],33:[2,67],35:[2,67],36:[2,67],37:[2,67],38:[2,67],39:[2,67],41:[2,67],78:[2,67],79:[2,67],86:[2,67]}],
defaultActions: {3:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];

    ast = require('../ast');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:this.popState();
break;
case 3:/* skip comment */
break;
case 4:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 5:this.begin("indent");
break;
case 6:/* ignore blank lines */
break;
case 7:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 8:/* ignore all other whitespace */
break;
case 9:return 38
break;
case 10:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 39;
break;
case 11:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 39;
break;
case 12:return 40
break;
case 13:return 41
break;
case 14:return 35
break;
case 15:return 36
break;
case 16:return 86
break;
case 17:return 79
break;
case 18:return 44
break;
case 19:return 64
break;
case 20:return 65
break;
case 21:return 61
break;
case 22:return 62
break;
case 23:return 78
break;
case 24:return 75
break;
case 25:return 73
break;
case 26:return 67
break;
case 27:return 71
break;
case 28:return 69
break;
case 29:return 81
break;
case 30:return 82
break;
case 31:return 84
break;
case 32:return 83
break;
case 33:return 85
break;
case 34:return 59
break;
case 35:return 60
break;
case 36:return 25
break;
case 37:return 56
break;
case 38:return 57
break;
case 39:return 45
break;
case 40:return 46
break;
case 41:return 52
break;
case 42:return 53
break;
case 43:return 54
break;
case 44:return 77
break;
case 45:return 49
break;
case 46:return 12
break;
case 47:return 31
break;
case 48:return 32
break;
case 49:return 'FAIL'
break;
case 50:return 15
break;
case 51:return 37
break;
case 52:return 8   // do we need pass if we have skip?
break;
case 53:return 33
break;
case 54:return 'BREAK'
break;
case 55:return 'REPLY' // since return is either intransitive verb (which doesn't make sense for us) or giving back something (doesn't make sense either)
break;
case 56:return 13
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:".*")/,/^(?:'.*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?::)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:>~)/,/^(?:->)/,/^(?:>>)/,/^(?:=>)/,/^(?:>\|)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:#)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:fail\b)/,/^(?:is\b)/,/^(?:true|false\b)/,/^(?:pass\b)/,/^(?:skip\b)/,/^(?:break\b)/,/^(?:reply\b)/,/^(?:([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[6,7],"inclusive":false},"comment":{"rules":[0,1,2,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}