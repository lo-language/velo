/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"block":6,"BEGIN":7,"block_repetition0":8,"END":9,"statement":10,"RECEIVE":11,"statement_repetition0":12,"ID":13,";":14,"expr":15,"termination":16,"assignment":17,"conditional":18,"loop":19,"COMPLETE":20,"statement_repetition1":21,"SKIP":22,"CHANNEL":23,"(":24,"termination_repetition0":25,"termination_option0":26,")":27,"atom":28,"++":29,"--":30,"assignment_op":31,"=":32,"+=":33,"-=":34,"*=":35,"/=":36,"%=":37,"IF":38,":":39,"ELSE":40,"WHILE":41,"literal":42,"[":43,"atom_option0":44,"]":45,".":46,"request":47,"BOOLEAN":48,"NUMBER":49,"STRING":50,"literal_repetition0":51,"literal_option0":52,"{":53,"literal_repetition1":54,"literal_option1":55,"}":56,"dyad":57,"request_repetition0":58,"request_option0":59,"unary_expr":60,"#":61,"!":62,"+":63,"-":64,"*":65,"/":66,"%":67,"<":68,">":69,"<=":70,">=":71,"==":72,"!=":73,"AND":74,"OR":75,"IN":76,"SEQ":77,"connection":78,"->":79,"~>":80,">>":81,",":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",9:"END",11:"RECEIVE",13:"ID",14:";",20:"COMPLETE",22:"SKIP",23:"CHANNEL",24:"(",27:")",29:"++",30:"--",32:"=",33:"+=",34:"-=",35:"*=",36:"/=",37:"%=",38:"IF",39:":",40:"ELSE",41:"WHILE",43:"[",45:"]",46:".",48:"BOOLEAN",49:"NUMBER",50:"STRING",53:"{",56:"}",61:"#",62:"!",63:"+",64:"-",65:"*",66:"/",67:"%",68:"<",69:">",70:"<=",71:">=",72:"==",73:"!=",74:"AND",75:"OR",76:"IN",77:"SEQ",79:"->",80:"~>",81:">>",82:","},
productions_: [0,[3,2],[6,3],[10,4],[10,2],[10,2],[10,2],[10,1],[10,1],[10,4],[10,2],[16,5],[17,2],[17,2],[17,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[18,4],[18,7],[18,6],[19,4],[28,1],[28,1],[28,4],[28,3],[28,3],[28,1],[42,1],[42,1],[42,1],[42,4],[42,4],[42,1],[57,1],[57,3],[47,5],[60,1],[60,2],[60,2],[15,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[78,3],[78,3],[78,3],[4,0],[4,2],[8,0],[8,2],[12,0],[12,3],[21,0],[21,3],[25,0],[25,3],[26,0],[26,1],[44,0],[44,1],[51,0],[51,3],[52,0],[52,1],[54,0],[54,3],[55,0],[55,1],[58,0],[58,3],[59,0],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'program', statements: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: "receive", names: $$[$0-2].concat($$[$0-1])};
break;
case 9:this.$ = {type: "complete", promises: $$[$0-2].concat($$[$0-1])};
break;
case 10:this.$ = {type: 'skip'};
break;
case 11:this.$ = {type: "termination", channel: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 12:this.$ = {type: "assign", op: $$[$0], left: $$[$0-1]};
break;
case 13:this.$ = {type: "assign", op: $$[$0], left: $$[$0-1]};
break;
case 14:this.$ = {type: "assign", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 21:this.$ = {type: "conditional", predicate: $$[$0-2], consequent: $$[$0]};
break;
case 22:this.$ = {type: "conditional", predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 23:this.$ = {type: "conditional", predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 24:this.$ = {type: "loop", condition: $$[$0-2], statements: $$[$0]};
break;
case 26:this.$ = {type: "id", name: $$[$0]};
break;
case 27:this.$ = {type: "subscript", list: $$[$0-3], index: $$[$0-1]};
break;
case 28:this.$ = {type: "select", set: $$[$0-2], member: $$[$0]};
break;
case 29:this.$ = $$[$0-1];
break;
case 31:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 32:this.$ = {type: 'number', val: parseFloat($$[$0])};
break;
case 33:this.$ = {type: 'string', val: $$[$0]};
break;
case 34:this.$ = {type: "list", elements: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 35:this.$ = {type: "set", members: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 36:this.$ = {type: "closure", statements: $$[$0]};
break;
case 38:this.$ = ["dyad", $$[$0-2], $$[$0]];;
break;
case 39:this.$ = {type: "request", to: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 41:this.$ = {type: "cardinality", operand: $$[$0]};
break;
case 42:this.$ = {type: "complement", operand: $$[$0]};
break;
case 44:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 45:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 46:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 47:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 48:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 49:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 50:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 51:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 52:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 53:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 54:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 55:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 56:this.$ = {type: "op", op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 57:this.$ = {type: "in", left: $$[$0-2], right: $$[$0]};
break;
case 58:this.$ = {type: "sequence", first: $$[$0-2], last: $$[$0]};
break;
case 60:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 61:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 62:this.$ = {type: "connection", connector: $$[$0-1], source: $$[$0-2], sink: $$[$0]};
break;
case 63:this.$ = [];
break;
case 64:$$[$0-1].push($$[$0]);
break;
case 65:this.$ = [];
break;
case 66:$$[$0-1].push($$[$0]);
break;
case 67:this.$ = [];
break;
case 68:$$[$0-2].push($$[$0-1]);
break;
case 69:this.$ = [];
break;
case 70:$$[$0-2].push($$[$0-1]);
break;
case 71:this.$ = [];
break;
case 72:$$[$0-2].push($$[$0-1]);
break;
case 77:this.$ = [];
break;
case 78:$$[$0-2].push($$[$0-1]);
break;
case 81:this.$ = [];
break;
case 82:$$[$0-2].push($$[$0-1]);
break;
case 85:this.$ = [];
break;
case 86:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,63],7:[2,63],11:[2,63],13:[2,63],20:[2,63],22:[2,63],23:[2,63],24:[2,63],38:[2,63],41:[2,63],43:[2,63],48:[2,63],49:[2,63],50:[2,63],53:[2,63],61:[2,63],62:[2,63]},{1:[3]},{5:[1,3],6:30,7:[1,31],10:4,11:[1,5],13:[1,22],15:6,16:7,17:8,18:9,19:10,20:[1,11],22:[1,12],23:[1,15],24:[1,23],28:16,38:[1,17],41:[1,18],42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{1:[2,1]},{5:[2,64],7:[2,64],11:[2,64],13:[2,64],20:[2,64],22:[2,64],23:[2,64],24:[2,64],38:[2,64],41:[2,64],43:[2,64],48:[2,64],49:[2,64],50:[2,64],53:[2,64],61:[2,64],62:[2,64]},{12:32,13:[2,67]},{14:[1,33],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51]},{14:[1,52]},{14:[1,53]},{5:[2,7],7:[2,7],9:[2,7],11:[2,7],13:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7],38:[2,7],41:[2,7],43:[2,7],48:[2,7],49:[2,7],50:[2,7],53:[2,7],61:[2,7],62:[2,7]},{5:[2,8],7:[2,8],9:[2,8],11:[2,8],13:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8],38:[2,8],41:[2,8],43:[2,8],48:[2,8],49:[2,8],50:[2,8],53:[2,8],61:[2,8],62:[2,8]},{7:[2,69],13:[2,69],21:54,24:[2,69],43:[2,69],48:[2,69],49:[2,69],50:[2,69],53:[2,69],61:[2,69],62:[2,69]},{14:[1,55]},{14:[2,43],27:[2,43],39:[2,43],45:[2,43],56:[2,43],63:[2,43],64:[2,43],65:[2,43],66:[2,43],67:[2,43],68:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43],76:[2,43],77:[2,43],79:[2,43],80:[2,43],81:[2,43],82:[2,43]},{14:[2,59],27:[2,59],39:[2,59],45:[2,59],56:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],68:[2,59],69:[2,59],70:[2,59],71:[2,59],72:[2,59],73:[2,59],74:[2,59],75:[2,59],76:[2,59],77:[2,59],79:[2,59],80:[2,59],81:[2,59],82:[2,59]},{24:[1,56]},{14:[2,40],24:[1,62],29:[1,57],30:[1,58],31:59,32:[1,63],33:[1,64],34:[1,65],35:[1,66],36:[1,67],37:[1,68],43:[1,60],46:[1,61],63:[2,40],64:[2,40],65:[2,40],66:[2,40],67:[2,40],68:[2,40],69:[2,40],70:[2,40],71:[2,40],72:[2,40],73:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],79:[2,40],80:[2,40],81:[2,40]},{6:30,7:[1,31],13:[1,22],15:69,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:71,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],24:[1,23],28:72,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29]},{6:30,7:[1,31],13:[1,22],24:[1,23],28:73,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29]},{14:[2,25],24:[2,25],27:[2,25],29:[2,25],30:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],39:[2,25],43:[2,25],45:[2,25],46:[2,25],56:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],69:[2,25],70:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25],79:[2,25],80:[2,25],81:[2,25],82:[2,25]},{14:[2,26],24:[2,26],27:[2,26],29:[2,26],30:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],37:[2,26],39:[2,26],43:[2,26],45:[2,26],46:[2,26],56:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],69:[2,26],70:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26],79:[2,26],80:[2,26],81:[2,26],82:[2,26]},{6:30,7:[1,31],13:[1,22],15:74,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{14:[2,30],24:[2,30],27:[2,30],29:[2,30],30:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30],39:[2,30],43:[2,30],45:[2,30],46:[2,30],56:[2,30],63:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],69:[2,30],70:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],79:[2,30],80:[2,30],81:[2,30],82:[2,30]},{14:[2,31],24:[2,31],27:[2,31],29:[2,31],30:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31],39:[2,31],43:[2,31],45:[2,31],46:[2,31],56:[2,31],63:[2,31],64:[2,31],65:[2,31],66:[2,31],67:[2,31],68:[2,31],69:[2,31],70:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],79:[2,31],80:[2,31],81:[2,31],82:[2,31]},{14:[2,32],24:[2,32],27:[2,32],29:[2,32],30:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],39:[2,32],43:[2,32],45:[2,32],46:[2,32],56:[2,32],63:[2,32],64:[2,32],65:[2,32],66:[2,32],67:[2,32],68:[2,32],69:[2,32],70:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],77:[2,32],79:[2,32],80:[2,32],81:[2,32],82:[2,32]},{14:[2,33],24:[2,33],27:[2,33],29:[2,33],30:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],39:[2,33],43:[2,33],45:[2,33],46:[2,33],56:[2,33],63:[2,33],64:[2,33],65:[2,33],66:[2,33],67:[2,33],68:[2,33],69:[2,33],70:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],77:[2,33],79:[2,33],80:[2,33],81:[2,33],82:[2,33]},{7:[2,77],13:[2,77],24:[2,77],43:[2,77],45:[2,77],48:[2,77],49:[2,77],50:[2,77],51:75,53:[2,77],61:[2,77],62:[2,77]},{7:[2,81],13:[2,81],24:[2,81],43:[2,81],48:[2,81],49:[2,81],50:[2,81],53:[2,81],54:76,56:[2,81],61:[2,81],62:[2,81]},{14:[2,36],24:[2,36],27:[2,36],29:[2,36],30:[2,36],32:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],39:[2,36],43:[2,36],45:[2,36],46:[2,36],56:[2,36],63:[2,36],64:[2,36],65:[2,36],66:[2,36],67:[2,36],68:[2,36],69:[2,36],70:[2,36],71:[2,36],72:[2,36],73:[2,36],74:[2,36],75:[2,36],76:[2,36],77:[2,36],79:[2,36],80:[2,36],81:[2,36],82:[2,36]},{7:[2,65],8:77,9:[2,65],11:[2,65],13:[2,65],20:[2,65],22:[2,65],23:[2,65],24:[2,65],38:[2,65],41:[2,65],43:[2,65],48:[2,65],49:[2,65],50:[2,65],53:[2,65],61:[2,65],62:[2,65]},{13:[1,78]},{5:[2,4],7:[2,4],9:[2,4],11:[2,4],13:[2,4],20:[2,4],22:[2,4],23:[2,4],24:[2,4],38:[2,4],41:[2,4],43:[2,4],48:[2,4],49:[2,4],50:[2,4],53:[2,4],61:[2,4],62:[2,4]},{6:30,7:[1,31],13:[1,22],15:79,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:80,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:81,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:82,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:83,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:84,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:85,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:86,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:87,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:88,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:89,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:90,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:91,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:92,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:93,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:94,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:95,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:96,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{5:[2,5],7:[2,5],9:[2,5],11:[2,5],13:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5],38:[2,5],41:[2,5],43:[2,5],48:[2,5],49:[2,5],50:[2,5],53:[2,5],61:[2,5],62:[2,5]},{5:[2,6],7:[2,6],9:[2,6],11:[2,6],13:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6],38:[2,6],41:[2,6],43:[2,6],48:[2,6],49:[2,6],50:[2,6],53:[2,6],61:[2,6],62:[2,6]},{6:30,7:[1,31],13:[1,22],15:97,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{5:[2,10],7:[2,10],9:[2,10],11:[2,10],13:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10],38:[2,10],41:[2,10],43:[2,10],48:[2,10],49:[2,10],50:[2,10],53:[2,10],61:[2,10],62:[2,10]},{7:[2,71],13:[2,71],24:[2,71],25:98,27:[2,71],43:[2,71],48:[2,71],49:[2,71],50:[2,71],53:[2,71],61:[2,71],62:[2,71]},{14:[2,12]},{14:[2,13]},{6:30,7:[1,31],13:[1,22],15:99,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:101,24:[1,23],28:70,42:21,43:[1,28],44:100,45:[2,75],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{13:[1,102]},{7:[2,85],13:[2,85],24:[2,85],27:[2,85],43:[2,85],48:[2,85],49:[2,85],50:[2,85],53:[2,85],58:103,61:[2,85],62:[2,85]},{7:[2,15],13:[2,15],24:[2,15],43:[2,15],48:[2,15],49:[2,15],50:[2,15],53:[2,15],61:[2,15],62:[2,15]},{7:[2,16],13:[2,16],24:[2,16],43:[2,16],48:[2,16],49:[2,16],50:[2,16],53:[2,16],61:[2,16],62:[2,16]},{7:[2,17],13:[2,17],24:[2,17],43:[2,17],48:[2,17],49:[2,17],50:[2,17],53:[2,17],61:[2,17],62:[2,17]},{7:[2,18],13:[2,18],24:[2,18],43:[2,18],48:[2,18],49:[2,18],50:[2,18],53:[2,18],61:[2,18],62:[2,18]},{7:[2,19],13:[2,19],24:[2,19],43:[2,19],48:[2,19],49:[2,19],50:[2,19],53:[2,19],61:[2,19],62:[2,19]},{7:[2,20],13:[2,20],24:[2,20],43:[2,20],48:[2,20],49:[2,20],50:[2,20],53:[2,20],61:[2,20],62:[2,20]},{39:[1,104],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51]},{14:[2,40],24:[1,62],27:[2,40],39:[2,40],43:[1,60],45:[2,40],46:[1,61],56:[2,40],63:[2,40],64:[2,40],65:[2,40],66:[2,40],67:[2,40],68:[2,40],69:[2,40],70:[2,40],71:[2,40],72:[2,40],73:[2,40],74:[2,40],75:[2,40],76:[2,40],77:[2,40],79:[2,40],80:[2,40],81:[2,40],82:[2,40]},{39:[1,105],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51]},{14:[2,41],24:[1,62],27:[2,41],39:[2,41],43:[1,60],45:[2,41],46:[1,61],56:[2,41],63:[2,41],64:[2,41],65:[2,41],66:[2,41],67:[2,41],68:[2,41],69:[2,41],70:[2,41],71:[2,41],72:[2,41],73:[2,41],74:[2,41],75:[2,41],76:[2,41],77:[2,41],79:[2,41],80:[2,41],81:[2,41],82:[2,41]},{14:[2,42],24:[1,62],27:[2,42],39:[2,42],43:[1,60],45:[2,42],46:[1,61],56:[2,42],63:[2,42],64:[2,42],65:[2,42],66:[2,42],67:[2,42],68:[2,42],69:[2,42],70:[2,42],71:[2,42],72:[2,42],73:[2,42],74:[2,42],75:[2,42],76:[2,42],77:[2,42],79:[2,42],80:[2,42],81:[2,42],82:[2,42]},{27:[1,106],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51]},{6:30,7:[1,31],13:[1,22],15:108,24:[1,23],28:70,42:21,43:[1,28],45:[2,79],47:24,48:[1,25],49:[1,26],50:[1,27],52:107,53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],13:[1,22],15:111,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],55:109,56:[2,83],57:110,60:13,61:[1,19],62:[1,20],78:14},{6:30,7:[1,31],9:[1,112],10:113,11:[1,5],13:[1,22],15:6,16:7,17:8,18:9,19:10,20:[1,11],22:[1,12],23:[1,15],24:[1,23],28:16,38:[1,17],41:[1,18],42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{14:[1,114],82:[1,115]},{14:[2,44],27:[2,44],39:[2,44],45:[2,44],56:[2,44],63:[2,44],64:[2,44],65:[1,36],66:[1,37],67:[1,38],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],76:[2,44],77:[2,44],79:[2,44],80:[2,44],81:[2,44],82:[2,44]},{14:[2,45],27:[2,45],39:[2,45],45:[2,45],56:[2,45],63:[2,45],64:[2,45],65:[1,36],66:[1,37],67:[1,38],68:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],76:[2,45],77:[2,45],79:[2,45],80:[2,45],81:[2,45],82:[2,45]},{14:[2,46],27:[2,46],39:[2,46],45:[2,46],56:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],68:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46],77:[2,46],79:[2,46],80:[2,46],81:[2,46],82:[2,46]},{14:[2,47],27:[2,47],39:[2,47],45:[2,47],56:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47],69:[2,47],70:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47],76:[2,47],77:[2,47],79:[2,47],80:[2,47],81:[2,47],82:[2,47]},{14:[2,48],27:[2,48],39:[2,48],45:[2,48],56:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48],69:[2,48],70:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48],75:[2,48],76:[2,48],77:[2,48],79:[2,48],80:[2,48],81:[2,48],82:[2,48]},{14:[2,49],27:[2,49],39:[2,49],45:[2,49],56:[2,49],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[2,49],69:[2,49],70:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49],75:[2,49],76:[2,49],77:[2,49],79:[2,49],80:[2,49],81:[2,49],82:[2,49]},{14:[2,50],27:[2,50],39:[2,50],45:[2,50],56:[2,50],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[2,50],69:[2,50],70:[2,50],71:[2,50],72:[2,50],73:[2,50],74:[2,50],75:[2,50],76:[2,50],77:[2,50],79:[2,50],80:[2,50],81:[2,50],82:[2,50]},{14:[2,51],27:[2,51],39:[2,51],45:[2,51],56:[2,51],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[2,51],69:[2,51],70:[2,51],71:[2,51],72:[2,51],73:[2,51],74:[2,51],75:[2,51],76:[2,51],77:[2,51],79:[2,51],80:[2,51],81:[2,51],82:[2,51]},{14:[2,52],27:[2,52],39:[2,52],45:[2,52],56:[2,52],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[2,52],69:[2,52],70:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],76:[2,52],77:[2,52],79:[2,52],80:[2,52],81:[2,52],82:[2,52]},{14:[2,53],27:[2,53],39:[2,53],45:[2,53],56:[2,53],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[2,53],69:[2,53],70:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53],76:[2,53],77:[2,53],79:[2,53],80:[2,53],81:[2,53],82:[2,53]},{14:[2,54],27:[2,54],39:[2,54],45:[2,54],56:[2,54],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[2,54],69:[2,54],70:[2,54],71:[2,54],72:[2,54],73:[2,54],74:[2,54],75:[2,54],76:[2,54],77:[2,54],79:[2,54],80:[2,54],81:[2,54],82:[2,54]},{14:[2,55],27:[2,55],39:[2,55],45:[2,55],56:[2,55],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[2,55],75:[2,55],76:[2,55],77:[2,55],79:[2,55],80:[2,55],81:[2,55],82:[2,55]},{14:[2,56],27:[2,56],39:[2,56],45:[2,56],56:[2,56],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[2,56],75:[2,56],76:[2,56],77:[2,56],79:[2,56],80:[2,56],81:[2,56],82:[2,56]},{14:[2,57],27:[2,57],39:[2,57],45:[2,57],56:[2,57],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[2,57],75:[2,57],76:[2,57],77:[2,57],79:[2,57],80:[2,57],81:[2,57],82:[2,57]},{14:[2,58],27:[2,58],39:[2,58],45:[2,58],56:[2,58],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[2,58],75:[2,58],76:[2,58],77:[2,58],79:[2,58],80:[2,58],81:[2,58],82:[2,58]},{14:[2,60],27:[2,60],39:[2,60],45:[2,60],56:[2,60],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[2,60],80:[2,60],81:[2,60],82:[2,60]},{14:[2,61],27:[2,61],39:[2,61],45:[2,61],56:[2,61],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[2,61],80:[2,61],81:[2,61],82:[2,61]},{14:[2,62],27:[2,62],39:[2,62],45:[2,62],56:[2,62],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[2,62],80:[2,62],81:[2,62],82:[2,62]},{14:[1,116],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51],82:[1,117]},{6:30,7:[1,31],13:[1,22],15:119,24:[1,23],26:118,27:[2,73],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{14:[2,14],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51]},{45:[1,120]},{45:[2,76],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51]},{14:[2,28],24:[2,28],27:[2,28],29:[2,28],30:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28],39:[2,28],43:[2,28],45:[2,28],46:[2,28],56:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],69:[2,28],70:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],79:[2,28],80:[2,28],81:[2,28],82:[2,28]},{6:30,7:[1,31],13:[1,22],15:122,24:[1,23],27:[2,87],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],59:121,60:13,61:[1,19],62:[1,20],78:14},{6:123,7:[1,31]},{6:124,7:[1,31]},{14:[2,29],24:[2,29],27:[2,29],29:[2,29],30:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],39:[2,29],43:[2,29],45:[2,29],46:[2,29],56:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],67:[2,29],68:[2,29],69:[2,29],70:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],79:[2,29],80:[2,29],81:[2,29],82:[2,29]},{45:[1,125]},{45:[2,80],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51],82:[1,126]},{56:[1,127]},{56:[2,84],82:[1,128]},{39:[1,129],56:[2,37],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51],82:[2,37]},{5:[2,2],7:[2,2],9:[2,2],11:[2,2],13:[2,2],14:[2,2],20:[2,2],22:[2,2],23:[2,2],24:[2,2],27:[2,2],29:[2,2],30:[2,2],32:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],40:[2,2],41:[2,2],43:[2,2],45:[2,2],46:[2,2],48:[2,2],49:[2,2],50:[2,2],53:[2,2],56:[2,2],61:[2,2],62:[2,2],63:[2,2],64:[2,2],65:[2,2],66:[2,2],67:[2,2],68:[2,2],69:[2,2],70:[2,2],71:[2,2],72:[2,2],73:[2,2],74:[2,2],75:[2,2],76:[2,2],77:[2,2],79:[2,2],80:[2,2],81:[2,2],82:[2,2]},{7:[2,66],9:[2,66],11:[2,66],13:[2,66],20:[2,66],22:[2,66],23:[2,66],24:[2,66],38:[2,66],41:[2,66],43:[2,66],48:[2,66],49:[2,66],50:[2,66],53:[2,66],61:[2,66],62:[2,66]},{5:[2,3],7:[2,3],9:[2,3],11:[2,3],13:[2,3],20:[2,3],22:[2,3],23:[2,3],24:[2,3],38:[2,3],41:[2,3],43:[2,3],48:[2,3],49:[2,3],50:[2,3],53:[2,3],61:[2,3],62:[2,3]},{13:[2,68]},{5:[2,9],7:[2,9],9:[2,9],11:[2,9],13:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9],38:[2,9],41:[2,9],43:[2,9],48:[2,9],49:[2,9],50:[2,9],53:[2,9],61:[2,9],62:[2,9]},{7:[2,70],13:[2,70],24:[2,70],43:[2,70],48:[2,70],49:[2,70],50:[2,70],53:[2,70],61:[2,70],62:[2,70]},{27:[1,130]},{27:[2,74],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51],82:[1,131]},{14:[2,27],24:[2,27],27:[2,27],29:[2,27],30:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[2,27],39:[2,27],43:[2,27],45:[2,27],46:[2,27],56:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],69:[2,27],70:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27],79:[2,27],80:[2,27],81:[2,27],82:[2,27]},{27:[1,132]},{27:[2,88],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51],82:[1,133]},{5:[2,21],7:[2,21],9:[2,21],11:[2,21],13:[2,21],20:[2,21],22:[2,21],23:[2,21],24:[2,21],38:[2,21],40:[1,134],41:[2,21],43:[2,21],48:[2,21],49:[2,21],50:[2,21],53:[2,21],61:[2,21],62:[2,21]},{5:[2,24],7:[2,24],9:[2,24],11:[2,24],13:[2,24],20:[2,24],22:[2,24],23:[2,24],24:[2,24],38:[2,24],41:[2,24],43:[2,24],48:[2,24],49:[2,24],50:[2,24],53:[2,24],61:[2,24],62:[2,24]},{14:[2,34],24:[2,34],27:[2,34],29:[2,34],30:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],39:[2,34],43:[2,34],45:[2,34],46:[2,34],56:[2,34],63:[2,34],64:[2,34],65:[2,34],66:[2,34],67:[2,34],68:[2,34],69:[2,34],70:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34],77:[2,34],79:[2,34],80:[2,34],81:[2,34],82:[2,34]},{7:[2,78],13:[2,78],24:[2,78],43:[2,78],45:[2,78],48:[2,78],49:[2,78],50:[2,78],53:[2,78],61:[2,78],62:[2,78]},{14:[2,35],24:[2,35],27:[2,35],29:[2,35],30:[2,35],32:[2,35],33:[2,35],34:[2,35],35:[2,35],36:[2,35],37:[2,35],39:[2,35],43:[2,35],45:[2,35],46:[2,35],56:[2,35],63:[2,35],64:[2,35],65:[2,35],66:[2,35],67:[2,35],68:[2,35],69:[2,35],70:[2,35],71:[2,35],72:[2,35],73:[2,35],74:[2,35],75:[2,35],76:[2,35],77:[2,35],79:[2,35],80:[2,35],81:[2,35],82:[2,35]},{7:[2,82],13:[2,82],24:[2,82],43:[2,82],48:[2,82],49:[2,82],50:[2,82],53:[2,82],56:[2,82],61:[2,82],62:[2,82]},{6:30,7:[1,31],13:[1,22],15:135,24:[1,23],28:70,42:21,43:[1,28],47:24,48:[1,25],49:[1,26],50:[1,27],53:[1,29],60:13,61:[1,19],62:[1,20],78:14},{14:[2,11]},{7:[2,72],13:[2,72],24:[2,72],27:[2,72],43:[2,72],48:[2,72],49:[2,72],50:[2,72],53:[2,72],61:[2,72],62:[2,72]},{14:[2,39],24:[2,39],27:[2,39],29:[2,39],30:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],39:[2,39],43:[2,39],45:[2,39],46:[2,39],56:[2,39],63:[2,39],64:[2,39],65:[2,39],66:[2,39],67:[2,39],68:[2,39],69:[2,39],70:[2,39],71:[2,39],72:[2,39],73:[2,39],74:[2,39],75:[2,39],76:[2,39],77:[2,39],79:[2,39],80:[2,39],81:[2,39],82:[2,39]},{7:[2,86],13:[2,86],24:[2,86],27:[2,86],43:[2,86],48:[2,86],49:[2,86],50:[2,86],53:[2,86],61:[2,86],62:[2,86]},{18:137,38:[1,17],39:[1,136]},{56:[2,38],63:[1,34],64:[1,35],65:[1,36],66:[1,37],67:[1,38],68:[1,39],69:[1,40],70:[1,41],71:[1,42],72:[1,43],73:[1,44],74:[1,45],75:[1,46],76:[1,47],77:[1,48],79:[1,49],80:[1,50],81:[1,51],82:[2,38]},{6:138,7:[1,31]},{5:[2,23],7:[2,23],9:[2,23],11:[2,23],13:[2,23],20:[2,23],22:[2,23],23:[2,23],24:[2,23],38:[2,23],41:[2,23],43:[2,23],48:[2,23],49:[2,23],50:[2,23],53:[2,23],61:[2,23],62:[2,23]},{5:[2,22],7:[2,22],9:[2,22],11:[2,22],13:[2,22],20:[2,22],22:[2,22],23:[2,22],24:[2,22],38:[2,22],41:[2,22],43:[2,22],48:[2,22],49:[2,22],50:[2,22],53:[2,22],61:[2,22],62:[2,22]}],
defaultActions: {3:[2,1],57:[2,12],58:[2,13],115:[2,68],130:[2,11]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 48
break;
case 11:return 49
break;
case 12:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 50;
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 50;
break;
case 14:return 43
break;
case 15:return 45
break;
case 16:return 24
break;
case 17:return 27
break;
case 18:return 53
break;
case 19:return 56
break;
case 20:return 82
break;
case 21:return 39
break;
case 22:return 14
break;
case 23:return 77
break;
case 24:return 46
break;
case 25:return 70
break;
case 26:return 71
break;
case 27:return 72
break;
case 28:return 73
break;
case 29:return 74
break;
case 30:return 75
break;
case 31:return 29
break;
case 32:return 30
break;
case 33:return 33
break;
case 34:return 34
break;
case 35:return 35
break;
case 36:return 36
break;
case 37:return 37
break;
case 38:return 79 // success connector
break;
case 39:return 80 // failure connector
break;
case 40:return 81 // sequence connector
break;
case 41:return 63
break;
case 42:return 64
break;
case 43:return 65
break;
case 44:return 66
break;
case 45:return 67
break;
case 46:return 68
break;
case 47:return 69
break;
case 48:return 32
break;
case 49:return '?'
break;
case 50:return 61
break;
case 51:return 62
break;
case 52:return 38
break;
case 53:return 40
break;
case 54:return 11
break;
case 55:return 41
break;
case 56:return 20
break;
case 57:return 76
break;
case 58:return 22
break;
case 59:return 23
break;
case 60:return 'STOP'
break;
case 61:return 'TRY'
break;
case 62:return 13
break;
case 63:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:true|false\b)/,/^(?:(([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:~>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:receive\b)/,/^(?:while\b)/,/^(?:complete\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply|fail\b)/,/^(?:stop\b)/,/^(?:try\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}