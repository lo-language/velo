/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"statement_list":4,"EOF":5,"block":6,"BEGIN":7,"END":8,"statement":9,"RECEIVE":10,"statement_repetition0":11,"ID":12,";":13,"IS":14,"literal":15,"DISTINGUISH":16,"statement_repetition_plus1":17,"application":18,"statement_option0":19,"response":20,"assignment":21,"step":22,"lvalue":23,"dispatch":24,"conditional":25,"iteration":26,"SKIP":27,"REPLY":28,"response_repetition0":29,"response_option0":30,"FAIL":31,"response_repetition1":32,"response_option1":33,"REPLACE":34,"response_repetition2":35,"response_option2":36,"assignment_op":37,"expr":38,"contingency":39,"=":40,"+=":41,"-=":42,"*=":43,"/=":44,"%=":45,"++":46,"--":47,"IF":48,":":49,"ELSE":50,"WHILE":51,"value":52,"(":53,")":54,"INTER_BEGIN":55,"dynastring":56,"INTER_END":57,"INTER_MID":58,"[":59,"lvalue_option0":60,"]":61,".":62,"lvalue_repetition_plus0":63,"NIL":64,"BOOLEAN":65,"NUMBER":66,"STRING":67,"PROCEDURE":68,"literal_option0":69,"literal_repetition0":70,"literal_option1":71,"literal_option2":72,"{":73,"literal_option3":74,"literal_repetition1":75,"literal_option4":76,"literal_option5":77,"}":78,"dyad":79,"field":80,"application_repetition0":81,"application_option0":82,"unary_expr":83,"#":84,"NOT":85,"+":86,"-":87,"*":88,"/":89,"%":90,"<":91,">":92,"<=":93,">=":94,"==":95,"!=":96,"AND":97,"OR":98,"IN":99,"SEQ":100,"future":101,"AFTER":102,"dispatch_option0":103,"message":104,"=>":105,"future_repetition0":106,"future_repetition1":107,"~":108,"message_repetition0":109,"CATCH":110,",":111,"statement_repetition_plus1_option0":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"END",10:"RECEIVE",12:"ID",13:";",14:"IS",16:"DISTINGUISH",27:"SKIP",28:"REPLY",31:"FAIL",34:"REPLACE",40:"=",41:"+=",42:"-=",43:"*=",44:"/=",45:"%=",46:"++",47:"--",48:"IF",49:":",50:"ELSE",51:"WHILE",53:"(",54:")",55:"INTER_BEGIN",57:"INTER_END",58:"INTER_MID",59:"[",61:"]",62:".",64:"NIL",65:"BOOLEAN",66:"NUMBER",67:"STRING",68:"PROCEDURE",73:"{",78:"}",84:"#",85:"NOT",86:"+",87:"-",88:"*",89:"/",90:"%",91:"<",92:">",93:"<=",94:">=",95:"==",96:"!=",97:"AND",98:"OR",99:"IN",100:"SEQ",102:"AFTER",105:"=>",108:"~",110:"CATCH",111:","},
productions_: [0,[3,2],[6,3],[4,1],[4,2],[9,4],[9,4],[9,4],[9,3],[9,2],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,2],[20,3],[20,3],[20,3],[21,4],[21,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[22,2],[22,2],[25,4],[25,7],[25,6],[26,4],[52,1],[52,1],[52,3],[52,1],[52,3],[56,1],[56,3],[23,1],[23,4],[23,3],[23,4],[15,1],[15,1],[15,1],[15,1],[15,3],[15,6],[15,6],[79,1],[79,3],[80,3],[18,5],[83,1],[83,2],[83,2],[38,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[24,2],[24,2],[24,5],[101,1],[101,4],[101,4],[104,4],[39,3],[11,0],[11,3],[112,0],[112,1],[17,2],[17,3],[19,0],[19,1],[29,0],[29,3],[30,0],[30,1],[32,0],[32,3],[33,0],[33,1],[35,0],[35,3],[36,0],[36,1],[60,0],[60,1],[63,2],[63,3],[69,0],[69,1],[70,0],[70,3],[71,0],[71,1],[72,0],[72,1],[74,0],[74,1],[75,0],[75,3],[76,0],[76,1],[77,0],[77,1],[81,0],[81,3],[82,0],[82,1],[103,0],[103,1],[106,0],[106,3],[107,0],[107,3],[109,0],[109,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'procedure', body: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 4:this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 5:this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 6:this.$ = {type: 'constant', name: $$[$0-3], value: $$[$0-1]};
break;
case 7:this.$ = {type: 'range', variants: $$[$0-2].concat($$[$0-1])};
break;
case 8:this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 16:this.$ = {type: 'skip'};
break;
case 17:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 18:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 19:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 20:this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 21:this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 28:this.$ = {type: 'increment', operand: $$[$0-1]};
break;
case 29:this.$ = {type: 'decrement', operand: $$[$0-1]};
break;
case 30:this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 31:this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 32:this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 33:this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 36:this.$ = $$[$0-1];
break;
case 38:this.$ = {type: 'interpolation', left: $$[$0-2], middle: $$[$0-1], right: $$[$0]};
break;
case 40:this.$ = {type: 'dynastring', left: $$[$0-2], middle: $$[$0-1], right: $$[$0] };
break;
case 41:this.$ = {type: 'id', name: $$[$0]};
break;
case 42:this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 43:this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 44:this.$ = {type: 'destructure', members: $$[$0-1].concat([$$[$0-2]])};
break;
case 45:this.$ = {type: 'nil'};
break;
case 46:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 47:this.$ = {type: 'number', val: $$[$0]};
break;
case 48:this.$ = {type: 'string', val: $$[$0]};
break;
case 49:this.$ = {type: 'procedure', body: $$[$0]};
break;
case 50:this.$ = {type: 'list', elements: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 51:this.$ = {type: 'record', fields: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 53:this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};;
break;
case 54:this.$ = {type: 'field', name: $$[$0-2], value: $$[$0]};
break;
case 55:this.$ = {type: 'application', address: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 57:this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 58:this.$ = {type: 'complement', operand: $$[$0]};
break;
case 60:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 61:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 62:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 63:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 64:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 65:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 66:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 67:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 68:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 69:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 70:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 71:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 72:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 73:this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 74:this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 77:this.$ = {type: 'message', address: $$[$0-3].address, args: $$[$0-3].args, subsequent: $$[$0-1], contingency: $$[$0]};
break;
case 79:this.$ = $$[$0-2];
break;
case 81:this.$ = {type: 'message', address: $$[$0-3], args: $$[$0-1].concat([$$[$0]])};
break;
case 82:this.$ = $$[$0];
break;
case 83:this.$ = [];
break;
case 84:$$[$0-2].push($$[$0-1]);
break;
case 87:this.$ = [$$[$0-1]];
break;
case 88:$$[$0-2].push($$[$0-1]);
break;
case 91:this.$ = [];
break;
case 92:$$[$0-2].push($$[$0-1]);
break;
case 95:this.$ = [];
break;
case 96:$$[$0-2].push($$[$0-1]);
break;
case 99:this.$ = [];
break;
case 100:$$[$0-2].push($$[$0-1]);
break;
case 105:this.$ = [$$[$0-1]];
break;
case 106:$$[$0-2].push($$[$0-1]);
break;
case 109:this.$ = [];
break;
case 110:$$[$0-2].push($$[$0-1]);
break;
case 117:this.$ = [];
break;
case 118:$$[$0-2].push($$[$0-1]);
break;
case 123:this.$ = [];
break;
case 124:$$[$0-2].push($$[$0-1]);
break;
case 129:this.$ = [];
break;
case 130:$$[$0-2].push($$[$0-1]);
break;
case 131:this.$ = [];
break;
case 132:$$[$0-2].push($$[$0-1]);
break;
case 133:this.$ = [];
break;
case 134:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,9:3,10:[1,4],12:[1,5],15:25,16:[1,6],18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:[1,15],28:[1,17],31:[1,18],34:[1,19],48:[1,23],51:[1,24],52:16,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],101:21,102:[1,22],104:27},{1:[3]},{5:[1,35]},{4:36,5:[2,3],8:[2,3],9:3,10:[1,4],12:[1,5],15:25,16:[1,6],18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:[1,15],28:[1,17],31:[1,18],34:[1,19],48:[1,23],51:[1,24],52:16,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],101:21,102:[1,22],104:27},{11:37,12:[2,83]},{13:[2,41],14:[1,38],40:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],53:[2,41],59:[2,41],62:[2,41],105:[2,41],108:[2,41]},{12:[1,40],17:39},{13:[2,89],19:41,39:42,53:[2,37],59:[2,37],62:[2,37],105:[2,37],108:[2,37],110:[1,43]},{13:[1,44]},{5:[2,10],8:[2,10],10:[2,10],12:[2,10],16:[2,10],27:[2,10],28:[2,10],31:[2,10],34:[2,10],48:[2,10],51:[2,10],53:[2,10],55:[2,10],59:[2,10],64:[2,10],65:[2,10],66:[2,10],67:[2,10],68:[2,10],73:[2,10],102:[2,10]},{13:[1,45]},{13:[1,46],37:47,40:[1,50],41:[1,51],42:[1,52],43:[1,53],44:[1,54],45:[1,55],46:[1,48],47:[1,49],53:[2,34],59:[2,34],62:[2,34],105:[2,34],108:[2,34]},{5:[2,13],8:[2,13],10:[2,13],12:[2,13],16:[2,13],27:[2,13],28:[2,13],31:[2,13],34:[2,13],48:[2,13],51:[2,13],53:[2,13],55:[2,13],59:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],68:[2,13],73:[2,13],102:[2,13]},{5:[2,14],8:[2,14],10:[2,14],12:[2,14],16:[2,14],27:[2,14],28:[2,14],31:[2,14],34:[2,14],48:[2,14],51:[2,14],53:[2,14],55:[2,14],59:[2,14],64:[2,14],65:[2,14],66:[2,14],67:[2,14],68:[2,14],73:[2,14],102:[2,14]},{5:[2,15],8:[2,15],10:[2,15],12:[2,15],16:[2,15],27:[2,15],28:[2,15],31:[2,15],34:[2,15],48:[2,15],51:[2,15],53:[2,15],55:[2,15],59:[2,15],64:[2,15],65:[2,15],66:[2,15],67:[2,15],68:[2,15],73:[2,15],102:[2,15]},{13:[1,56]},{53:[1,57],59:[1,58],62:[1,59],105:[1,60],108:[1,61]},{12:[2,91],13:[2,91],29:62,53:[2,91],55:[2,91],59:[2,91],64:[2,91],65:[2,91],66:[2,91],67:[2,91],68:[2,91],73:[2,91],84:[2,91],85:[2,91]},{12:[2,95],13:[2,95],32:63,53:[2,95],55:[2,95],59:[2,95],64:[2,95],65:[2,95],66:[2,95],67:[2,95],68:[2,95],73:[2,95],84:[2,95],85:[2,95]},{12:[2,99],13:[2,99],35:64,53:[2,99],55:[2,99],59:[2,99],64:[2,99],65:[2,99],66:[2,99],67:[2,99],68:[2,99],73:[2,99],84:[2,99],85:[2,99]},{12:[1,67],15:25,18:70,23:65,38:66,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{13:[1,73],39:74,110:[1,43]},{12:[1,67],15:25,18:70,23:76,52:16,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],101:75,104:27},{12:[1,67],15:25,18:70,23:76,38:77,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:78,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{8:[2,35],13:[2,35],49:[2,35],53:[2,35],54:[2,35],57:[2,35],58:[2,35],59:[2,35],61:[2,35],62:[2,35],78:[2,35],86:[2,35],87:[2,35],88:[2,35],89:[2,35],90:[2,35],91:[2,35],92:[2,35],93:[2,35],94:[2,35],95:[2,35],96:[2,35],97:[2,35],98:[2,35],99:[2,35],100:[2,35],105:[2,35],108:[2,35],110:[2,35],111:[2,35]},{12:[1,67],15:25,18:70,23:76,38:80,52:68,53:[1,20],55:[1,26],56:79,59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{13:[2,78],49:[2,78],105:[1,81],110:[2,78]},{8:[2,45],13:[2,45],49:[2,45],53:[2,45],54:[2,45],57:[2,45],58:[2,45],59:[2,45],61:[2,45],62:[2,45],78:[2,45],86:[2,45],87:[2,45],88:[2,45],89:[2,45],90:[2,45],91:[2,45],92:[2,45],93:[2,45],94:[2,45],95:[2,45],96:[2,45],97:[2,45],98:[2,45],99:[2,45],100:[2,45],105:[2,45],108:[2,45],110:[2,45],111:[2,45]},{8:[2,46],13:[2,46],49:[2,46],53:[2,46],54:[2,46],57:[2,46],58:[2,46],59:[2,46],61:[2,46],62:[2,46],78:[2,46],86:[2,46],87:[2,46],88:[2,46],89:[2,46],90:[2,46],91:[2,46],92:[2,46],93:[2,46],94:[2,46],95:[2,46],96:[2,46],97:[2,46],98:[2,46],99:[2,46],100:[2,46],105:[2,46],108:[2,46],110:[2,46],111:[2,46]},{8:[2,47],13:[2,47],49:[2,47],53:[2,47],54:[2,47],57:[2,47],58:[2,47],59:[2,47],61:[2,47],62:[2,47],78:[2,47],86:[2,47],87:[2,47],88:[2,47],89:[2,47],90:[2,47],91:[2,47],92:[2,47],93:[2,47],94:[2,47],95:[2,47],96:[2,47],97:[2,47],98:[2,47],99:[2,47],100:[2,47],105:[2,47],108:[2,47],110:[2,47],111:[2,47]},{8:[2,48],13:[2,48],49:[2,48],53:[2,48],54:[2,48],57:[2,48],58:[2,48],59:[2,48],61:[2,48],62:[2,48],78:[2,48],86:[2,48],87:[2,48],88:[2,48],89:[2,48],90:[2,48],91:[2,48],92:[2,48],93:[2,48],94:[2,48],95:[2,48],96:[2,48],97:[2,48],98:[2,48],99:[2,48],100:[2,48],105:[2,48],108:[2,48],110:[2,48],111:[2,48]},{49:[1,82]},{7:[1,84],8:[2,107],12:[2,107],53:[2,107],55:[2,107],59:[2,107],61:[2,107],64:[2,107],65:[2,107],66:[2,107],67:[2,107],68:[2,107],69:83,73:[2,107],84:[2,107],85:[2,107]},{7:[1,86],8:[2,115],12:[2,115],74:85,78:[2,115]},{1:[2,1]},{5:[2,4],8:[2,4]},{12:[1,87]},{15:88,59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34]},{12:[1,89]},{12:[2,85],111:[1,91],112:90},{13:[1,92]},{13:[2,90]},{49:[1,93]},{5:[2,9],8:[2,9],10:[2,9],12:[2,9],16:[2,9],27:[2,9],28:[2,9],31:[2,9],34:[2,9],48:[2,9],51:[2,9],53:[2,9],55:[2,9],59:[2,9],64:[2,9],65:[2,9],66:[2,9],67:[2,9],68:[2,9],73:[2,9],102:[2,9]},{5:[2,11],8:[2,11],10:[2,11],12:[2,11],16:[2,11],27:[2,11],28:[2,11],31:[2,11],34:[2,11],48:[2,11],51:[2,11],53:[2,11],55:[2,11],59:[2,11],64:[2,11],65:[2,11],66:[2,11],67:[2,11],68:[2,11],73:[2,11],102:[2,11]},{5:[2,12],8:[2,12],10:[2,12],12:[2,12],16:[2,12],27:[2,12],28:[2,12],31:[2,12],34:[2,12],48:[2,12],51:[2,12],53:[2,12],55:[2,12],59:[2,12],64:[2,12],65:[2,12],66:[2,12],67:[2,12],68:[2,12],73:[2,12],102:[2,12]},{12:[1,67],15:25,18:95,23:76,38:94,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{13:[2,28]},{13:[2,29]},{12:[2,22],53:[2,22],55:[2,22],59:[2,22],64:[2,22],65:[2,22],66:[2,22],67:[2,22],68:[2,22],73:[2,22],84:[2,22],85:[2,22]},{12:[2,23],53:[2,23],55:[2,23],59:[2,23],64:[2,23],65:[2,23],66:[2,23],67:[2,23],68:[2,23],73:[2,23],84:[2,23],85:[2,23]},{12:[2,24],53:[2,24],55:[2,24],59:[2,24],64:[2,24],65:[2,24],66:[2,24],67:[2,24],68:[2,24],73:[2,24],84:[2,24],85:[2,24]},{12:[2,25],53:[2,25],55:[2,25],59:[2,25],64:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],73:[2,25],84:[2,25],85:[2,25]},{12:[2,26],53:[2,26],55:[2,26],59:[2,26],64:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],73:[2,26],84:[2,26],85:[2,26]},{12:[2,27],53:[2,27],55:[2,27],59:[2,27],64:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],73:[2,27],84:[2,27],85:[2,27]},{5:[2,16],8:[2,16],10:[2,16],12:[2,16],16:[2,16],27:[2,16],28:[2,16],31:[2,16],34:[2,16],48:[2,16],51:[2,16],53:[2,16],55:[2,16],59:[2,16],64:[2,16],65:[2,16],66:[2,16],67:[2,16],68:[2,16],73:[2,16],102:[2,16]},{12:[2,123],53:[2,123],54:[2,123],55:[2,123],59:[2,123],64:[2,123],65:[2,123],66:[2,123],67:[2,123],68:[2,123],73:[2,123],81:96,84:[2,123],85:[2,123]},{12:[1,67],15:25,18:70,23:76,38:98,52:68,53:[1,20],55:[1,26],59:[1,33],60:97,61:[2,103],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,99]},{12:[2,131],53:[2,131],55:[2,131],59:[2,131],64:[2,131],65:[2,131],66:[2,131],67:[2,131],68:[2,131],73:[2,131],107:100},{12:[2,133],53:[2,133],55:[2,133],59:[2,133],64:[2,133],65:[2,133],66:[2,133],67:[2,133],68:[2,133],73:[2,133],84:[2,133],85:[2,133],109:101},{12:[1,67],13:[2,93],15:25,18:70,23:76,30:102,38:103,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],13:[2,97],15:25,18:70,23:76,33:104,38:105,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],13:[2,101],15:25,18:70,23:76,36:106,38:107,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{53:[2,34],54:[2,34],59:[2,34],62:[2,34],63:108,86:[2,34],87:[2,34],88:[2,34],89:[2,34],90:[2,34],91:[2,34],92:[2,34],93:[2,34],94:[2,34],95:[2,34],96:[2,34],97:[2,34],98:[2,34],99:[2,34],100:[2,34],111:[1,109]},{54:[1,110],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125]},{8:[2,41],13:[2,41],49:[2,41],53:[2,41],54:[2,41],57:[2,41],58:[2,41],59:[2,41],61:[2,41],62:[2,41],78:[2,41],86:[2,41],87:[2,41],88:[2,41],89:[2,41],90:[2,41],91:[2,41],92:[2,41],93:[2,41],94:[2,41],95:[2,41],96:[2,41],97:[2,41],98:[2,41],99:[2,41],100:[2,41],105:[2,41],108:[2,41],110:[2,41],111:[2,41]},{8:[2,56],13:[2,56],49:[2,56],53:[1,57],54:[2,56],57:[2,56],58:[2,56],59:[1,58],61:[2,56],62:[1,59],78:[2,56],86:[2,56],87:[2,56],88:[2,56],89:[2,56],90:[2,56],91:[2,56],92:[2,56],93:[2,56],94:[2,56],95:[2,56],96:[2,56],97:[2,56],98:[2,56],99:[2,56],100:[2,56],105:[2,56],110:[2,56],111:[2,56]},{8:[2,59],13:[2,59],49:[2,59],54:[2,59],57:[2,59],58:[2,59],61:[2,59],78:[2,59],86:[2,59],87:[2,59],88:[2,59],89:[2,59],90:[2,59],91:[2,59],92:[2,59],93:[2,59],94:[2,59],95:[2,59],96:[2,59],97:[2,59],98:[2,59],99:[2,59],100:[2,59],105:[2,59],110:[2,59],111:[2,59]},{8:[2,37],13:[2,37],49:[2,37],53:[2,37],54:[2,37],57:[2,37],58:[2,37],59:[2,37],61:[2,37],62:[2,37],78:[2,37],86:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],94:[2,37],95:[2,37],96:[2,37],97:[2,37],98:[2,37],99:[2,37],100:[2,37],105:[2,37],108:[2,37],110:[2,37],111:[2,37]},{12:[1,67],15:25,18:70,23:76,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:126,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:127,84:[1,71],85:[1,72]},{5:[2,75],8:[2,75],10:[2,75],12:[2,75],16:[2,75],27:[2,75],28:[2,75],31:[2,75],34:[2,75],48:[2,75],51:[2,75],53:[2,75],55:[2,75],59:[2,75],64:[2,75],65:[2,75],66:[2,75],67:[2,75],68:[2,75],73:[2,75],102:[2,75]},{5:[2,76],8:[2,76],10:[2,76],12:[2,76],16:[2,76],27:[2,76],28:[2,76],31:[2,76],34:[2,76],48:[2,76],51:[2,76],53:[2,76],55:[2,76],59:[2,76],64:[2,76],65:[2,76],66:[2,76],67:[2,76],68:[2,76],73:[2,76],102:[2,76]},{49:[1,128]},{8:[2,34],13:[2,34],49:[2,34],53:[2,34],54:[2,34],57:[2,34],58:[2,34],59:[2,34],61:[2,34],62:[2,34],78:[2,34],86:[2,34],87:[2,34],88:[2,34],89:[2,34],90:[2,34],91:[2,34],92:[2,34],93:[2,34],94:[2,34],95:[2,34],96:[2,34],97:[2,34],98:[2,34],99:[2,34],100:[2,34],105:[2,34],108:[2,34],110:[2,34],111:[2,34]},{49:[1,129],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125]},{49:[1,130],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125]},{57:[1,131]},{57:[2,39],58:[1,132],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125]},{12:[2,129],53:[2,129],55:[2,129],59:[2,129],64:[2,129],65:[2,129],66:[2,129],67:[2,129],68:[2,129],73:[2,129],106:133},{6:134,7:[1,135]},{8:[2,109],12:[2,109],53:[2,109],55:[2,109],59:[2,109],61:[2,109],64:[2,109],65:[2,109],66:[2,109],67:[2,109],68:[2,109],70:136,73:[2,109],84:[2,109],85:[2,109]},{8:[2,108],12:[2,108],53:[2,108],55:[2,108],59:[2,108],61:[2,108],64:[2,108],65:[2,108],66:[2,108],67:[2,108],68:[2,108],73:[2,108],84:[2,108],85:[2,108]},{8:[2,117],12:[2,117],75:137,78:[2,117]},{8:[2,116],12:[2,116],78:[2,116]},{13:[1,138],111:[1,139]},{13:[1,140]},{12:[2,85],13:[1,141],111:[1,91],112:142},{12:[2,87]},{12:[2,86]},{5:[2,8],8:[2,8],10:[2,8],12:[2,8],16:[2,8],27:[2,8],28:[2,8],31:[2,8],34:[2,8],48:[2,8],51:[2,8],53:[2,8],55:[2,8],59:[2,8],64:[2,8],65:[2,8],66:[2,8],67:[2,8],68:[2,8],73:[2,8],102:[2,8]},{6:143,7:[1,135]},{13:[1,144],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125]},{13:[2,37],39:145,53:[2,37],59:[2,37],62:[2,37],86:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],94:[2,37],95:[2,37],96:[2,37],97:[2,37],98:[2,37],99:[2,37],100:[2,37],110:[1,43]},{12:[1,67],15:25,18:70,23:76,38:147,52:68,53:[1,20],54:[2,125],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],82:146,83:69,84:[1,71],85:[1,72]},{61:[1,148]},{61:[2,104],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125]},{8:[2,43],13:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],49:[2,43],53:[2,43],54:[2,43],57:[2,43],58:[2,43],59:[2,43],61:[2,43],62:[2,43],78:[2,43],86:[2,43],87:[2,43],88:[2,43],89:[2,43],90:[2,43],91:[2,43],92:[2,43],93:[2,43],94:[2,43],95:[2,43],96:[2,43],97:[2,43],98:[2,43],99:[2,43],100:[2,43],105:[2,43],108:[2,43],110:[2,43],111:[2,43]},{12:[1,67],15:25,18:70,23:149,52:150,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34]},{12:[1,67],15:25,18:70,23:76,38:151,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{13:[2,17]},{13:[2,94],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],111:[1,152]},{13:[2,18]},{13:[2,98],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],111:[1,153]},{13:[2,19]},{13:[2,102],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],111:[1,154]},{54:[1,155],111:[1,156]},{12:[1,67],15:25,18:70,23:157,52:150,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34]},{8:[2,36],13:[2,36],49:[2,36],53:[2,36],54:[2,36],57:[2,36],58:[2,36],59:[2,36],61:[2,36],62:[2,36],78:[2,36],86:[2,36],87:[2,36],88:[2,36],89:[2,36],90:[2,36],91:[2,36],92:[2,36],93:[2,36],94:[2,36],95:[2,36],96:[2,36],97:[2,36],98:[2,36],99:[2,36],100:[2,36],105:[2,36],108:[2,36],110:[2,36],111:[2,36]},{12:[1,67],15:25,18:70,23:76,38:158,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:159,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:160,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:161,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:162,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:163,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:164,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:165,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:166,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:167,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:168,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:169,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:170,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:171,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:76,38:172,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{8:[2,57],13:[2,57],49:[2,57],54:[2,57],57:[2,57],58:[2,57],61:[2,57],78:[2,57],86:[2,57],87:[2,57],88:[2,57],89:[2,57],90:[2,57],91:[2,57],92:[2,57],93:[2,57],94:[2,57],95:[2,57],96:[2,57],97:[2,57],98:[2,57],99:[2,57],100:[2,57],105:[2,57],110:[2,57],111:[2,57]},{8:[2,58],13:[2,58],49:[2,58],54:[2,58],57:[2,58],58:[2,58],61:[2,58],78:[2,58],86:[2,58],87:[2,58],88:[2,58],89:[2,58],90:[2,58],91:[2,58],92:[2,58],93:[2,58],94:[2,58],95:[2,58],96:[2,58],97:[2,58],98:[2,58],99:[2,58],100:[2,58],105:[2,58],110:[2,58],111:[2,58]},{6:173,7:[1,135]},{6:174,7:[1,135]},{6:175,7:[1,135]},{8:[2,38],13:[2,38],49:[2,38],53:[2,38],54:[2,38],57:[2,38],58:[2,38],59:[2,38],61:[2,38],62:[2,38],78:[2,38],86:[2,38],87:[2,38],88:[2,38],89:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38],94:[2,38],95:[2,38],96:[2,38],97:[2,38],98:[2,38],99:[2,38],100:[2,38],105:[2,38],108:[2,38],110:[2,38],111:[2,38]},{12:[1,67],15:25,18:70,23:76,38:80,52:68,53:[1,20],55:[1,26],56:176,59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{12:[1,67],15:25,18:70,23:177,52:150,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34]},{8:[2,49],13:[2,49],49:[2,49],53:[2,49],54:[2,49],57:[2,49],58:[2,49],59:[2,49],61:[2,49],62:[2,49],78:[2,49],86:[2,49],87:[2,49],88:[2,49],89:[2,49],90:[2,49],91:[2,49],92:[2,49],93:[2,49],94:[2,49],95:[2,49],96:[2,49],97:[2,49],98:[2,49],99:[2,49],100:[2,49],105:[2,49],108:[2,49],110:[2,49],111:[2,49]},{4:178,9:3,10:[1,4],12:[1,5],15:25,16:[1,6],18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:[1,15],28:[1,17],31:[1,18],34:[1,19],48:[1,23],51:[1,24],52:16,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],101:21,102:[1,22],104:27},{8:[2,111],12:[1,67],15:25,18:70,23:76,38:181,52:68,53:[1,20],55:[1,26],59:[1,33],61:[2,111],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],71:179,73:[1,34],79:180,83:69,84:[1,71],85:[1,72]},{8:[2,119],12:[1,184],76:182,78:[2,119],80:183},{5:[2,5],8:[2,5],10:[2,5],12:[2,5],16:[2,5],27:[2,5],28:[2,5],31:[2,5],34:[2,5],48:[2,5],51:[2,5],53:[2,5],55:[2,5],59:[2,5],64:[2,5],65:[2,5],66:[2,5],67:[2,5],68:[2,5],73:[2,5],102:[2,5]},{12:[2,84]},{5:[2,6],8:[2,6],10:[2,6],12:[2,6],16:[2,6],27:[2,6],28:[2,6],31:[2,6],34:[2,6],48:[2,6],51:[2,6],53:[2,6],55:[2,6],59:[2,6],64:[2,6],65:[2,6],66:[2,6],67:[2,6],68:[2,6],73:[2,6],102:[2,6]},{5:[2,7],8:[2,7],10:[2,7],12:[2,7],16:[2,7],27:[2,7],28:[2,7],31:[2,7],34:[2,7],48:[2,7],51:[2,7],53:[2,7],55:[2,7],59:[2,7],64:[2,7],65:[2,7],66:[2,7],67:[2,7],68:[2,7],73:[2,7],102:[2,7]},{12:[2,88]},{5:[2,82],8:[2,82],10:[2,82],12:[2,82],13:[2,82],16:[2,82],27:[2,82],28:[2,82],31:[2,82],34:[2,82],48:[2,82],51:[2,82],53:[2,82],55:[2,82],59:[2,82],64:[2,82],65:[2,82],66:[2,82],67:[2,82],68:[2,82],73:[2,82],102:[2,82]},{5:[2,20],8:[2,20],10:[2,20],12:[2,20],16:[2,20],27:[2,20],28:[2,20],31:[2,20],34:[2,20],48:[2,20],51:[2,20],53:[2,20],55:[2,20],59:[2,20],64:[2,20],65:[2,20],66:[2,20],67:[2,20],68:[2,20],73:[2,20],102:[2,20]},{5:[2,21],8:[2,21],10:[2,21],12:[2,21],16:[2,21],27:[2,21],28:[2,21],31:[2,21],34:[2,21],48:[2,21],51:[2,21],53:[2,21],55:[2,21],59:[2,21],64:[2,21],65:[2,21],66:[2,21],67:[2,21],68:[2,21],73:[2,21],102:[2,21]},{54:[1,185]},{54:[2,126],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],111:[1,186]},{8:[2,42],13:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],49:[2,42],53:[2,42],54:[2,42],57:[2,42],58:[2,42],59:[2,42],61:[2,42],62:[2,42],78:[2,42],86:[2,42],87:[2,42],88:[2,42],89:[2,42],90:[2,42],91:[2,42],92:[2,42],93:[2,42],94:[2,42],95:[2,42],96:[2,42],97:[2,42],98:[2,42],99:[2,42],100:[2,42],105:[2,42],108:[2,42],110:[2,42],111:[2,42]},{13:[2,80],49:[2,80],53:[2,34],59:[2,34],62:[2,34],110:[2,80],111:[1,187]},{53:[1,57],59:[1,58],62:[1,59]},{13:[2,81],49:[2,81],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],105:[2,81],110:[2,81],111:[1,188]},{12:[2,92],13:[2,92],53:[2,92],55:[2,92],59:[2,92],64:[2,92],65:[2,92],66:[2,92],67:[2,92],68:[2,92],73:[2,92],84:[2,92],85:[2,92]},{12:[2,96],13:[2,96],53:[2,96],55:[2,96],59:[2,96],64:[2,96],65:[2,96],66:[2,96],67:[2,96],68:[2,96],73:[2,96],84:[2,96],85:[2,96]},{12:[2,100],13:[2,100],53:[2,100],55:[2,100],59:[2,100],64:[2,100],65:[2,100],66:[2,100],67:[2,100],68:[2,100],73:[2,100],84:[2,100],85:[2,100]},{8:[2,44],13:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],49:[2,44],53:[2,44],54:[2,44],57:[2,44],58:[2,44],59:[2,44],61:[2,44],62:[2,44],78:[2,44],86:[2,44],87:[2,44],88:[2,44],89:[2,44],90:[2,44],91:[2,44],92:[2,44],93:[2,44],94:[2,44],95:[2,44],96:[2,44],97:[2,44],98:[2,44],99:[2,44],100:[2,44],105:[2,44],108:[2,44],110:[2,44],111:[2,44]},{12:[1,67],15:25,18:70,23:189,52:150,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34]},{53:[2,34],54:[2,105],59:[2,34],62:[2,34],111:[2,105]},{8:[2,60],13:[2,60],49:[2,60],54:[2,60],57:[2,60],58:[2,60],61:[2,60],78:[2,60],86:[2,60],87:[2,60],88:[1,113],89:[1,114],90:[1,115],91:[2,60],92:[2,60],93:[2,60],94:[2,60],95:[2,60],96:[2,60],97:[2,60],98:[2,60],99:[2,60],100:[2,60],105:[2,60],110:[2,60],111:[2,60]},{8:[2,61],13:[2,61],49:[2,61],54:[2,61],57:[2,61],58:[2,61],61:[2,61],78:[2,61],86:[2,61],87:[2,61],88:[1,113],89:[1,114],90:[1,115],91:[2,61],92:[2,61],93:[2,61],94:[2,61],95:[2,61],96:[2,61],97:[2,61],98:[2,61],99:[2,61],100:[2,61],105:[2,61],110:[2,61],111:[2,61]},{8:[2,62],13:[2,62],49:[2,62],54:[2,62],57:[2,62],58:[2,62],61:[2,62],78:[2,62],86:[2,62],87:[2,62],88:[2,62],89:[2,62],90:[2,62],91:[2,62],92:[2,62],93:[2,62],94:[2,62],95:[2,62],96:[2,62],97:[2,62],98:[2,62],99:[2,62],100:[2,62],105:[2,62],110:[2,62],111:[2,62]},{8:[2,63],13:[2,63],49:[2,63],54:[2,63],57:[2,63],58:[2,63],61:[2,63],78:[2,63],86:[2,63],87:[2,63],88:[2,63],89:[2,63],90:[2,63],91:[2,63],92:[2,63],93:[2,63],94:[2,63],95:[2,63],96:[2,63],97:[2,63],98:[2,63],99:[2,63],100:[2,63],105:[2,63],110:[2,63],111:[2,63]},{8:[2,64],13:[2,64],49:[2,64],54:[2,64],57:[2,64],58:[2,64],61:[2,64],78:[2,64],86:[2,64],87:[2,64],88:[2,64],89:[2,64],90:[2,64],91:[2,64],92:[2,64],93:[2,64],94:[2,64],95:[2,64],96:[2,64],97:[2,64],98:[2,64],99:[2,64],100:[2,64],105:[2,64],110:[2,64],111:[2,64]},{8:[2,65],13:[2,65],49:[2,65],54:[2,65],57:[2,65],58:[2,65],61:[2,65],78:[2,65],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[2,65],92:[2,65],93:[2,65],94:[2,65],95:[2,65],96:[2,65],97:[2,65],98:[2,65],99:[2,65],100:[2,65],105:[2,65],110:[2,65],111:[2,65]},{8:[2,66],13:[2,66],49:[2,66],54:[2,66],57:[2,66],58:[2,66],61:[2,66],78:[2,66],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[2,66],92:[2,66],93:[2,66],94:[2,66],95:[2,66],96:[2,66],97:[2,66],98:[2,66],99:[2,66],100:[2,66],105:[2,66],110:[2,66],111:[2,66]},{8:[2,67],13:[2,67],49:[2,67],54:[2,67],57:[2,67],58:[2,67],61:[2,67],78:[2,67],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[2,67],92:[2,67],93:[2,67],94:[2,67],95:[2,67],96:[2,67],97:[2,67],98:[2,67],99:[2,67],100:[2,67],105:[2,67],110:[2,67],111:[2,67]},{8:[2,68],13:[2,68],49:[2,68],54:[2,68],57:[2,68],58:[2,68],61:[2,68],78:[2,68],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[2,68],92:[2,68],93:[2,68],94:[2,68],95:[2,68],96:[2,68],97:[2,68],98:[2,68],99:[2,68],100:[2,68],105:[2,68],110:[2,68],111:[2,68]},{8:[2,69],13:[2,69],49:[2,69],54:[2,69],57:[2,69],58:[2,69],61:[2,69],78:[2,69],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[2,69],92:[2,69],93:[2,69],94:[2,69],95:[2,69],96:[2,69],97:[2,69],98:[2,69],99:[2,69],100:[2,69],105:[2,69],110:[2,69],111:[2,69]},{8:[2,70],13:[2,70],49:[2,70],54:[2,70],57:[2,70],58:[2,70],61:[2,70],78:[2,70],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[2,70],92:[2,70],93:[2,70],94:[2,70],95:[2,70],96:[2,70],97:[2,70],98:[2,70],99:[2,70],100:[2,70],105:[2,70],110:[2,70],111:[2,70]},{8:[2,71],13:[2,71],49:[2,71],54:[2,71],57:[2,71],58:[2,71],61:[2,71],78:[2,71],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[2,71],98:[2,71],99:[2,71],100:[2,71],105:[2,71],110:[2,71],111:[2,71]},{8:[2,72],13:[2,72],49:[2,72],54:[2,72],57:[2,72],58:[2,72],61:[2,72],78:[2,72],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[2,72],98:[2,72],99:[2,72],100:[2,72],105:[2,72],110:[2,72],111:[2,72]},{8:[2,73],13:[2,73],49:[2,73],54:[2,73],57:[2,73],58:[2,73],61:[2,73],78:[2,73],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[2,73],98:[2,73],99:[2,73],100:[2,73],105:[2,73],110:[2,73],111:[2,73]},{8:[2,74],13:[2,74],49:[2,74],54:[2,74],57:[2,74],58:[2,74],61:[2,74],78:[2,74],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[2,74],98:[2,74],99:[2,74],100:[2,74],105:[2,74],110:[2,74],111:[2,74]},{5:[2,127],8:[2,127],10:[2,127],12:[2,127],16:[2,127],27:[2,127],28:[2,127],31:[2,127],34:[2,127],39:191,48:[2,127],51:[2,127],53:[2,127],55:[2,127],59:[2,127],64:[2,127],65:[2,127],66:[2,127],67:[2,127],68:[2,127],73:[2,127],102:[2,127],103:190,110:[1,43]},{5:[2,30],8:[2,30],10:[2,30],12:[2,30],16:[2,30],27:[2,30],28:[2,30],31:[2,30],34:[2,30],48:[2,30],50:[1,192],51:[2,30],53:[2,30],55:[2,30],59:[2,30],64:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],73:[2,30],102:[2,30]},{5:[2,33],8:[2,33],10:[2,33],12:[2,33],16:[2,33],27:[2,33],28:[2,33],31:[2,33],34:[2,33],48:[2,33],51:[2,33],53:[2,33],55:[2,33],59:[2,33],64:[2,33],65:[2,33],66:[2,33],67:[2,33],68:[2,33],73:[2,33],102:[2,33]},{57:[2,40]},{13:[2,79],49:[2,79],53:[2,34],59:[2,34],62:[2,34],110:[2,79],111:[1,193]},{8:[1,194]},{8:[1,196],61:[2,113],72:195},{8:[2,112],61:[2,112],111:[1,197]},{8:[2,52],49:[1,198],61:[2,52],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],111:[2,52]},{8:[1,200],77:199,78:[2,121]},{8:[2,120],78:[2,120],111:[1,201]},{49:[1,202]},{8:[2,55],13:[2,55],49:[2,55],53:[2,55],54:[2,55],57:[2,55],58:[2,55],59:[2,55],61:[2,55],62:[2,55],78:[2,55],86:[2,55],87:[2,55],88:[2,55],89:[2,55],90:[2,55],91:[2,55],92:[2,55],93:[2,55],94:[2,55],95:[2,55],96:[2,55],97:[2,55],98:[2,55],99:[2,55],100:[2,55],105:[2,55],108:[2,55],110:[2,55],111:[2,55]},{12:[2,124],53:[2,124],54:[2,124],55:[2,124],59:[2,124],64:[2,124],65:[2,124],66:[2,124],67:[2,124],68:[2,124],73:[2,124],84:[2,124],85:[2,124]},{12:[2,132],53:[2,132],55:[2,132],59:[2,132],64:[2,132],65:[2,132],66:[2,132],67:[2,132],68:[2,132],73:[2,132]},{12:[2,134],53:[2,134],55:[2,134],59:[2,134],64:[2,134],65:[2,134],66:[2,134],67:[2,134],68:[2,134],73:[2,134],84:[2,134],85:[2,134]},{53:[2,34],54:[2,106],59:[2,34],62:[2,34],111:[2,106]},{5:[2,77],8:[2,77],10:[2,77],12:[2,77],16:[2,77],27:[2,77],28:[2,77],31:[2,77],34:[2,77],48:[2,77],51:[2,77],53:[2,77],55:[2,77],59:[2,77],64:[2,77],65:[2,77],66:[2,77],67:[2,77],68:[2,77],73:[2,77],102:[2,77]},{5:[2,128],8:[2,128],10:[2,128],12:[2,128],16:[2,128],27:[2,128],28:[2,128],31:[2,128],34:[2,128],48:[2,128],51:[2,128],53:[2,128],55:[2,128],59:[2,128],64:[2,128],65:[2,128],66:[2,128],67:[2,128],68:[2,128],73:[2,128],102:[2,128]},{25:204,48:[1,23],49:[1,203]},{12:[2,130],53:[2,130],55:[2,130],59:[2,130],64:[2,130],65:[2,130],66:[2,130],67:[2,130],68:[2,130],73:[2,130]},{5:[2,2],8:[2,2],10:[2,2],12:[2,2],13:[2,2],16:[2,2],27:[2,2],28:[2,2],31:[2,2],34:[2,2],48:[2,2],49:[2,2],50:[2,2],51:[2,2],53:[2,2],54:[2,2],55:[2,2],57:[2,2],58:[2,2],59:[2,2],61:[2,2],62:[2,2],64:[2,2],65:[2,2],66:[2,2],67:[2,2],68:[2,2],73:[2,2],78:[2,2],86:[2,2],87:[2,2],88:[2,2],89:[2,2],90:[2,2],91:[2,2],92:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],102:[2,2],105:[2,2],108:[2,2],110:[2,2],111:[2,2]},{61:[1,205]},{61:[2,114]},{8:[2,110],12:[2,110],53:[2,110],55:[2,110],59:[2,110],61:[2,110],64:[2,110],65:[2,110],66:[2,110],67:[2,110],68:[2,110],73:[2,110],84:[2,110],85:[2,110]},{12:[1,67],15:25,18:70,23:76,38:206,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{78:[1,207]},{78:[2,122]},{8:[2,118],12:[2,118],78:[2,118]},{12:[1,67],15:25,18:70,23:76,38:208,52:68,53:[1,20],55:[1,26],59:[1,33],64:[1,28],65:[1,29],66:[1,30],67:[1,31],68:[1,32],73:[1,34],83:69,84:[1,71],85:[1,72]},{6:209,7:[1,135]},{5:[2,32],8:[2,32],10:[2,32],12:[2,32],16:[2,32],27:[2,32],28:[2,32],31:[2,32],34:[2,32],48:[2,32],51:[2,32],53:[2,32],55:[2,32],59:[2,32],64:[2,32],65:[2,32],66:[2,32],67:[2,32],68:[2,32],73:[2,32],102:[2,32]},{8:[2,50],13:[2,50],49:[2,50],53:[2,50],54:[2,50],57:[2,50],58:[2,50],59:[2,50],61:[2,50],62:[2,50],78:[2,50],86:[2,50],87:[2,50],88:[2,50],89:[2,50],90:[2,50],91:[2,50],92:[2,50],93:[2,50],94:[2,50],95:[2,50],96:[2,50],97:[2,50],98:[2,50],99:[2,50],100:[2,50],105:[2,50],108:[2,50],110:[2,50],111:[2,50]},{8:[2,53],61:[2,53],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],111:[2,53]},{8:[2,51],13:[2,51],49:[2,51],53:[2,51],54:[2,51],57:[2,51],58:[2,51],59:[2,51],61:[2,51],62:[2,51],78:[2,51],86:[2,51],87:[2,51],88:[2,51],89:[2,51],90:[2,51],91:[2,51],92:[2,51],93:[2,51],94:[2,51],95:[2,51],96:[2,51],97:[2,51],98:[2,51],99:[2,51],100:[2,51],105:[2,51],108:[2,51],110:[2,51],111:[2,51]},{8:[2,54],78:[2,54],86:[1,111],87:[1,112],88:[1,113],89:[1,114],90:[1,115],91:[1,116],92:[1,117],93:[1,118],94:[1,119],95:[1,120],96:[1,121],97:[1,122],98:[1,123],99:[1,124],100:[1,125],111:[2,54]},{5:[2,31],8:[2,31],10:[2,31],12:[2,31],16:[2,31],27:[2,31],28:[2,31],31:[2,31],34:[2,31],48:[2,31],51:[2,31],53:[2,31],55:[2,31],59:[2,31],64:[2,31],65:[2,31],66:[2,31],67:[2,31],68:[2,31],73:[2,31],102:[2,31]}],
defaultActions: {35:[2,1],42:[2,90],48:[2,28],49:[2,29],90:[2,87],91:[2,86],102:[2,17],104:[2,18],106:[2,19],139:[2,84],142:[2,88],176:[2,40],196:[2,114],200:[2,122]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 64 // none, null, void, empty, blank, nada, nothing, zip, nil, missing, undefined, undef? some symbol? () empty parens?
break;
case 11:return 65
break;
case 12:return 66
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 67
break;
case 14:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 55
break;
case 15:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 58
break;
case 16:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 57
break;
case 17:return 59
break;
case 18:return 61
break;
case 19:return 53
break;
case 20:return 54
break;
case 21:return 73
break;
case 22:return 78
break;
case 23:return 111
break;
case 24:return '::'
break;
case 25:return 49
break;
case 26:return 13
break;
case 27:return 108
break;
case 28:return 'BS'
break;
case 29:return 100
break;
case 30:return 62
break;
case 31:return 93
break;
case 32:return 94
break;
case 33:return 95
break;
case 34:return 96
break;
case 35:return 97
break;
case 36:return 98
break;
case 37:return 85
break;
case 38:return 46
break;
case 39:return 47
break;
case 40:return 41
break;
case 41:return 42
break;
case 42:return 43
break;
case 43:return 44
break;
case 44:return 45
break;
case 45:return '->'
break;
case 46:return 105 // future connector
break;
case 47:return 68
break;
case 48:return 86
break;
case 49:return 87
break;
case 50:return 88
break;
case 51:return 89
break;
case 52:return 90
break;
case 53:return 91
break;
case 54:return 92
break;
case 55:return 40
break;
case 56:return '?'
break;
case 57:return 84
break;
case 58:return 14
break;
case 59:return 16
break;
case 60:return 68
break;
case 61:return 10
break;
case 62:return 48
break;
case 63:return 50
break;
case 64:return 110      // failed?
break;
case 65:return 51
break;
case 66:return 102      // when, on, release, send, dispatch, fire?
break;
case 67:return 99
break;
case 68:return 27
break;
case 69:return 28
break;
case 70:return 31
break;
case 71:return 'MUTE'
break;
case 72:return 34    // recovers from an error. recover? rebound?
break;
case 73:return 12
break;
case 74:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\`\"]*")/,/^(?:"[^\`\"]*`)/,/^(?:`[^\`\"]*`)/,/^(?:`[^\`\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:~)/,/^(?:\\)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:is\b)/,/^(?:distinguish\b)/,/^(?:procedure\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:after\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:mute\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}