/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,15],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,24],$V8=[1,25],$V9=[1,21],$Va=[1,27],$Vb=[1,35],$Vc=[1,36],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,37],$Vj=[1,38],$Vk=[1,23],$Vl=[5,8],$Vm=[2,42],$Vn=[48,54,60,64,68,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,114],$Vo=[2,38],$Vp=[1,47],$Vq=[5,8,10,12,16,27,28,31,34,49,52,54,56,60,64,70,71,72,73,74,90,91,108],$Vr=[2,35],$Vs=[2,67],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[12,13,54,56,60,64,70,71,72,73,74,90,91],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[1,88],$VQ=[8,13,48,50,54,55,58,59,60,61,64,65,68,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,114,116],$VR=[8,13,48,50,55,58,59,61,65,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,116],$VS=[8,12,50,54,56,60,61,64,70,71,72,73,74,90,91],$VT=[8,12,65],$VU=[2,96],$VV=[1,112],$VW=[12,54,56,60,64,70,71,72,73,74,90,91],$VX=[12,54,55,56,60,64,70,71,72,73,74,90,91],$VY=[12,54,56,60,64,70,71,72,73,74],$VZ=[1,158],$V_=[8,61],$V$=[8,13,40,41,42,43,44,45,46,47,48,50,54,55,58,59,60,61,64,65,68,84,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,114,116],$V01=[54,60,64,68],$V11=[8,13,48,50,55,58,59,61,65,84,92,93,97,98,99,100,101,102,103,104,105,106,111,116],$V21=[8,13,48,50,55,58,59,61,65,84,97,98,99,100,101,102,103,104,105,106,111,116],$V31=[8,13,48,50,55,58,59,61,65,84,103,104,105,106,111,116],$V41=[8,61,84],$V51=[1,198],$V61=[8,65],$V71=[2,91],$V81=[2,122],$V91=[2,90],$Va1=[2,123];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"statement_list":4,"EOF":5,"block":6,"BEGIN":7,"END":8,"statement":9,"RECEIVE":10,"statement_repetition0":11,"ID":12,";":13,"IS":14,"literal":15,"DISTINGUISH":16,"statement_repetition_plus1":17,"application":18,"statement_option0":19,"response":20,"assignment":21,"edit":22,"lvalue":23,"dispatch":24,"conditional":25,"iteration":26,"SKIP":27,"REPLY":28,"response_repetition0":29,"response_option0":30,"FAIL":31,"response_repetition1":32,"response_option1":33,"REPLACE":34,"response_repetition2":35,"response_option2":36,"assignment_op":37,"expr":38,"contingency":39,"=":40,"+=":41,"-=":42,"*=":43,"/=":44,"%=":45,"++":46,"--":47,"SPLICE":48,"IF":49,":":50,"ELSE":51,"WHILE":52,"value":53,"(":54,")":55,"INTER_BEGIN":56,"dynastring":57,"INTER_END":58,"INTER_MID":59,"[":60,"]":61,"lvalue_option0":62,"lvalue_option1":63,"{":64,"}":65,"lvalue_option2":66,"lvalue_option3":67,".":68,"lvalue_repetition_plus0":69,"NIL":70,"BOOLEAN":71,"NUMBER":72,"STRING":73,"SERVICE":74,"literal_option0":75,"list_items":76,"literal_option1":77,"literal_option2":78,"literal_repetition0":79,"literal_option3":80,"literal_option4":81,"expr_list":82,"dyad_list":83,",":84,"dyad":85,"field":86,"application_repetition0":87,"application_option0":88,"unary_expr":89,"#":90,"NOT":91,"+":92,"-":93,"*":94,"/":95,"%":96,"<":97,">":98,"<=":99,">=":100,"==":101,"!=":102,"AND":103,"OR":104,"IN":105,"SEQ":106,"future":107,"AFTER":108,"dispatch_option0":109,"message":110,"=>":111,"future_repetition0":112,"future_repetition1":113,"~":114,"message_repetition0":115,"CATCH":116,"statement_repetition_plus1_option0":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"END",10:"RECEIVE",12:"ID",13:";",14:"IS",16:"DISTINGUISH",27:"SKIP",28:"REPLY",31:"FAIL",34:"REPLACE",40:"=",41:"+=",42:"-=",43:"*=",44:"/=",45:"%=",46:"++",47:"--",48:"SPLICE",49:"IF",50:":",51:"ELSE",52:"WHILE",54:"(",55:")",56:"INTER_BEGIN",58:"INTER_END",59:"INTER_MID",60:"[",61:"]",64:"{",65:"}",68:".",70:"NIL",71:"BOOLEAN",72:"NUMBER",73:"STRING",74:"SERVICE",84:",",90:"#",91:"NOT",92:"+",93:"-",94:"*",95:"/",96:"%",97:"<",98:">",99:"<=",100:">=",101:"==",102:"!=",103:"AND",104:"OR",105:"IN",106:"SEQ",108:"AFTER",111:"=>",114:"~",116:"CATCH"},
productions_: [0,[3,2],[6,3],[4,1],[4,2],[9,4],[9,4],[9,4],[9,3],[9,2],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,2],[20,3],[20,3],[20,3],[21,4],[21,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[22,2],[22,2],[22,3],[25,4],[25,7],[25,6],[26,4],[53,1],[53,1],[53,3],[53,1],[53,3],[57,1],[57,3],[23,1],[23,4],[23,6],[23,4],[23,6],[23,3],[23,4],[15,1],[15,1],[15,1],[15,1],[15,3],[15,5],[15,6],[76,0],[76,1],[76,1],[76,1],[82,1],[82,3],[83,1],[83,3],[85,3],[86,3],[18,5],[89,1],[89,2],[89,2],[38,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[24,2],[24,2],[24,5],[107,1],[107,4],[107,4],[110,4],[39,3],[11,0],[11,3],[117,0],[117,1],[17,2],[17,3],[19,0],[19,1],[29,0],[29,3],[30,0],[30,1],[32,0],[32,3],[33,0],[33,1],[35,0],[35,3],[36,0],[36,1],[62,0],[62,1],[63,0],[63,1],[66,0],[66,1],[67,0],[67,1],[69,2],[69,3],[75,0],[75,1],[77,0],[77,1],[78,0],[78,1],[79,0],[79,3],[80,0],[80,1],[81,0],[81,1],[87,0],[87,3],[88,0],[88,1],[109,0],[109,1],[112,0],[112,3],[113,0],[113,3],[115,0],[115,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {type: 'procedure', body: $$[$0-1]}; 
break;
case 2: case 37:
this.$ = $$[$0-1];
break;
case 3:
this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 4:
this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 5:
this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 6:
this.$ = {type: 'constant', name: $$[$0-3], value: $$[$0-1]};
break;
case 7:
this.$ = {type: 'range', variants: $$[$0-2].concat($$[$0-1])};
break;
case 8:
this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 16:
this.$ = {type: 'skip'};
break;
case 17: case 18: case 19:
this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 20:
this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 21:
this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 28:
this.$ = {type: 'increment', operand: $$[$0-1]};
break;
case 29:
this.$ = {type: 'decrement', operand: $$[$0-1]};
break;
case 30:
this.$ = {type: 'splice', item: $$[$0-2], list: $$[$0]};
break;
case 31:
this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 32:
this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 33:
this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 34:
this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 39:
this.$ = {type: 'interpolation', left: $$[$0-2], middle: $$[$0-1], right: $$[$0]};
break;
case 41:
this.$ = {type: 'dynastring', left: $$[$0-2], middle: $$[$0-1], right: $$[$0] };
break;
case 42:
this.$ = {type: 'id', name: $$[$0]};
break;
case 43:
this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 44:
this.$ = {type: 'slice', list: $$[$0-5], start: $$[$0-3], end: $$[$0-1]};
break;
case 45:
this.$ = {type: 'extraction', list: $$[$0-3], index: $$[$0-1]};
break;
case 46:
this.$ = {type: 'excision', list: $$[$0-5], start: $$[$0-3], end: $$[$0-1]};
break;
case 47:
this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 48:
this.$ = {type: 'destructure', members: $$[$0-1].concat([$$[$0-2]])};
break;
case 49:
this.$ = {type: 'nil'};
break;
case 50:
this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 51:
this.$ = {type: 'number', val: $$[$0]};
break;
case 52:
this.$ = {type: 'string', val: $$[$0]};
break;
case 53:
this.$ = {type: 'procedure', body: $$[$0]};
break;
case 54:
this.$ = {type: $$[$0-2].type, elements: $$[$0-2].elements};
break;
case 55:
this.$ = {type: 'record', fields: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 56:
this.$ = {type: 'array', elements: []};
break;
case 57:
this.$ = {type: 'map', elements: []};
break;
case 58:
this.$ = {type: 'array', elements: $$[$0]};
break;
case 59:
this.$ = {type: 'map', elements: $$[$0]};
break;
case 60: case 62:
this.$ = [$$[$0]];
break;
case 61: case 63:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 64:
this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};
break;
case 65:
this.$ = {type: 'field', name: $$[$0-2], value: $$[$0]};
break;
case 66:
this.$ = {type: 'application', address: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 68:
this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 69:
this.$ = {type: 'complement', operand: $$[$0]};
break;
case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83:
this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 84:
this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 85:
this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 88:
$$[$0-3].subsequent = $$[$0-1]; $$[$0-3].contingency = $$[$0]; this.$ = $$[$0-3];
break;
case 90:
$$[$0-3].futures = $$[$0-1].concat($$[$0]);
break;
case 92:
this.$ = {type: 'message', address: $$[$0-3], args: $$[$0-1].concat([$$[$0]])};
break;
case 93:
this.$ = $$[$0];
break;
case 94: case 102: case 106: case 110: case 130: case 136: case 142: case 144: case 146:
this.$ = [];
break;
case 95: case 99: case 103: case 107: case 111: case 123: case 131: case 137: case 143: case 145: case 147:
$$[$0-2].push($$[$0-1]);
break;
case 98: case 122:
this.$ = [$$[$0-1]];
break;
}
},
table: [{3:1,4:2,9:3,10:$V0,12:$V1,15:26,16:$V2,18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:$V3,28:$V4,31:$V5,34:$V6,38:20,49:$V7,52:$V8,53:16,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj,107:22,108:$Vk,110:29},{1:[3]},{5:[1,39]},o($Vl,[2,3],{9:3,18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,53:16,38:20,107:22,15:26,89:28,110:29,4:40,10:$V0,12:$V1,16:$V2,27:$V3,28:$V4,31:$V5,34:$V6,49:$V7,52:$V8,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,90:$Vi,91:$Vj,108:$Vk}),{11:41,12:[2,94]},o([13,40,41,42,43,44,45,46,47,48,54,60,64,68,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,114],$Vm,{14:[1,42]}),{12:[1,44],17:43},o($Vn,$Vo,{19:45,39:46,13:[2,100],116:$Vp}),{13:[1,48]},o($Vq,[2,10]),{13:[1,49]},o($Vn,$Vr,{37:51,13:[1,50],40:[1,54],41:[1,55],42:[1,56],43:[1,57],44:[1,58],45:[1,59],46:[1,52],47:[1,53]}),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),{13:[1,60]},o([48,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],$Vs,{54:$Vt,60:$Vu,64:$Vv,68:$Vw,111:$Vx,114:$Vy}),o($Vz,[2,102],{29:67}),o($Vz,[2,106],{32:68}),o($Vz,[2,110],{35:69}),{48:[1,70],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{12:$VP,15:26,18:90,23:86,38:87,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{13:[1,91],39:92,116:$Vp},{12:$VP,15:26,18:90,23:95,53:94,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,107:93,110:29},{12:$VP,15:26,18:90,23:95,38:96,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:97,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},o($VQ,[2,36]),{12:$VP,15:26,18:90,23:95,38:99,53:89,54:$V9,56:$Va,57:98,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},o($VR,[2,70]),o([13,50,116],[2,89],{111:[1,100]}),o($VQ,[2,49]),o($VQ,[2,50]),o($VQ,[2,51]),o($VQ,[2,52]),{50:[1,101]},o($VS,[2,124],{75:102,7:[1,103]}),o($VT,[2,128],{78:104,7:[1,105]}),{12:$VP,15:26,18:90,23:95,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:106,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:107,90:$Vi,91:$Vj},{1:[2,1]},o($Vl,[2,4]),{12:[1,108]},{15:109,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh},{12:[1,110]},{12:$VU,84:$VV,117:111},{13:[1,113]},{13:[2,101]},{50:[1,114]},o($Vq,[2,9]),o($Vq,[2,11]),o($Vq,[2,12]),{12:$VP,15:26,18:116,23:95,38:115,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{13:[2,28]},{13:[2,29]},o($VW,[2,22]),o($VW,[2,23]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),o($VW,[2,27]),o($Vq,[2,16]),o($VX,[2,136],{87:117}),{12:$VP,15:26,18:90,23:95,38:118,50:[2,114],53:89,54:$V9,56:$Va,60:$Vb,62:119,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:120,50:[2,118],53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,66:121,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:[1,122]},o($VY,[2,144],{113:123}),o($VW,[2,146],{115:124}),{12:$VP,13:[2,104],15:26,18:90,23:95,30:125,38:126,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,13:[2,108],15:26,18:90,23:95,33:127,38:128,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,13:[2,112],15:26,18:90,23:95,36:129,38:130,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:131,53:132,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh},{12:$VP,15:26,18:90,23:95,38:133,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:134,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:135,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:136,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:137,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:138,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:139,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:140,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:141,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:142,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:143,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:144,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:145,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:146,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:147,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},o([54,55,60,64,68,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],$Vr,{69:148,84:[1,149]}),{55:[1,150],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},o($VQ,$Vm),o($VR,$Vs,{54:$Vt,60:$Vu,64:$Vv,68:$Vw}),o($VQ,$Vo),o($Vq,[2,86]),o($Vq,[2,87]),{50:[1,151]},{54:$Vt,60:$Vu,64:$Vv,68:$Vw,111:$Vx,114:$Vy},o($VQ,$Vr),{50:[1,152],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{50:[1,153],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{58:[1,154]},{58:[2,40],59:[1,155],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},o($VY,[2,142],{112:156}),{6:157,7:$VZ},o($V_,[2,56],{15:26,89:28,53:89,18:90,23:95,76:159,82:161,83:162,38:163,85:164,12:$VP,50:[1,160],54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,90:$Vi,91:$Vj}),o($VS,[2,125]),o($VT,[2,130],{79:165}),o($VT,[2,129]),o($VR,[2,68]),o($VR,[2,69]),{13:[1,166],84:[1,167]},{13:[1,168]},{12:$VU,13:[1,169],84:$VV,117:170},{12:[2,98]},{12:[2,97]},o($Vq,[2,8]),{6:171,7:$VZ},{13:[1,172],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},o([13,54,60,64,68,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],$Vo,{39:173,116:$Vp}),{12:$VP,15:26,18:90,23:95,38:175,53:89,54:$V9,55:[2,138],56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,88:174,89:28,90:$Vi,91:$Vj},{50:[2,115],61:[1,176],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{50:[1,177]},{50:[2,119],65:[1,178],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{50:[1,179]},o($V$,[2,47]),{12:$VP,15:26,18:90,23:180,53:132,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh},{12:$VP,15:26,18:90,23:95,38:181,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{13:[2,17]},{13:[2,105],84:[1,182],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{13:[2,18]},{13:[2,109],84:[1,183],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{13:[2,19]},{13:[2,113],84:[1,184],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},o($V01,$Vr,{13:[2,30]}),{54:$Vt,60:$Vu,64:$Vv,68:$Vw},o($V11,[2,71],{94:$VC,95:$VD,96:$VE}),o($V11,[2,72],{94:$VC,95:$VD,96:$VE}),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),o($V21,[2,76],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),o($V21,[2,77],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),o($V21,[2,78],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),o($V21,[2,79],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),o($V21,[2,80],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),o($V21,[2,81],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE}),o($V31,[2,82],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK}),o($V31,[2,83],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK}),o($V31,[2,84],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK}),o($V31,[2,85],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK}),{55:[1,185],84:[1,186]},{12:$VP,15:26,18:90,23:187,53:132,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh},o($VQ,[2,37]),{6:188,7:$VZ},{6:189,7:$VZ},{6:190,7:$VZ},o($VQ,[2,39]),{12:$VP,15:26,18:90,23:95,38:99,53:89,54:$V9,56:$Va,57:191,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:192,53:132,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh},o($VQ,[2,53]),{4:193,9:3,10:$V0,12:$V1,15:26,16:$V2,18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:$V3,28:$V4,31:$V5,34:$V6,38:20,49:$V7,52:$V8,53:16,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj,107:22,108:$Vk,110:29},{8:[1,195],61:[2,126],77:194},o($V_,[2,57]),o($V_,[2,58],{84:[1,196]}),o($V_,[2,59],{84:[1,197]}),o($V41,[2,60],{50:$V51,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO}),o($V41,[2,62]),o($V61,[2,132],{80:199,86:200,12:[1,201]}),o($Vq,[2,5]),{12:[2,95]},o($Vq,[2,6]),o($Vq,[2,7]),{12:[2,99]},o([5,8,10,12,13,16,27,28,31,34,49,52,54,56,60,64,70,71,72,73,74,90,91,108],[2,93]),o($Vq,[2,20]),o($Vq,[2,21]),{55:[1,202]},{55:[2,139],84:[1,203],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},o($V$,[2,43]),{12:$VP,15:26,18:90,23:95,38:205,53:89,54:$V9,56:$Va,60:$Vb,61:[2,116],63:204,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},o($V$,[2,45]),{12:$VP,15:26,18:90,23:95,38:207,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,65:[2,120],67:206,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},o($V01,$Vr,{13:$V71,50:$V71,116:$V71,84:[1,208]}),o([13,50,111,116],[2,92],{84:[1,209],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO}),o($Vz,[2,103]),o($Vz,[2,107]),o($Vz,[2,111]),o($V$,[2,48]),{12:$VP,15:26,18:90,23:210,53:132,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh},o($V01,$Vr,{55:$V81,84:$V81}),o($Vq,[2,140],{109:211,39:212,116:$Vp}),o($Vq,[2,31],{51:[1,213]}),o($Vq,[2,34]),{58:[2,41]},o($V01,$Vr,{13:$V91,50:$V91,116:$V91,84:[1,214]}),{8:[1,215]},{61:[1,216]},{61:[2,127]},{12:$VP,15:26,18:90,23:95,38:217,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:219,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,85:218,89:28,90:$Vi,91:$Vj},{12:$VP,15:26,18:90,23:95,38:220,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},{8:[1,222],65:[2,134],81:221},o($V61,[2,133],{84:[1,223]}),{50:[1,224]},o($VQ,[2,66]),o($VX,[2,137]),{61:[1,225]},{61:[2,117],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},{65:[1,226]},{65:[2,121],92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},o($VY,[2,145]),o($VW,[2,147]),o($V01,$Vr,{55:$Va1,84:$Va1}),o($Vq,[2,88]),o($Vq,[2,141]),{25:228,49:$V7,50:[1,227]},o($VY,[2,143]),o([5,8,10,12,13,16,27,28,31,34,48,49,50,51,52,54,55,56,58,59,60,61,64,65,68,70,71,72,73,74,84,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,111,114,116],[2,2]),o($VQ,[2,54]),o($V41,[2,61],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO}),o($V41,[2,63]),{50:$V51,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO},o($V41,[2,64],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO}),{65:[1,229]},{65:[2,135]},o($VT,[2,131]),{12:$VP,15:26,18:90,23:95,38:230,53:89,54:$V9,56:$Va,60:$Vb,64:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:$Vh,89:28,90:$Vi,91:$Vj},o($V$,[2,44]),o($V$,[2,46]),{6:231,7:$VZ},o($Vq,[2,33]),o($VQ,[2,55]),o([8,65,84],[2,65],{92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN,106:$VO}),o($Vq,[2,32])],
defaultActions: {39:[2,1],46:[2,101],52:[2,28],53:[2,29],111:[2,98],112:[2,97],125:[2,17],127:[2,18],129:[2,19],167:[2,95],170:[2,99],191:[2,41],195:[2,127],222:[2,135]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 70 // none, null, void, empty, blank, nada, nothing, zip, nil, missing, undefined, undef? some symbol? () empty parens?
break;
case 11:return 71
break;
case 12:return 72
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 73
break;
case 14:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 56
break;
case 15:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 59
break;
case 16:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 58
break;
case 17:return 60
break;
case 18:return 61
break;
case 19:return 54
break;
case 20:return 55
break;
case 21:return 64
break;
case 22:return 65
break;
case 23:return 84
break;
case 24:return '::'
break;
case 25:return 50
break;
case 26:return 13
break;
case 27:return 114
break;
case 28:return 'BS'
break;
case 29:return 106
break;
case 30:return 68
break;
case 31:return 99
break;
case 32:return 100
break;
case 33:return 101
break;
case 34:return 102
break;
case 35:return 103
break;
case 36:return 104
break;
case 37:return 91
break;
case 38:return 46
break;
case 39:return 47
break;
case 40:return 41
break;
case 41:return 42
break;
case 42:return 43
break;
case 43:return 44
break;
case 44:return 45
break;
case 45:return 48
break;
case 46:return 111 // future connector
break;
case 47:return 74
break;
case 48:return 92
break;
case 49:return 93
break;
case 50:return 94
break;
case 51:return 95
break;
case 52:return 96
break;
case 53:return 97
break;
case 54:return 98
break;
case 55:return 40
break;
case 56:return '?'
break;
case 57:return 90
break;
case 58:return 14
break;
case 59:return 16
break;
case 60:return 74
break;
case 61:return 10
break;
case 62:return 49
break;
case 63:return 51
break;
case 64:return 116      // failed?
break;
case 65:return 52
break;
case 66:return 108
break;
case 67:return 105
break;
case 68:return 27
break;
case 69:return 28
break;
case 70:return 31
break;
case 71:return 'MUTE'
break;
case 72:return 34    // recovers from an error. recover? rebound?
break;
case 73:return 12
break;
case 74:return 'INVALID'
break;
}
},
rules: [/^(?:\s*\/\/.*)/,/^(?:\s*\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\`\"]*")/,/^(?:"[^\`\"]*`)/,/^(?:`[^\`\"]*`)/,/^(?:`[^\`\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:~)/,/^(?:\\)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:is\b)/,/^(?:distinguish\b)/,/^(?:service\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:after\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:mute\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}