/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,16,21,32,33,36,39,54,57,59,61,65,69,75,76,77,78,79,95,96,113],$V1=[1,8],$V2=[1,7],$V3=[1,9],$V4=[1,18],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,27],$V9=[1,28],$Va=[1,24],$Vb=[1,30],$Vc=[1,38],$Vd=[1,39],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,40],$Vk=[1,41],$Vl=[1,26],$Vm=[6,14],$Vn=[2,43],$Vo=[53,59,65,69,73,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,116,119],$Vp=[2,39],$Vq=[1,51],$Vr=[6,10,14,16,21,32,33,36,39,54,57,59,61,65,69,75,76,77,78,79,95,96,113],$Vs=[2,36],$Vt=[2,68],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[10,18,59,61,65,69,75,76,77,78,79,95,96],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,92],$VR=[14,18,53,55,59,60,63,64,65,66,69,70,73,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,116,119,121],$VS=[14,18,53,55,60,63,64,66,70,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,116,121],$VT=[10,14,55,59,61,65,66,69,75,76,77,78,79,95,96],$VU=[10,14,70],$VV=[2,103],$VW=[1,117],$VX=[10,59,61,65,69,75,76,77,78,79,95,96],$VY=[10,59,60,61,65,69,75,76,77,78,79,95,96],$VZ=[10,59,61,65,69,75,76,77,78,79],$V_=[1,163],$V$=[14,66],$V01=[14,18,45,46,47,48,49,50,51,52,53,55,59,60,63,64,65,66,69,70,73,89,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,116,119,121],$V11=[59,65,69,73],$V21=[14,18,53,55,60,63,64,66,70,89,97,98,102,103,104,105,106,107,108,109,110,111,116,121],$V31=[14,18,53,55,60,63,64,66,70,89,102,103,104,105,106,107,108,109,110,111,116,121],$V41=[14,18,53,55,60,63,64,66,70,89,108,109,110,111,116,121],$V51=[14,66,89],$V61=[1,206],$V71=[14,70],$V81=[2,92],$V91=[2,129],$Va1=[2,91],$Vb1=[2,130];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_option0":4,"statement_list":5,"EOF":6,"deps":7,"REQUIRES":8,"deps_repetition0":9,"ID":10,"deps_option0":11,"block":12,"BEGIN":13,"END":14,"statement":15,"RECEIVE":16,"statement_repetition0":17,";":18,"IS":19,"literal":20,"DISTINGUISH":21,"statement_repetition_plus1":22,"application":23,"statement_option0":24,"response":25,"assignment":26,"edit":27,"lvalue":28,"dispatch":29,"conditional":30,"iteration":31,"SKIP":32,"REPLY":33,"response_repetition0":34,"response_option0":35,"FAIL":36,"response_repetition1":37,"response_option1":38,"REPLACE":39,"response_repetition2":40,"response_option2":41,"assignment_op":42,"expr":43,"contingency":44,"=":45,"+=":46,"-=":47,"*=":48,"/=":49,"%=":50,"++":51,"--":52,"SPLICE":53,"IF":54,":":55,"ELSE":56,"WHILE":57,"value":58,"(":59,")":60,"INTER_BEGIN":61,"dynastring":62,"INTER_END":63,"INTER_MID":64,"[":65,"]":66,"lvalue_option0":67,"lvalue_option1":68,"{":69,"}":70,"lvalue_option2":71,"lvalue_option3":72,".":73,"lvalue_repetition_plus0":74,"NIL":75,"BOOLEAN":76,"NUMBER":77,"STRING":78,"SERVICE":79,"literal_option0":80,"list_items":81,"literal_option1":82,"literal_option2":83,"literal_repetition0":84,"literal_option3":85,"literal_option4":86,"expr_list":87,"dyad_list":88,",":89,"dyad":90,"field":91,"application_repetition0":92,"application_option0":93,"unary_expr":94,"#":95,"NOT":96,"+":97,"-":98,"*":99,"/":100,"%":101,"<":102,">":103,"<=":104,">=":105,"==":106,"!=":107,"AND":108,"OR":109,"IN":110,"SEQ":111,"future":112,"AFTER":113,"dispatch_option0":114,"message":115,"=>":116,"future_repetition0":117,"future_repetition1":118,"~":119,"message_repetition0":120,"CATCH":121,"statement_repetition_plus1_option0":122,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"REQUIRES",10:"ID",13:"BEGIN",14:"END",16:"RECEIVE",18:";",19:"IS",21:"DISTINGUISH",32:"SKIP",33:"REPLY",36:"FAIL",39:"REPLACE",45:"=",46:"+=",47:"-=",48:"*=",49:"/=",50:"%=",51:"++",52:"--",53:"SPLICE",54:"IF",55:":",56:"ELSE",57:"WHILE",59:"(",60:")",61:"INTER_BEGIN",63:"INTER_END",64:"INTER_MID",65:"[",66:"]",69:"{",70:"}",73:".",75:"NIL",76:"BOOLEAN",77:"NUMBER",78:"STRING",79:"SERVICE",89:",",95:"#",96:"NOT",97:"+",98:"-",99:"*",100:"/",101:"%",102:"<",103:">",104:"<=",105:">=",106:"==",107:"!=",108:"AND",109:"OR",110:"IN",111:"SEQ",113:"AFTER",116:"=>",119:"~",121:"CATCH"},
productions_: [0,[3,3],[7,4],[12,3],[5,1],[5,2],[15,4],[15,4],[15,4],[15,3],[15,2],[15,1],[15,2],[15,2],[15,1],[15,1],[15,1],[15,2],[25,3],[25,3],[25,3],[26,4],[26,4],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[27,2],[27,2],[27,3],[30,4],[30,7],[30,6],[31,4],[58,1],[58,1],[58,3],[58,1],[58,3],[62,1],[62,3],[28,1],[28,4],[28,6],[28,4],[28,6],[28,3],[28,4],[20,1],[20,1],[20,1],[20,1],[20,3],[20,5],[20,6],[81,0],[81,1],[81,1],[81,1],[87,1],[87,3],[88,1],[88,3],[90,3],[91,3],[23,5],[94,1],[94,2],[94,2],[43,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[29,2],[29,2],[29,5],[112,1],[112,4],[112,4],[115,4],[44,3],[4,0],[4,1],[9,0],[9,3],[11,0],[11,1],[17,0],[17,3],[122,0],[122,1],[22,2],[22,3],[24,0],[24,1],[34,0],[34,3],[35,0],[35,1],[37,0],[37,3],[38,0],[38,1],[40,0],[40,3],[41,0],[41,1],[67,0],[67,1],[68,0],[68,1],[71,0],[71,1],[72,0],[72,1],[74,2],[74,3],[80,0],[80,1],[82,0],[82,1],[83,0],[83,1],[84,0],[84,3],[85,0],[85,1],[86,0],[86,1],[92,0],[92,3],[93,0],[93,1],[114,0],[114,1],[117,0],[117,3],[118,0],[118,3],[120,0],[120,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {type: 'module', deps: $$[$0-2], service: {type: 'procedure', body: $$[$0-1]}}; 
break;
case 2:
this.$ = $$[$0-2].concat($$[$0-1]);;
break;
case 3: case 38:
this.$ = $$[$0-1];
break;
case 4:
this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 5:
this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 6:
this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 7:
this.$ = {type: 'constant', name: $$[$0-3], value: $$[$0-1]};
break;
case 8:
this.$ = {type: 'range', variants: $$[$0-2].concat($$[$0-1])};
break;
case 9:
this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 17:
this.$ = {type: 'skip'};
break;
case 18: case 19: case 20:
this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 21:
this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 22:
this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 29:
this.$ = {type: 'increment', operand: $$[$0-1]};
break;
case 30:
this.$ = {type: 'decrement', operand: $$[$0-1]};
break;
case 31:
this.$ = {type: 'splice', item: $$[$0-2], list: $$[$0]};
break;
case 32:
this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 33:
this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 34:
this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 35:
this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 40:
this.$ = {type: 'interpolation', left: $$[$0-2], middle: $$[$0-1], right: $$[$0]};
break;
case 42:
this.$ = {type: 'dynastring', left: $$[$0-2], middle: $$[$0-1], right: $$[$0] };
break;
case 43:
this.$ = {type: 'id', name: $$[$0]};
break;
case 44:
this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 45:
this.$ = {type: 'slice', list: $$[$0-5], start: $$[$0-3], end: $$[$0-1]};
break;
case 46:
this.$ = {type: 'extraction', list: $$[$0-3], index: $$[$0-1]};
break;
case 47:
this.$ = {type: 'excision', list: $$[$0-5], start: $$[$0-3], end: $$[$0-1]};
break;
case 48:
this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 49:
this.$ = {type: 'destructure', members: $$[$0-1].concat([$$[$0-2]])};
break;
case 50:
this.$ = {type: 'nil'};
break;
case 51:
this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 52:
this.$ = {type: 'number', val: $$[$0]};
break;
case 53:
this.$ = {type: 'string', val: $$[$0]};
break;
case 54:
this.$ = {type: 'procedure', body: $$[$0]};
break;
case 55:
this.$ = {type: $$[$0-2].type, elements: $$[$0-2].elements};
break;
case 56:
this.$ = {type: 'record', fields: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 57:
this.$ = {type: 'array', elements: []};
break;
case 58:
this.$ = {type: 'map', elements: []};
break;
case 59:
this.$ = {type: 'array', elements: $$[$0]};
break;
case 60:
this.$ = {type: 'map', elements: $$[$0]};
break;
case 61: case 63:
this.$ = [$$[$0]];
break;
case 62: case 64:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 65:
this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};
break;
case 66:
this.$ = {type: 'field', name: $$[$0-2], value: $$[$0]};
break;
case 67:
this.$ = {type: 'application', address: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 69:
this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 70:
this.$ = {type: 'complement', operand: $$[$0]};
break;
case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84:
this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 85:
this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 86:
this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 89:
$$[$0-3].subsequent = $$[$0-1]; $$[$0-3].contingency = $$[$0]; this.$ = $$[$0-3];
break;
case 91:
$$[$0-3].futures = $$[$0-1].concat($$[$0]);
break;
case 93:
this.$ = {type: 'message', address: $$[$0-3], args: $$[$0-1].concat([$$[$0]])};
break;
case 94:
this.$ = $$[$0];
break;
case 97: case 101: case 109: case 113: case 117: case 137: case 143: case 149: case 151: case 153:
this.$ = [];
break;
case 98: case 102: case 106: case 110: case 114: case 118: case 130: case 138: case 144: case 150: case 152: case 154:
$$[$0-2].push($$[$0-1]);
break;
case 105: case 129:
this.$ = [$$[$0-1]];
break;
}
},
table: [o($V0,[2,95],{3:1,4:2,7:3,8:[1,4]}),{1:[3]},{5:5,10:$V1,15:6,16:$V2,20:29,21:$V3,23:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:$V4,33:$V5,36:$V6,39:$V7,43:23,54:$V8,57:$V9,58:19,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk,112:25,113:$Vl,115:32},o($V0,[2,96]),{9:42,10:[2,97]},{6:[1,43]},o($Vm,[2,4],{15:6,23:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,58:19,43:23,112:25,20:29,94:31,115:32,5:44,10:$V1,16:$V2,21:$V3,32:$V4,33:$V5,36:$V6,39:$V7,54:$V8,57:$V9,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,95:$Vj,96:$Vk,113:$Vl}),{10:[2,101],17:45},o([18,45,46,47,48,49,50,51,52,53,59,65,69,73,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,116,119],$Vn,{19:[1,46]}),{10:[1,48],22:47},o($Vo,$Vp,{24:49,44:50,18:[2,107],121:$Vq}),{18:[1,52]},o($Vr,[2,11]),{18:[1,53]},o($Vo,$Vs,{42:55,18:[1,54],45:[1,58],46:[1,59],47:[1,60],48:[1,61],49:[1,62],50:[1,63],51:[1,56],52:[1,57]}),o($Vr,[2,14]),o($Vr,[2,15]),o($Vr,[2,16]),{18:[1,64]},o([53,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$Vt,{59:$Vu,65:$Vv,69:$Vw,73:$Vx,116:$Vy,119:$Vz}),o($VA,[2,109],{34:71}),o($VA,[2,113],{37:72}),o($VA,[2,117],{40:73}),{53:[1,74],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{10:$VQ,20:29,23:94,28:90,43:91,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{18:[1,95],44:96,121:$Vq},{10:$VQ,20:29,23:94,28:99,58:98,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,112:97,115:32},{10:$VQ,20:29,23:94,28:99,43:100,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:101,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},o($VR,[2,37]),{10:$VQ,20:29,23:94,28:99,43:103,58:93,59:$Va,61:$Vb,62:102,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},o($VS,[2,71]),o([18,55,121],[2,90],{116:[1,104]}),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),{55:[1,105]},o($VT,[2,131],{80:106,13:[1,107]}),o($VU,[2,135],{83:108,13:[1,109]}),{10:$VQ,20:29,23:94,28:99,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:110,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:111,95:$Vj,96:$Vk},{10:[1,112]},{1:[2,1]},o($Vm,[2,5]),{10:[1,113]},{20:114,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi},{10:[1,115]},{10:$VV,89:$VW,122:116},{18:[1,118]},{18:[2,108]},{55:[1,119]},o($Vr,[2,10]),o($Vr,[2,12]),o($Vr,[2,13]),{10:$VQ,20:29,23:121,28:99,43:120,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{18:[2,29]},{18:[2,30]},o($VX,[2,23]),o($VX,[2,24]),o($VX,[2,25]),o($VX,[2,26]),o($VX,[2,27]),o($VX,[2,28]),o($Vr,[2,17]),o($VY,[2,143],{92:122}),{10:$VQ,20:29,23:94,28:99,43:123,55:[2,121],58:93,59:$Va,61:$Vb,65:$Vc,67:124,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:125,55:[2,125],58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,71:126,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:[1,127]},o($VZ,[2,151],{118:128}),o($VX,[2,153],{120:129}),{10:$VQ,18:[2,111],20:29,23:94,28:99,35:130,43:131,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,18:[2,115],20:29,23:94,28:99,38:132,43:133,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,18:[2,119],20:29,23:94,28:99,41:134,43:135,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:136,58:137,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi},{10:$VQ,20:29,23:94,28:99,43:138,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:139,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:140,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:141,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:142,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:143,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:144,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:145,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:146,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:147,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:148,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:149,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:150,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:151,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:152,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},o([59,60,65,69,73,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$Vs,{74:153,89:[1,154]}),{60:[1,155],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},o($VR,$Vn),o($VS,$Vt,{59:$Vu,65:$Vv,69:$Vw,73:$Vx}),o($VR,$Vp),o($Vr,[2,87]),o($Vr,[2,88]),{55:[1,156]},{59:$Vu,65:$Vv,69:$Vw,73:$Vx,116:$Vy,119:$Vz},o($VR,$Vs),{55:[1,157],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{55:[1,158],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{63:[1,159]},{63:[2,41],64:[1,160],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},o($VZ,[2,149],{117:161}),{12:162,13:$V_},o($V$,[2,57],{20:29,94:31,58:93,23:94,28:99,81:164,87:166,88:167,43:168,90:169,10:$VQ,55:[1,165],59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,95:$Vj,96:$Vk}),o($VT,[2,132]),o($VU,[2,137],{84:170}),o($VU,[2,136]),o($VS,[2,69]),o($VS,[2,70]),o($V0,[2,99],{11:171,18:[1,173],89:[1,172]}),{18:[1,174],89:[1,175]},{18:[1,176]},{10:$VV,18:[1,177],89:$VW,122:178},{10:[2,105]},{10:[2,104]},o($Vr,[2,9]),{12:179,13:$V_},{18:[1,180],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},o([18,59,65,69,73,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],$Vp,{44:181,121:$Vq}),{10:$VQ,20:29,23:94,28:99,43:183,58:93,59:$Va,60:[2,145],61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,93:182,94:31,95:$Vj,96:$Vk},{55:[2,122],66:[1,184],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{55:[1,185]},{55:[2,126],70:[1,186],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{55:[1,187]},o($V01,[2,48]),{10:$VQ,20:29,23:94,28:188,58:137,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi},{10:$VQ,20:29,23:94,28:99,43:189,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{18:[2,18]},{18:[2,112],89:[1,190],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{18:[2,19]},{18:[2,116],89:[1,191],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{18:[2,20]},{18:[2,120],89:[1,192],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},o($V11,$Vs,{18:[2,31]}),{59:$Vu,65:$Vv,69:$Vw,73:$Vx},o($V21,[2,72],{99:$VD,100:$VE,101:$VF}),o($V21,[2,73],{99:$VD,100:$VE,101:$VF}),o($VS,[2,74]),o($VS,[2,75]),o($VS,[2,76]),o($V31,[2,77],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF}),o($V31,[2,78],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF}),o($V31,[2,79],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF}),o($V31,[2,80],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF}),o($V31,[2,81],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF}),o($V31,[2,82],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF}),o($V41,[2,83],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL}),o($V41,[2,84],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL}),o($V41,[2,85],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL}),o($V41,[2,86],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL}),{60:[1,193],89:[1,194]},{10:$VQ,20:29,23:94,28:195,58:137,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi},o($VR,[2,38]),{12:196,13:$V_},{12:197,13:$V_},{12:198,13:$V_},o($VR,[2,40]),{10:$VQ,20:29,23:94,28:99,43:103,58:93,59:$Va,61:$Vb,62:199,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:200,58:137,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi},o($VR,[2,54]),{5:201,10:$V1,15:6,16:$V2,20:29,21:$V3,23:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:$V4,33:$V5,36:$V6,39:$V7,43:23,54:$V8,57:$V9,58:19,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk,112:25,113:$Vl,115:32},{14:[1,203],66:[2,133],82:202},o($V$,[2,58]),o($V$,[2,59],{89:[1,204]}),o($V$,[2,60],{89:[1,205]}),o($V51,[2,61],{55:$V61,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP}),o($V51,[2,63]),o($V71,[2,139],{85:207,91:208,10:[1,209]}),o($V0,[2,2]),{10:[2,98]},o($V0,[2,100]),o($Vr,[2,6]),{10:[2,102]},o($Vr,[2,7]),o($Vr,[2,8]),{10:[2,106]},o([6,10,14,16,18,21,32,33,36,39,54,57,59,61,65,69,75,76,77,78,79,95,96,113],[2,94]),o($Vr,[2,21]),o($Vr,[2,22]),{60:[1,210]},{60:[2,146],89:[1,211],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},o($V01,[2,44]),{10:$VQ,20:29,23:94,28:99,43:213,58:93,59:$Va,61:$Vb,65:$Vc,66:[2,123],68:212,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},o($V01,[2,46]),{10:$VQ,20:29,23:94,28:99,43:215,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,70:[2,127],72:214,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},o($V11,$Vs,{18:$V81,55:$V81,121:$V81,89:[1,216]}),o([18,55,116,121],[2,93],{89:[1,217],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP}),o($VA,[2,110]),o($VA,[2,114]),o($VA,[2,118]),o($V01,[2,49]),{10:$VQ,20:29,23:94,28:218,58:137,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi},o($V11,$Vs,{60:$V91,89:$V91}),o($Vr,[2,147],{114:219,44:220,121:$Vq}),o($Vr,[2,32],{56:[1,221]}),o($Vr,[2,35]),{63:[2,42]},o($V11,$Vs,{18:$Va1,55:$Va1,121:$Va1,89:[1,222]}),{14:[1,223]},{66:[1,224]},{66:[2,134]},{10:$VQ,20:29,23:94,28:99,43:225,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:227,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,90:226,94:31,95:$Vj,96:$Vk},{10:$VQ,20:29,23:94,28:99,43:228,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},{14:[1,230],70:[2,141],86:229},o($V71,[2,140],{89:[1,231]}),{55:[1,232]},o($VR,[2,67]),o($VY,[2,144]),{66:[1,233]},{66:[2,124],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},{70:[1,234]},{70:[2,128],97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},o($VZ,[2,152]),o($VX,[2,154]),o($V11,$Vs,{60:$Vb1,89:$Vb1}),o($Vr,[2,89]),o($Vr,[2,148]),{30:236,54:$V8,55:[1,235]},o($VZ,[2,150]),o([6,10,14,16,18,21,32,33,36,39,53,54,55,56,57,59,60,61,63,64,65,66,69,70,73,75,76,77,78,79,89,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,121],[2,3]),o($VR,[2,55]),o($V51,[2,62],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP}),o($V51,[2,64]),{55:$V61,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP},o($V51,[2,65],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP}),{70:[1,237]},{70:[2,142]},o($VU,[2,138]),{10:$VQ,20:29,23:94,28:99,43:238,58:93,59:$Va,61:$Vb,65:$Vc,69:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh,79:$Vi,94:31,95:$Vj,96:$Vk},o($V01,[2,45]),o($V01,[2,47]),{12:239,13:$V_},o($Vr,[2,34]),o($VR,[2,56]),o([14,70,89],[2,66],{97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP}),o($Vr,[2,33])],
defaultActions: {43:[2,1],50:[2,108],56:[2,29],57:[2,30],116:[2,105],117:[2,104],130:[2,18],132:[2,19],134:[2,20],172:[2,98],175:[2,102],178:[2,106],199:[2,42],203:[2,134],230:[2,142]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 13;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 75 // none, null, void, empty, blank, nada, nothing, zip, nil, missing, undefined, undef? some symbol? () empty parens?
break;
case 11:return 76
break;
case 12:return 77
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 78
break;
case 14:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 61
break;
case 15:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 64
break;
case 16:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 63
break;
case 17:return 65
break;
case 18:return 66
break;
case 19:return 59
break;
case 20:return 60
break;
case 21:return 69
break;
case 22:return 70
break;
case 23:return 89
break;
case 24:return '::'
break;
case 25:return 55
break;
case 26:return 18
break;
case 27:return 119
break;
case 28:return 'BS'
break;
case 29:return 111
break;
case 30:return 73
break;
case 31:return 104
break;
case 32:return 105
break;
case 33:return 106
break;
case 34:return 107
break;
case 35:return 108
break;
case 36:return 109
break;
case 37:return 96
break;
case 38:return 51
break;
case 39:return 52
break;
case 40:return 46
break;
case 41:return 47
break;
case 42:return 48
break;
case 43:return 49
break;
case 44:return 50
break;
case 45:return 53
break;
case 46:return 116 // future connector
break;
case 47:return 79
break;
case 48:return 97
break;
case 49:return 98
break;
case 50:return 99
break;
case 51:return 100
break;
case 52:return 101
break;
case 53:return 102
break;
case 54:return 103
break;
case 55:return 45
break;
case 56:return '?'
break;
case 57:return 95
break;
case 58:return 19
break;
case 59:return 21
break;
case 60:return 79
break;
case 61:return 16
break;
case 62:return 54
break;
case 63:return 56
break;
case 64:return 121      // failed?
break;
case 65:return 57
break;
case 66:return 113
break;
case 67:return 110
break;
case 68:return 32
break;
case 69:return 33
break;
case 70:return 36
break;
case 71:return 8
break;
case 72:return 39    // recovers from an error. recover? rebound?
break;
case 73:return 10
break;
case 74:return 'INVALID'
break;
}
},
rules: [/^(?:\s*\/\/.*)/,/^(?:\s*\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\`\"]*")/,/^(?:"[^\`\"]*`)/,/^(?:`[^\`\"]*`)/,/^(?:`[^\`\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:~)/,/^(?:\\)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:is\b)/,/^(?:distinguish\b)/,/^(?:service\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:after\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:requires\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}