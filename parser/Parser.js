/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statement_list":4,"EOF":5,"block":6,"BEGIN":7,"END":8,"statement":9,"RECEIVE":10,"statement_repetition0":11,"ID":12,";":13,"QUALITY":14,"statement_repetition1":15,"application":16,"statement_option0":17,"response":18,"assignment":19,"step":20,"lvalue":21,"dispatch":22,"conditional":23,"iteration":24,"IS":25,":":26,"COMPLETE":27,"statement_repetition2":28,"expr":29,"SKIP":30,"STOP":31,"REPLY":32,"response_repetition0":33,"response_option0":34,"FAIL":35,"response_repetition1":36,"response_option1":37,"REPLACE":38,"response_repetition2":39,"response_option2":40,"assignment_op":41,"contingency":42,"=":43,"+=":44,"-=":45,"*=":46,"/=":47,"%=":48,"++":49,"--":50,"IF":51,"ELSE":52,"WHILE":53,"value":54,"literal":55,"(":56,")":57,"[":58,"lvalue_option0":59,"]":60,".":61,"lvalue_repetition_plus0":62,"NIL":63,"<":64,">":65,"BOOLEAN":66,"NUMBER":67,"STRING":68,"literal_repetition0":69,"literal_option0":70,"{":71,"literal_repetition1":72,"literal_repetition2":73,"literal_option1":74,"literal_repetition3":75,"}":76,"::":77,"dyad":78,"application_repetition0":79,"application_option0":80,"unary_expr":81,"#":82,"NOT":83,"+":84,"-":85,"*":86,"/":87,"%":88,"<=":89,">=":90,"==":91,"!=":92,"AND":93,"OR":94,"IN":95,"SEQ":96,"future":97,"AFTER":98,"dispatch_option0":99,"message":100,"=>":101,"future_repetition0":102,"future_repetition1":103,"~":104,"message_repetition0":105,"CATCH":106,",":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"END",10:"RECEIVE",12:"ID",13:";",14:"QUALITY",25:"IS",26:":",27:"COMPLETE",30:"SKIP",31:"STOP",32:"REPLY",35:"FAIL",38:"REPLACE",43:"=",44:"+=",45:"-=",46:"*=",47:"/=",48:"%=",49:"++",50:"--",51:"IF",52:"ELSE",53:"WHILE",56:"(",57:")",58:"[",60:"]",61:".",63:"NIL",64:"<",65:">",66:"BOOLEAN",67:"NUMBER",68:"STRING",71:"{",76:"}",77:"::",82:"#",83:"NOT",84:"+",85:"-",86:"*",87:"/",88:"%",89:"<=",90:">=",91:"==",92:"!=",93:"AND",94:"OR",95:"IN",96:"SEQ",98:"AFTER",101:"=>",104:"~",106:"CATCH",107:","},
productions_: [0,[3,2],[6,3],[4,1],[4,2],[9,4],[9,5],[9,3],[9,2],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,4],[9,4],[9,2],[9,2],[18,3],[18,3],[18,3],[19,4],[19,4],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[20,2],[20,2],[23,4],[23,7],[23,6],[24,4],[54,1],[54,1],[54,3],[54,1],[21,1],[21,4],[21,3],[21,4],[55,1],[55,3],[55,1],[55,1],[55,1],[55,4],[55,6],[55,2],[78,1],[78,3],[16,5],[81,1],[81,2],[81,2],[29,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[22,2],[22,2],[22,5],[97,1],[97,4],[97,4],[100,4],[42,3],[11,0],[11,3],[15,0],[15,3],[17,0],[17,1],[28,0],[28,3],[33,0],[33,3],[34,0],[34,1],[36,0],[36,3],[37,0],[37,1],[39,0],[39,3],[40,0],[40,1],[59,0],[59,1],[62,2],[62,3],[69,0],[69,3],[70,0],[70,1],[72,0],[72,2],[73,0],[73,3],[74,0],[74,1],[75,0],[75,2],[79,0],[79,3],[80,0],[80,1],[99,0],[99,1],[102,0],[102,3],[103,0],[103,3],[105,0],[105,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'procedure', body: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 4:this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 5:this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 6:this.$ = {type: 'quality', name: $$[$0-3], symbols: $$[$0-2].concat($$[$0-1])};
break;
case 7:this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 15:this.$ = {type: 'assign', op: '=', left: {type: 'id', name: $$[$0-3]}, right: {type: 'procedure', body: $$[$0]}};
break;
case 16:this.$ = {type: 'complete', futures: $$[$0-2].concat([$$[$0-1]])};
break;
case 17:this.$ = {type: 'skip'};
break;
case 18:this.$ = {type: 'stop'};
break;
case 19:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 20:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 21:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 22:this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 23:this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 30:this.$ = {type: 'increment', op: $$[$0], left: $$[$0-1]};
break;
case 31:this.$ = {type: 'decrement', op: $$[$0], left: $$[$0-1]};
break;
case 32:this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 33:this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 34:this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 35:this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 38:this.$ = $$[$0-1];
break;
case 40:this.$ = {type: 'id', name: $$[$0]};
break;
case 41:this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 42:this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 43:this.$ = {type: 'destructure', members: $$[$0-1].concat([$$[$0-2]])};
break;
case 44:this.$ = {type: 'nil'};
break;
case 45:this.$ = {type: 'symbol', name: $$[$0-1]};
break;
case 46:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 47:this.$ = {type: 'number', val: $$[$0]};
break;
case 48:this.$ = {type: 'string', val: $$[$0]};
break;
case 49:this.$ = {type: 'list', elements: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 50:this.$ = {type: 'set', members: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 52:this.$ = {type: 'dyad', key: $$[$0], value: {type: 'boolean', val: true}};;
break;
case 53:this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};;
break;
case 54:this.$ = {type: 'application', address: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 56:this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 57:this.$ = {type: 'complement', operand: $$[$0]};
break;
case 59:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 60:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 61:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 62:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 63:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 64:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 65:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 66:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 67:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 68:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 69:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 70:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 71:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 72:this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 73:this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 76:this.$ = {type: 'message', address: $$[$0-3].address, args: $$[$0-3].args, subsequent: $$[$0-1], contingency: $$[$0]};
break;
case 78:this.$ = $$[$0-2];
break;
case 80:this.$ = {type: 'message', address: $$[$0-3], args: $$[$0-1].concat([$$[$0]])};
break;
case 81:this.$ = $$[$0];
break;
case 82:this.$ = [];
break;
case 83:$$[$0-2].push($$[$0-1]);
break;
case 84:this.$ = [];
break;
case 85:$$[$0-2].push($$[$0-1]);
break;
case 88:this.$ = [];
break;
case 89:$$[$0-2].push($$[$0-1]);
break;
case 90:this.$ = [];
break;
case 91:$$[$0-2].push($$[$0-1]);
break;
case 94:this.$ = [];
break;
case 95:$$[$0-2].push($$[$0-1]);
break;
case 98:this.$ = [];
break;
case 99:$$[$0-2].push($$[$0-1]);
break;
case 104:this.$ = [$$[$0-1]];
break;
case 105:$$[$0-2].push($$[$0-1]);
break;
case 106:this.$ = [];
break;
case 107:$$[$0-2].push($$[$0-1]);
break;
case 110:this.$ = [];
break;
case 111:$$[$0-1].push($$[$0]);
break;
case 112:this.$ = [];
break;
case 113:$$[$0-2].push($$[$0-1]);
break;
case 116:this.$ = [];
break;
case 117:$$[$0-1].push($$[$0]);
break;
case 118:this.$ = [];
break;
case 119:$$[$0-2].push($$[$0-1]);
break;
case 124:this.$ = [];
break;
case 125:$$[$0-2].push($$[$0-1]);
break;
case 126:this.$ = [];
break;
case 127:$$[$0-2].push($$[$0-1]);
break;
case 128:this.$ = [];
break;
case 129:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,9:3,10:[1,4],12:[1,14],14:[1,5],16:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,27:[1,15],30:[1,16],31:[1,17],32:[1,19],35:[1,20],38:[1,21],51:[1,25],53:[1,26],54:18,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],97:23,98:[1,24],100:28},{1:[3]},{5:[1,37]},{4:38,5:[2,3],8:[2,3],9:3,10:[1,4],12:[1,14],14:[1,5],16:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,27:[1,15],30:[1,16],31:[1,17],32:[1,19],35:[1,20],38:[1,21],51:[1,25],53:[1,26],54:18,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],97:23,98:[1,24],100:28},{11:39,12:[2,82]},{12:[1,40]},{13:[2,86],17:41,42:42,56:[2,39],58:[2,39],61:[2,39],101:[2,39],104:[2,39],106:[1,43]},{13:[1,44]},{5:[2,9],8:[2,9],10:[2,9],12:[2,9],14:[2,9],27:[2,9],30:[2,9],31:[2,9],32:[2,9],35:[2,9],38:[2,9],51:[2,9],53:[2,9],56:[2,9],58:[2,9],63:[2,9],64:[2,9],66:[2,9],67:[2,9],68:[2,9],71:[2,9],77:[2,9],98:[2,9]},{13:[1,45]},{13:[1,46],41:47,43:[1,50],44:[1,51],45:[1,52],46:[1,53],47:[1,54],48:[1,55],49:[1,48],50:[1,49],56:[2,36],58:[2,36],61:[2,36],101:[2,36],104:[2,36]},{5:[2,12],8:[2,12],10:[2,12],12:[2,12],14:[2,12],27:[2,12],30:[2,12],31:[2,12],32:[2,12],35:[2,12],38:[2,12],51:[2,12],53:[2,12],56:[2,12],58:[2,12],63:[2,12],64:[2,12],66:[2,12],67:[2,12],68:[2,12],71:[2,12],77:[2,12],98:[2,12]},{5:[2,13],8:[2,13],10:[2,13],12:[2,13],14:[2,13],27:[2,13],30:[2,13],31:[2,13],32:[2,13],35:[2,13],38:[2,13],51:[2,13],53:[2,13],56:[2,13],58:[2,13],63:[2,13],64:[2,13],66:[2,13],67:[2,13],68:[2,13],71:[2,13],77:[2,13],98:[2,13]},{5:[2,14],8:[2,14],10:[2,14],12:[2,14],14:[2,14],27:[2,14],30:[2,14],31:[2,14],32:[2,14],35:[2,14],38:[2,14],51:[2,14],53:[2,14],56:[2,14],58:[2,14],63:[2,14],64:[2,14],66:[2,14],67:[2,14],68:[2,14],71:[2,14],77:[2,14],98:[2,14]},{13:[2,40],25:[1,56],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],56:[2,40],58:[2,40],61:[2,40],101:[2,40],104:[2,40]},{12:[2,88],28:57,56:[2,88],58:[2,88],63:[2,88],64:[2,88],66:[2,88],67:[2,88],68:[2,88],71:[2,88],77:[2,88],82:[2,88],83:[2,88]},{13:[1,58]},{13:[1,59]},{56:[1,60],58:[1,61],61:[1,62],101:[1,63],104:[1,64]},{12:[2,90],13:[2,90],33:65,56:[2,90],58:[2,90],63:[2,90],64:[2,90],66:[2,90],67:[2,90],68:[2,90],71:[2,90],77:[2,90],82:[2,90],83:[2,90]},{12:[2,94],13:[2,94],36:66,56:[2,94],58:[2,94],63:[2,94],64:[2,94],66:[2,94],67:[2,94],68:[2,94],71:[2,94],77:[2,94],82:[2,94],83:[2,94]},{12:[2,98],13:[2,98],39:67,56:[2,98],58:[2,98],63:[2,98],64:[2,98],66:[2,98],67:[2,98],68:[2,98],71:[2,98],77:[2,98],82:[2,98],83:[2,98]},{12:[1,70],16:73,21:68,29:69,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{13:[1,76],42:77,106:[1,43]},{12:[1,70],16:73,21:79,54:18,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],97:78,100:28},{12:[1,70],16:73,21:79,29:80,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:81,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{8:[2,37],13:[2,37],26:[2,37],56:[2,37],57:[2,37],58:[2,37],60:[2,37],61:[2,37],64:[2,37],65:[2,37],76:[2,37],84:[2,37],85:[2,37],86:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],94:[2,37],95:[2,37],96:[2,37],101:[2,37],104:[2,37],106:[2,37],107:[2,37]},{13:[2,77],26:[2,77],101:[1,82],106:[2,77]},{8:[2,44],13:[2,44],26:[2,44],56:[2,44],57:[2,44],58:[2,44],60:[2,44],61:[2,44],64:[2,44],65:[2,44],76:[2,44],84:[2,44],85:[2,44],86:[2,44],87:[2,44],88:[2,44],89:[2,44],90:[2,44],91:[2,44],92:[2,44],93:[2,44],94:[2,44],95:[2,44],96:[2,44],101:[2,44],104:[2,44],106:[2,44],107:[2,44]},{12:[1,83]},{8:[2,46],13:[2,46],26:[2,46],56:[2,46],57:[2,46],58:[2,46],60:[2,46],61:[2,46],64:[2,46],65:[2,46],76:[2,46],84:[2,46],85:[2,46],86:[2,46],87:[2,46],88:[2,46],89:[2,46],90:[2,46],91:[2,46],92:[2,46],93:[2,46],94:[2,46],95:[2,46],96:[2,46],101:[2,46],104:[2,46],106:[2,46],107:[2,46]},{8:[2,47],13:[2,47],26:[2,47],56:[2,47],57:[2,47],58:[2,47],60:[2,47],61:[2,47],64:[2,47],65:[2,47],76:[2,47],84:[2,47],85:[2,47],86:[2,47],87:[2,47],88:[2,47],89:[2,47],90:[2,47],91:[2,47],92:[2,47],93:[2,47],94:[2,47],95:[2,47],96:[2,47],101:[2,47],104:[2,47],106:[2,47],107:[2,47]},{8:[2,48],13:[2,48],26:[2,48],56:[2,48],57:[2,48],58:[2,48],60:[2,48],61:[2,48],64:[2,48],65:[2,48],76:[2,48],84:[2,48],85:[2,48],86:[2,48],87:[2,48],88:[2,48],89:[2,48],90:[2,48],91:[2,48],92:[2,48],93:[2,48],94:[2,48],95:[2,48],96:[2,48],101:[2,48],104:[2,48],106:[2,48],107:[2,48]},{12:[2,106],56:[2,106],58:[2,106],60:[2,106],63:[2,106],64:[2,106],66:[2,106],67:[2,106],68:[2,106],69:84,71:[2,106],77:[2,106],82:[2,106],83:[2,106]},{7:[2,110],8:[2,110],12:[2,110],56:[2,110],58:[2,110],63:[2,110],64:[2,110],66:[2,110],67:[2,110],68:[2,110],71:[2,110],72:85,76:[2,110],77:[2,110],82:[2,110],83:[2,110]},{6:86,7:[1,87]},{1:[2,1]},{5:[2,4],8:[2,4]},{12:[1,88]},{12:[2,84],15:89},{13:[1,90]},{13:[2,87]},{26:[1,91]},{5:[2,8],8:[2,8],10:[2,8],12:[2,8],14:[2,8],27:[2,8],30:[2,8],31:[2,8],32:[2,8],35:[2,8],38:[2,8],51:[2,8],53:[2,8],56:[2,8],58:[2,8],63:[2,8],64:[2,8],66:[2,8],67:[2,8],68:[2,8],71:[2,8],77:[2,8],98:[2,8]},{5:[2,10],8:[2,10],10:[2,10],12:[2,10],14:[2,10],27:[2,10],30:[2,10],31:[2,10],32:[2,10],35:[2,10],38:[2,10],51:[2,10],53:[2,10],56:[2,10],58:[2,10],63:[2,10],64:[2,10],66:[2,10],67:[2,10],68:[2,10],71:[2,10],77:[2,10],98:[2,10]},{5:[2,11],8:[2,11],10:[2,11],12:[2,11],14:[2,11],27:[2,11],30:[2,11],31:[2,11],32:[2,11],35:[2,11],38:[2,11],51:[2,11],53:[2,11],56:[2,11],58:[2,11],63:[2,11],64:[2,11],66:[2,11],67:[2,11],68:[2,11],71:[2,11],77:[2,11],98:[2,11]},{12:[1,70],16:93,21:79,29:92,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{13:[2,30]},{13:[2,31]},{12:[2,24],56:[2,24],58:[2,24],63:[2,24],64:[2,24],66:[2,24],67:[2,24],68:[2,24],71:[2,24],77:[2,24],82:[2,24],83:[2,24]},{12:[2,25],56:[2,25],58:[2,25],63:[2,25],64:[2,25],66:[2,25],67:[2,25],68:[2,25],71:[2,25],77:[2,25],82:[2,25],83:[2,25]},{12:[2,26],56:[2,26],58:[2,26],63:[2,26],64:[2,26],66:[2,26],67:[2,26],68:[2,26],71:[2,26],77:[2,26],82:[2,26],83:[2,26]},{12:[2,27],56:[2,27],58:[2,27],63:[2,27],64:[2,27],66:[2,27],67:[2,27],68:[2,27],71:[2,27],77:[2,27],82:[2,27],83:[2,27]},{12:[2,28],56:[2,28],58:[2,28],63:[2,28],64:[2,28],66:[2,28],67:[2,28],68:[2,28],71:[2,28],77:[2,28],82:[2,28],83:[2,28]},{12:[2,29],56:[2,29],58:[2,29],63:[2,29],64:[2,29],66:[2,29],67:[2,29],68:[2,29],71:[2,29],77:[2,29],82:[2,29],83:[2,29]},{26:[1,94]},{12:[1,70],16:73,21:79,29:95,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{5:[2,17],8:[2,17],10:[2,17],12:[2,17],14:[2,17],27:[2,17],30:[2,17],31:[2,17],32:[2,17],35:[2,17],38:[2,17],51:[2,17],53:[2,17],56:[2,17],58:[2,17],63:[2,17],64:[2,17],66:[2,17],67:[2,17],68:[2,17],71:[2,17],77:[2,17],98:[2,17]},{5:[2,18],8:[2,18],10:[2,18],12:[2,18],14:[2,18],27:[2,18],30:[2,18],31:[2,18],32:[2,18],35:[2,18],38:[2,18],51:[2,18],53:[2,18],56:[2,18],58:[2,18],63:[2,18],64:[2,18],66:[2,18],67:[2,18],68:[2,18],71:[2,18],77:[2,18],98:[2,18]},{12:[2,118],56:[2,118],57:[2,118],58:[2,118],63:[2,118],64:[2,118],66:[2,118],67:[2,118],68:[2,118],71:[2,118],77:[2,118],79:96,82:[2,118],83:[2,118]},{12:[1,70],16:73,21:79,29:98,54:71,55:27,56:[1,22],58:[1,34],59:97,60:[2,102],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,99]},{12:[2,126],56:[2,126],58:[2,126],63:[2,126],64:[2,126],66:[2,126],67:[2,126],68:[2,126],71:[2,126],77:[2,126],103:100},{12:[2,128],56:[2,128],58:[2,128],63:[2,128],64:[2,128],66:[2,128],67:[2,128],68:[2,128],71:[2,128],77:[2,128],82:[2,128],83:[2,128],105:101},{12:[1,70],13:[2,92],16:73,21:79,29:103,34:102,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],13:[2,96],16:73,21:79,29:105,37:104,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],13:[2,100],16:73,21:79,29:107,40:106,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{56:[2,36],57:[2,36],58:[2,36],61:[2,36],62:108,64:[2,36],65:[2,36],84:[2,36],85:[2,36],86:[2,36],87:[2,36],88:[2,36],89:[2,36],90:[2,36],91:[2,36],92:[2,36],93:[2,36],94:[2,36],95:[2,36],96:[2,36],107:[1,109]},{57:[1,110],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125]},{8:[2,40],13:[2,40],26:[2,40],56:[2,40],57:[2,40],58:[2,40],60:[2,40],61:[2,40],64:[2,40],65:[2,40],76:[2,40],84:[2,40],85:[2,40],86:[2,40],87:[2,40],88:[2,40],89:[2,40],90:[2,40],91:[2,40],92:[2,40],93:[2,40],94:[2,40],95:[2,40],96:[2,40],101:[2,40],104:[2,40],106:[2,40],107:[2,40]},{8:[2,55],13:[2,55],26:[2,55],56:[1,60],57:[2,55],58:[1,61],60:[2,55],61:[1,62],64:[2,55],65:[2,55],76:[2,55],84:[2,55],85:[2,55],86:[2,55],87:[2,55],88:[2,55],89:[2,55],90:[2,55],91:[2,55],92:[2,55],93:[2,55],94:[2,55],95:[2,55],96:[2,55],101:[2,55],106:[2,55],107:[2,55]},{8:[2,58],13:[2,58],26:[2,58],57:[2,58],60:[2,58],64:[2,58],65:[2,58],76:[2,58],84:[2,58],85:[2,58],86:[2,58],87:[2,58],88:[2,58],89:[2,58],90:[2,58],91:[2,58],92:[2,58],93:[2,58],94:[2,58],95:[2,58],96:[2,58],101:[2,58],106:[2,58],107:[2,58]},{8:[2,39],13:[2,39],26:[2,39],56:[2,39],57:[2,39],58:[2,39],60:[2,39],61:[2,39],64:[2,39],65:[2,39],76:[2,39],84:[2,39],85:[2,39],86:[2,39],87:[2,39],88:[2,39],89:[2,39],90:[2,39],91:[2,39],92:[2,39],93:[2,39],94:[2,39],95:[2,39],96:[2,39],101:[2,39],104:[2,39],106:[2,39],107:[2,39]},{12:[1,70],16:73,21:79,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:126,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:127,82:[1,74],83:[1,75]},{5:[2,74],8:[2,74],10:[2,74],12:[2,74],14:[2,74],27:[2,74],30:[2,74],31:[2,74],32:[2,74],35:[2,74],38:[2,74],51:[2,74],53:[2,74],56:[2,74],58:[2,74],63:[2,74],64:[2,74],66:[2,74],67:[2,74],68:[2,74],71:[2,74],77:[2,74],98:[2,74]},{5:[2,75],8:[2,75],10:[2,75],12:[2,75],14:[2,75],27:[2,75],30:[2,75],31:[2,75],32:[2,75],35:[2,75],38:[2,75],51:[2,75],53:[2,75],56:[2,75],58:[2,75],63:[2,75],64:[2,75],66:[2,75],67:[2,75],68:[2,75],71:[2,75],77:[2,75],98:[2,75]},{26:[1,128]},{8:[2,36],13:[2,36],26:[2,36],56:[2,36],57:[2,36],58:[2,36],60:[2,36],61:[2,36],64:[2,36],65:[2,36],76:[2,36],84:[2,36],85:[2,36],86:[2,36],87:[2,36],88:[2,36],89:[2,36],90:[2,36],91:[2,36],92:[2,36],93:[2,36],94:[2,36],95:[2,36],96:[2,36],101:[2,36],104:[2,36],106:[2,36],107:[2,36]},{26:[1,129],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125]},{26:[1,130],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125]},{12:[2,124],56:[2,124],58:[2,124],63:[2,124],64:[2,124],66:[2,124],67:[2,124],68:[2,124],71:[2,124],77:[2,124],102:131},{65:[1,132]},{12:[1,70],16:73,21:79,29:134,54:71,55:27,56:[1,22],58:[1,34],60:[2,108],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],70:133,71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{7:[1,136],8:[2,112],12:[2,112],56:[2,112],58:[2,112],63:[2,112],64:[2,112],66:[2,112],67:[2,112],68:[2,112],71:[2,112],73:135,76:[2,112],77:[2,112],82:[2,112],83:[2,112]},{8:[2,51],13:[2,51],26:[2,51],56:[2,51],57:[2,51],58:[2,51],60:[2,51],61:[2,51],64:[2,51],65:[2,51],76:[2,51],84:[2,51],85:[2,51],86:[2,51],87:[2,51],88:[2,51],89:[2,51],90:[2,51],91:[2,51],92:[2,51],93:[2,51],94:[2,51],95:[2,51],96:[2,51],101:[2,51],104:[2,51],106:[2,51],107:[2,51]},{4:137,9:3,10:[1,4],12:[1,14],14:[1,5],16:6,18:7,19:8,20:9,21:10,22:11,23:12,24:13,27:[1,15],30:[1,16],31:[1,17],32:[1,19],35:[1,20],38:[1,21],51:[1,25],53:[1,26],54:18,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],97:23,98:[1,24],100:28},{13:[1,138],107:[1,139]},{12:[1,140]},{5:[2,7],8:[2,7],10:[2,7],12:[2,7],14:[2,7],27:[2,7],30:[2,7],31:[2,7],32:[2,7],35:[2,7],38:[2,7],51:[2,7],53:[2,7],56:[2,7],58:[2,7],63:[2,7],64:[2,7],66:[2,7],67:[2,7],68:[2,7],71:[2,7],77:[2,7],98:[2,7]},{6:141,7:[1,87]},{13:[1,142],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125]},{13:[2,39],42:143,56:[2,39],58:[2,39],61:[2,39],64:[2,39],65:[2,39],84:[2,39],85:[2,39],86:[2,39],87:[2,39],88:[2,39],89:[2,39],90:[2,39],91:[2,39],92:[2,39],93:[2,39],94:[2,39],95:[2,39],96:[2,39],106:[1,43]},{6:144,7:[1,87]},{13:[1,145],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[1,146]},{12:[1,70],16:73,21:79,29:148,54:71,55:27,56:[1,22],57:[2,120],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],80:147,81:72,82:[1,74],83:[1,75]},{60:[1,149]},{60:[2,103],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125]},{8:[2,42],13:[2,42],26:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],56:[2,42],57:[2,42],58:[2,42],60:[2,42],61:[2,42],64:[2,42],65:[2,42],76:[2,42],84:[2,42],85:[2,42],86:[2,42],87:[2,42],88:[2,42],89:[2,42],90:[2,42],91:[2,42],92:[2,42],93:[2,42],94:[2,42],95:[2,42],96:[2,42],101:[2,42],104:[2,42],106:[2,42],107:[2,42]},{12:[1,70],16:73,21:150,54:151,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36]},{12:[1,70],16:73,21:79,29:152,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{13:[2,19]},{13:[2,93],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[1,153]},{13:[2,20]},{13:[2,97],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[1,154]},{13:[2,21]},{13:[2,101],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[1,155]},{57:[1,156],107:[1,157]},{12:[1,70],16:73,21:158,54:151,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36]},{8:[2,38],13:[2,38],26:[2,38],56:[2,38],57:[2,38],58:[2,38],60:[2,38],61:[2,38],64:[2,38],65:[2,38],76:[2,38],84:[2,38],85:[2,38],86:[2,38],87:[2,38],88:[2,38],89:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38],94:[2,38],95:[2,38],96:[2,38],101:[2,38],104:[2,38],106:[2,38],107:[2,38]},{12:[1,70],16:73,21:79,29:159,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:160,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:161,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:162,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:163,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:164,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:165,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:166,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:167,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:168,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:169,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:170,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:171,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:172,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{12:[1,70],16:73,21:79,29:173,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{8:[2,56],13:[2,56],26:[2,56],57:[2,56],60:[2,56],64:[2,56],65:[2,56],76:[2,56],84:[2,56],85:[2,56],86:[2,56],87:[2,56],88:[2,56],89:[2,56],90:[2,56],91:[2,56],92:[2,56],93:[2,56],94:[2,56],95:[2,56],96:[2,56],101:[2,56],106:[2,56],107:[2,56]},{8:[2,57],13:[2,57],26:[2,57],57:[2,57],60:[2,57],64:[2,57],65:[2,57],76:[2,57],84:[2,57],85:[2,57],86:[2,57],87:[2,57],88:[2,57],89:[2,57],90:[2,57],91:[2,57],92:[2,57],93:[2,57],94:[2,57],95:[2,57],96:[2,57],101:[2,57],106:[2,57],107:[2,57]},{6:174,7:[1,87]},{6:175,7:[1,87]},{6:176,7:[1,87]},{12:[1,70],16:73,21:177,54:151,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36]},{8:[2,45],13:[2,45],26:[2,45],56:[2,45],57:[2,45],58:[2,45],60:[2,45],61:[2,45],64:[2,45],65:[2,45],76:[2,45],84:[2,45],85:[2,45],86:[2,45],87:[2,45],88:[2,45],89:[2,45],90:[2,45],91:[2,45],92:[2,45],93:[2,45],94:[2,45],95:[2,45],96:[2,45],101:[2,45],104:[2,45],106:[2,45],107:[2,45]},{60:[1,178]},{60:[2,109],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[1,179]},{8:[2,114],12:[1,70],16:73,21:79,29:182,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],74:180,76:[2,114],77:[1,36],78:181,81:72,82:[1,74],83:[1,75]},{7:[2,111],8:[2,111],12:[2,111],56:[2,111],58:[2,111],63:[2,111],64:[2,111],66:[2,111],67:[2,111],68:[2,111],71:[2,111],76:[2,111],77:[2,111],82:[2,111],83:[2,111]},{8:[1,183]},{5:[2,5],8:[2,5],10:[2,5],12:[2,5],14:[2,5],27:[2,5],30:[2,5],31:[2,5],32:[2,5],35:[2,5],38:[2,5],51:[2,5],53:[2,5],56:[2,5],58:[2,5],63:[2,5],64:[2,5],66:[2,5],67:[2,5],68:[2,5],71:[2,5],77:[2,5],98:[2,5]},{12:[2,83]},{13:[1,184],107:[1,185]},{5:[2,81],8:[2,81],10:[2,81],12:[2,81],13:[2,81],14:[2,81],27:[2,81],30:[2,81],31:[2,81],32:[2,81],35:[2,81],38:[2,81],51:[2,81],53:[2,81],56:[2,81],58:[2,81],63:[2,81],64:[2,81],66:[2,81],67:[2,81],68:[2,81],71:[2,81],77:[2,81],98:[2,81]},{5:[2,22],8:[2,22],10:[2,22],12:[2,22],14:[2,22],27:[2,22],30:[2,22],31:[2,22],32:[2,22],35:[2,22],38:[2,22],51:[2,22],53:[2,22],56:[2,22],58:[2,22],63:[2,22],64:[2,22],66:[2,22],67:[2,22],68:[2,22],71:[2,22],77:[2,22],98:[2,22]},{5:[2,23],8:[2,23],10:[2,23],12:[2,23],14:[2,23],27:[2,23],30:[2,23],31:[2,23],32:[2,23],35:[2,23],38:[2,23],51:[2,23],53:[2,23],56:[2,23],58:[2,23],63:[2,23],64:[2,23],66:[2,23],67:[2,23],68:[2,23],71:[2,23],77:[2,23],98:[2,23]},{5:[2,15],8:[2,15],10:[2,15],12:[2,15],14:[2,15],27:[2,15],30:[2,15],31:[2,15],32:[2,15],35:[2,15],38:[2,15],51:[2,15],53:[2,15],56:[2,15],58:[2,15],63:[2,15],64:[2,15],66:[2,15],67:[2,15],68:[2,15],71:[2,15],77:[2,15],98:[2,15]},{5:[2,16],8:[2,16],10:[2,16],12:[2,16],14:[2,16],27:[2,16],30:[2,16],31:[2,16],32:[2,16],35:[2,16],38:[2,16],51:[2,16],53:[2,16],56:[2,16],58:[2,16],63:[2,16],64:[2,16],66:[2,16],67:[2,16],68:[2,16],71:[2,16],77:[2,16],98:[2,16]},{12:[2,89],56:[2,89],58:[2,89],63:[2,89],64:[2,89],66:[2,89],67:[2,89],68:[2,89],71:[2,89],77:[2,89],82:[2,89],83:[2,89]},{57:[1,186]},{57:[2,121],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[1,187]},{8:[2,41],13:[2,41],26:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],56:[2,41],57:[2,41],58:[2,41],60:[2,41],61:[2,41],64:[2,41],65:[2,41],76:[2,41],84:[2,41],85:[2,41],86:[2,41],87:[2,41],88:[2,41],89:[2,41],90:[2,41],91:[2,41],92:[2,41],93:[2,41],94:[2,41],95:[2,41],96:[2,41],101:[2,41],104:[2,41],106:[2,41],107:[2,41]},{13:[2,79],26:[2,79],56:[2,36],58:[2,36],61:[2,36],106:[2,79],107:[1,188]},{56:[1,60],58:[1,61],61:[1,62]},{13:[2,80],26:[2,80],64:[1,116],65:[1,117],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],101:[2,80],106:[2,80],107:[1,189]},{12:[2,91],13:[2,91],56:[2,91],58:[2,91],63:[2,91],64:[2,91],66:[2,91],67:[2,91],68:[2,91],71:[2,91],77:[2,91],82:[2,91],83:[2,91]},{12:[2,95],13:[2,95],56:[2,95],58:[2,95],63:[2,95],64:[2,95],66:[2,95],67:[2,95],68:[2,95],71:[2,95],77:[2,95],82:[2,95],83:[2,95]},{12:[2,99],13:[2,99],56:[2,99],58:[2,99],63:[2,99],64:[2,99],66:[2,99],67:[2,99],68:[2,99],71:[2,99],77:[2,99],82:[2,99],83:[2,99]},{8:[2,43],13:[2,43],26:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],56:[2,43],57:[2,43],58:[2,43],60:[2,43],61:[2,43],64:[2,43],65:[2,43],76:[2,43],84:[2,43],85:[2,43],86:[2,43],87:[2,43],88:[2,43],89:[2,43],90:[2,43],91:[2,43],92:[2,43],93:[2,43],94:[2,43],95:[2,43],96:[2,43],101:[2,43],104:[2,43],106:[2,43],107:[2,43]},{12:[1,70],16:73,21:190,54:151,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36]},{56:[2,36],57:[2,104],58:[2,36],61:[2,36],107:[2,104]},{8:[2,59],13:[2,59],26:[2,59],57:[2,59],60:[2,59],64:[2,59],65:[2,59],76:[2,59],84:[2,59],85:[2,59],86:[1,113],87:[1,114],88:[1,115],89:[2,59],90:[2,59],91:[2,59],92:[2,59],93:[2,59],94:[2,59],95:[2,59],96:[2,59],101:[2,59],106:[2,59],107:[2,59]},{8:[2,60],13:[2,60],26:[2,60],57:[2,60],60:[2,60],64:[2,60],65:[2,60],76:[2,60],84:[2,60],85:[2,60],86:[1,113],87:[1,114],88:[1,115],89:[2,60],90:[2,60],91:[2,60],92:[2,60],93:[2,60],94:[2,60],95:[2,60],96:[2,60],101:[2,60],106:[2,60],107:[2,60]},{8:[2,61],13:[2,61],26:[2,61],57:[2,61],60:[2,61],64:[2,61],65:[2,61],76:[2,61],84:[2,61],85:[2,61],86:[2,61],87:[2,61],88:[2,61],89:[2,61],90:[2,61],91:[2,61],92:[2,61],93:[2,61],94:[2,61],95:[2,61],96:[2,61],101:[2,61],106:[2,61],107:[2,61]},{8:[2,62],13:[2,62],26:[2,62],57:[2,62],60:[2,62],64:[2,62],65:[2,62],76:[2,62],84:[2,62],85:[2,62],86:[2,62],87:[2,62],88:[2,62],89:[2,62],90:[2,62],91:[2,62],92:[2,62],93:[2,62],94:[2,62],95:[2,62],96:[2,62],101:[2,62],106:[2,62],107:[2,62]},{8:[2,63],13:[2,63],26:[2,63],57:[2,63],60:[2,63],64:[2,63],65:[2,63],76:[2,63],84:[2,63],85:[2,63],86:[2,63],87:[2,63],88:[2,63],89:[2,63],90:[2,63],91:[2,63],92:[2,63],93:[2,63],94:[2,63],95:[2,63],96:[2,63],101:[2,63],106:[2,63],107:[2,63]},{8:[2,64],13:[2,64],26:[2,64],57:[2,64],60:[2,64],64:[2,64],65:[2,64],76:[2,64],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[2,64],90:[2,64],91:[2,64],92:[2,64],93:[2,64],94:[2,64],95:[2,64],96:[2,64],101:[2,64],106:[2,64],107:[2,64]},{8:[2,65],13:[2,65],26:[2,65],57:[2,65],60:[2,65],64:[2,65],65:[2,65],76:[2,65],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[2,65],90:[2,65],91:[2,65],92:[2,65],93:[2,65],94:[2,65],95:[2,65],96:[2,65],101:[2,65],106:[2,65],107:[2,65]},{8:[2,66],13:[2,66],26:[2,66],57:[2,66],60:[2,66],64:[2,66],65:[2,66],76:[2,66],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[2,66],90:[2,66],91:[2,66],92:[2,66],93:[2,66],94:[2,66],95:[2,66],96:[2,66],101:[2,66],106:[2,66],107:[2,66]},{8:[2,67],13:[2,67],26:[2,67],57:[2,67],60:[2,67],64:[2,67],65:[2,67],76:[2,67],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[2,67],90:[2,67],91:[2,67],92:[2,67],93:[2,67],94:[2,67],95:[2,67],96:[2,67],101:[2,67],106:[2,67],107:[2,67]},{8:[2,68],13:[2,68],26:[2,68],57:[2,68],60:[2,68],64:[2,68],65:[2,68],76:[2,68],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[2,68],90:[2,68],91:[2,68],92:[2,68],93:[2,68],94:[2,68],95:[2,68],96:[2,68],101:[2,68],106:[2,68],107:[2,68]},{8:[2,69],13:[2,69],26:[2,69],57:[2,69],60:[2,69],64:[2,69],65:[2,69],76:[2,69],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[2,69],90:[2,69],91:[2,69],92:[2,69],93:[2,69],94:[2,69],95:[2,69],96:[2,69],101:[2,69],106:[2,69],107:[2,69]},{8:[2,70],13:[2,70],26:[2,70],57:[2,70],60:[2,70],64:[1,116],65:[1,117],76:[2,70],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[2,70],94:[2,70],95:[2,70],96:[2,70],101:[2,70],106:[2,70],107:[2,70]},{8:[2,71],13:[2,71],26:[2,71],57:[2,71],60:[2,71],64:[1,116],65:[1,117],76:[2,71],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[2,71],94:[2,71],95:[2,71],96:[2,71],101:[2,71],106:[2,71],107:[2,71]},{8:[2,72],13:[2,72],26:[2,72],57:[2,72],60:[2,72],64:[1,116],65:[1,117],76:[2,72],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[2,72],94:[2,72],95:[2,72],96:[2,72],101:[2,72],106:[2,72],107:[2,72]},{8:[2,73],13:[2,73],26:[2,73],57:[2,73],60:[2,73],64:[1,116],65:[1,117],76:[2,73],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[2,73],94:[2,73],95:[2,73],96:[2,73],101:[2,73],106:[2,73],107:[2,73]},{5:[2,122],8:[2,122],10:[2,122],12:[2,122],14:[2,122],27:[2,122],30:[2,122],31:[2,122],32:[2,122],35:[2,122],38:[2,122],42:192,51:[2,122],53:[2,122],56:[2,122],58:[2,122],63:[2,122],64:[2,122],66:[2,122],67:[2,122],68:[2,122],71:[2,122],77:[2,122],98:[2,122],99:191,106:[1,43]},{5:[2,32],8:[2,32],10:[2,32],12:[2,32],14:[2,32],27:[2,32],30:[2,32],31:[2,32],32:[2,32],35:[2,32],38:[2,32],51:[2,32],52:[1,193],53:[2,32],56:[2,32],58:[2,32],63:[2,32],64:[2,32],66:[2,32],67:[2,32],68:[2,32],71:[2,32],77:[2,32],98:[2,32]},{5:[2,35],8:[2,35],10:[2,35],12:[2,35],14:[2,35],27:[2,35],30:[2,35],31:[2,35],32:[2,35],35:[2,35],38:[2,35],51:[2,35],53:[2,35],56:[2,35],58:[2,35],63:[2,35],64:[2,35],66:[2,35],67:[2,35],68:[2,35],71:[2,35],77:[2,35],98:[2,35]},{13:[2,78],26:[2,78],56:[2,36],58:[2,36],61:[2,36],106:[2,78],107:[1,194]},{8:[2,49],13:[2,49],26:[2,49],56:[2,49],57:[2,49],58:[2,49],60:[2,49],61:[2,49],64:[2,49],65:[2,49],76:[2,49],84:[2,49],85:[2,49],86:[2,49],87:[2,49],88:[2,49],89:[2,49],90:[2,49],91:[2,49],92:[2,49],93:[2,49],94:[2,49],95:[2,49],96:[2,49],101:[2,49],104:[2,49],106:[2,49],107:[2,49]},{12:[2,107],56:[2,107],58:[2,107],60:[2,107],63:[2,107],64:[2,107],66:[2,107],67:[2,107],68:[2,107],71:[2,107],77:[2,107],82:[2,107],83:[2,107]},{8:[2,116],75:195,76:[2,116]},{8:[2,115],76:[2,115],107:[1,196]},{8:[2,52],26:[1,197],64:[1,116],65:[1,117],76:[2,52],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[2,52]},{5:[2,2],8:[2,2],10:[2,2],12:[2,2],13:[2,2],14:[2,2],26:[2,2],27:[2,2],30:[2,2],31:[2,2],32:[2,2],35:[2,2],38:[2,2],51:[2,2],52:[2,2],53:[2,2],56:[2,2],57:[2,2],58:[2,2],60:[2,2],61:[2,2],63:[2,2],64:[2,2],65:[2,2],66:[2,2],67:[2,2],68:[2,2],71:[2,2],76:[2,2],77:[2,2],84:[2,2],85:[2,2],86:[2,2],87:[2,2],88:[2,2],89:[2,2],90:[2,2],91:[2,2],92:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],98:[2,2],101:[2,2],104:[2,2],106:[2,2],107:[2,2]},{5:[2,6],8:[2,6],10:[2,6],12:[2,6],14:[2,6],27:[2,6],30:[2,6],31:[2,6],32:[2,6],35:[2,6],38:[2,6],51:[2,6],53:[2,6],56:[2,6],58:[2,6],63:[2,6],64:[2,6],66:[2,6],67:[2,6],68:[2,6],71:[2,6],77:[2,6],98:[2,6]},{12:[2,85]},{8:[2,54],13:[2,54],26:[2,54],56:[2,54],57:[2,54],58:[2,54],60:[2,54],61:[2,54],64:[2,54],65:[2,54],76:[2,54],84:[2,54],85:[2,54],86:[2,54],87:[2,54],88:[2,54],89:[2,54],90:[2,54],91:[2,54],92:[2,54],93:[2,54],94:[2,54],95:[2,54],96:[2,54],101:[2,54],104:[2,54],106:[2,54],107:[2,54]},{12:[2,119],56:[2,119],57:[2,119],58:[2,119],63:[2,119],64:[2,119],66:[2,119],67:[2,119],68:[2,119],71:[2,119],77:[2,119],82:[2,119],83:[2,119]},{12:[2,127],56:[2,127],58:[2,127],63:[2,127],64:[2,127],66:[2,127],67:[2,127],68:[2,127],71:[2,127],77:[2,127]},{12:[2,129],56:[2,129],58:[2,129],63:[2,129],64:[2,129],66:[2,129],67:[2,129],68:[2,129],71:[2,129],77:[2,129],82:[2,129],83:[2,129]},{56:[2,36],57:[2,105],58:[2,36],61:[2,36],107:[2,105]},{5:[2,76],8:[2,76],10:[2,76],12:[2,76],14:[2,76],27:[2,76],30:[2,76],31:[2,76],32:[2,76],35:[2,76],38:[2,76],51:[2,76],53:[2,76],56:[2,76],58:[2,76],63:[2,76],64:[2,76],66:[2,76],67:[2,76],68:[2,76],71:[2,76],77:[2,76],98:[2,76]},{5:[2,123],8:[2,123],10:[2,123],12:[2,123],14:[2,123],27:[2,123],30:[2,123],31:[2,123],32:[2,123],35:[2,123],38:[2,123],51:[2,123],53:[2,123],56:[2,123],58:[2,123],63:[2,123],64:[2,123],66:[2,123],67:[2,123],68:[2,123],71:[2,123],77:[2,123],98:[2,123]},{23:199,26:[1,198],51:[1,25]},{12:[2,125],56:[2,125],58:[2,125],63:[2,125],64:[2,125],66:[2,125],67:[2,125],68:[2,125],71:[2,125],77:[2,125]},{8:[1,201],76:[1,200]},{8:[2,113],12:[2,113],56:[2,113],58:[2,113],63:[2,113],64:[2,113],66:[2,113],67:[2,113],68:[2,113],71:[2,113],76:[2,113],77:[2,113],82:[2,113],83:[2,113]},{12:[1,70],16:73,21:79,29:202,54:71,55:27,56:[1,22],58:[1,34],63:[1,29],64:[1,30],66:[1,31],67:[1,32],68:[1,33],71:[1,35],77:[1,36],81:72,82:[1,74],83:[1,75]},{6:203,7:[1,87]},{5:[2,34],8:[2,34],10:[2,34],12:[2,34],14:[2,34],27:[2,34],30:[2,34],31:[2,34],32:[2,34],35:[2,34],38:[2,34],51:[2,34],53:[2,34],56:[2,34],58:[2,34],63:[2,34],64:[2,34],66:[2,34],67:[2,34],68:[2,34],71:[2,34],77:[2,34],98:[2,34]},{8:[2,50],13:[2,50],26:[2,50],56:[2,50],57:[2,50],58:[2,50],60:[2,50],61:[2,50],64:[2,50],65:[2,50],76:[2,50],84:[2,50],85:[2,50],86:[2,50],87:[2,50],88:[2,50],89:[2,50],90:[2,50],91:[2,50],92:[2,50],93:[2,50],94:[2,50],95:[2,50],96:[2,50],101:[2,50],104:[2,50],106:[2,50],107:[2,50]},{8:[2,117],76:[2,117]},{8:[2,53],64:[1,116],65:[1,117],76:[2,53],84:[1,111],85:[1,112],86:[1,113],87:[1,114],88:[1,115],89:[1,118],90:[1,119],91:[1,120],92:[1,121],93:[1,122],94:[1,123],95:[1,124],96:[1,125],107:[2,53]},{5:[2,33],8:[2,33],10:[2,33],12:[2,33],14:[2,33],27:[2,33],30:[2,33],31:[2,33],32:[2,33],35:[2,33],38:[2,33],51:[2,33],53:[2,33],56:[2,33],58:[2,33],63:[2,33],64:[2,33],66:[2,33],67:[2,33],68:[2,33],71:[2,33],77:[2,33],98:[2,33]}],
defaultActions: {37:[2,1],42:[2,87],48:[2,30],49:[2,31],102:[2,19],104:[2,20],106:[2,21],139:[2,83],185:[2,85]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 63 // none, null, void, empty, blank, nada, nothing, zip, nil, missing, undefined, undef? some symbol? () empty parens?
break;
case 11:return 66
break;
case 12:return 67
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 68;
break;
case 14:return 58
break;
case 15:return 60
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 71
break;
case 19:return 76
break;
case 20:return 107
break;
case 21:return 77
break;
case 22:return 26
break;
case 23:return 13
break;
case 24:return 104
break;
case 25:return 'BS'
break;
case 26:return 96
break;
case 27:return 61
break;
case 28:return 89
break;
case 29:return 90
break;
case 30:return 91
break;
case 31:return 92
break;
case 32:return 93
break;
case 33:return 94
break;
case 34:return 83
break;
case 35:return 49
break;
case 36:return 50
break;
case 37:return 44
break;
case 38:return 45
break;
case 39:return 46
break;
case 40:return 47
break;
case 41:return 48
break;
case 42:return '->'
break;
case 43:return 101 // future connector
break;
case 44:return '>>' // stream connector
break;
case 45:return 84
break;
case 46:return 85
break;
case 47:return 86
break;
case 48:return 87
break;
case 49:return 88
break;
case 50:return 64
break;
case 51:return 65
break;
case 52:return 43
break;
case 53:return '?'
break;
case 54:return 82
break;
case 55:return 14
break;
case 56:return 'QUANTITY'
break;
case 57:return 25
break;
case 58:return 10
break;
case 59:return 51
break;
case 60:return 52
break;
case 61:return 106      // failed?
break;
case 62:return 53
break;
case 63:return 98      // when, on, release, send, dispatch, fire?
break;
case 64:return 95
break;
case 65:return 30
break;
case 66:return 32
break;
case 67:return 35
break;
case 68:return 'MUTE'
break;
case 69:return 38    // recovers from an error. recover? rebound?
break;
case 70:return 12
break;
case 71:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:~)/,/^(?:\\)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:quality\b)/,/^(?:quantity\b)/,/^(?:is\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:after\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:mute\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}