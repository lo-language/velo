/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statement_list":4,"EOF":5,"block":6,"BEGIN":7,"END":8,"statement":9,"RECEIVE":10,"statement_repetition0":11,"ID":12,";":13,"application":14,"statement_option0":15,"response":16,"assignment":17,"step":18,"lvalue":19,"dispatch":20,"conditional":21,"iteration":22,"IS":23,":":24,"COMPLETE":25,"statement_repetition1":26,"expr":27,"SKIP":28,"STOP":29,"REPLY":30,"response_repetition0":31,"response_option0":32,"FAIL":33,"response_repetition1":34,"response_option1":35,"REPLACE":36,"response_repetition2":37,"response_option2":38,"assignment_op":39,"contingency":40,"=":41,"+=":42,"-=":43,"*=":44,"/=":45,"%=":46,"++":47,"--":48,"IF":49,"ELSE":50,"WHILE":51,"value":52,"literal":53,"(":54,")":55,"[":56,"lvalue_option0":57,"]":58,".":59,"lvalue_repetition_plus0":60,"NIL":61,"<":62,">":63,"BOOLEAN":64,"NUMBER":65,"STRING":66,"literal_repetition0":67,"literal_option0":68,"{":69,"literal_repetition1":70,"literal_repetition2":71,"literal_option1":72,"literal_repetition3":73,"}":74,"::":75,"dyad":76,"application_repetition0":77,"application_option0":78,"unary_expr":79,"#":80,"NOT":81,"+":82,"-":83,"*":84,"/":85,"%":86,"<=":87,">=":88,"==":89,"!=":90,"AND":91,"OR":92,"IN":93,"SEQ":94,"future":95,"AFTER":96,"dispatch_option0":97,"message":98,"=>":99,"future_repetition0":100,"future_repetition1":101,"~":102,"message_repetition0":103,"message_option0":104,"CATCH":105,",":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"END",10:"RECEIVE",12:"ID",13:";",23:"IS",24:":",25:"COMPLETE",28:"SKIP",29:"STOP",30:"REPLY",33:"FAIL",36:"REPLACE",41:"=",42:"+=",43:"-=",44:"*=",45:"/=",46:"%=",47:"++",48:"--",49:"IF",50:"ELSE",51:"WHILE",54:"(",55:")",56:"[",58:"]",59:".",61:"NIL",62:"<",63:">",64:"BOOLEAN",65:"NUMBER",66:"STRING",69:"{",74:"}",75:"::",80:"#",81:"NOT",82:"+",83:"-",84:"*",85:"/",86:"%",87:"<=",88:">=",89:"==",90:"!=",91:"AND",92:"OR",93:"IN",94:"SEQ",96:"AFTER",99:"=>",102:"~",105:"CATCH",106:","},
productions_: [0,[3,2],[6,3],[4,1],[4,2],[9,4],[9,3],[9,2],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,4],[9,4],[9,2],[9,2],[16,3],[16,3],[16,3],[17,4],[17,4],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[18,2],[18,2],[21,4],[21,7],[21,6],[22,4],[52,1],[52,1],[52,3],[52,1],[19,1],[19,4],[19,3],[19,4],[53,1],[53,3],[53,1],[53,1],[53,1],[53,4],[53,6],[53,2],[76,1],[76,3],[14,5],[79,1],[79,2],[79,2],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[20,2],[20,2],[20,5],[95,1],[95,4],[95,4],[98,4],[40,3],[11,0],[11,3],[15,0],[15,1],[26,0],[26,3],[31,0],[31,3],[32,0],[32,1],[34,0],[34,3],[35,0],[35,1],[37,0],[37,3],[38,0],[38,1],[57,0],[57,1],[60,2],[60,3],[67,0],[67,3],[68,0],[68,1],[70,0],[70,2],[71,0],[71,3],[72,0],[72,1],[73,0],[73,2],[77,0],[77,3],[78,0],[78,1],[97,0],[97,1],[100,0],[100,3],[101,0],[101,3],[103,0],[103,3],[104,0],[104,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'procedure', body: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 4:this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 5:this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 6:this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 14:this.$ = {type: 'assign', op: '=', left: {type: 'id', name: $$[$0-3]}, right: {type: 'procedure', body: $$[$0]}};
break;
case 15:this.$ = {type: 'complete', futures: $$[$0-2].concat([$$[$0-1]])};
break;
case 16:this.$ = {type: 'skip'};
break;
case 17:this.$ = {type: 'stop'};
break;
case 18:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 19:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 20:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 21:this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 22:this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 29:this.$ = {type: 'increment', op: $$[$0], left: $$[$0-1]};
break;
case 30:this.$ = {type: 'decrement', op: $$[$0], left: $$[$0-1]};
break;
case 31:this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 32:this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 33:this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 34:this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 37:this.$ = $$[$0-1];
break;
case 39:this.$ = {type: 'id', name: $$[$0]};
break;
case 40:this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 41:this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 42:this.$ = {type: 'destructure', members: $$[$0-1].concat([$$[$0-2]])};
break;
case 43:this.$ = {type: 'nil'};
break;
case 44:this.$ = {type: 'symbol', name: $$[$0-1]};
break;
case 45:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 46:this.$ = {type: 'number', val: $$[$0]};
break;
case 47:this.$ = {type: 'string', val: $$[$0]};
break;
case 48:this.$ = {type: 'list', elements: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 49:this.$ = {type: 'set', members: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 51:this.$ = {type: 'dyad', key: $$[$0], value: {type: 'boolean', val: true}};;
break;
case 52:this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};;
break;
case 53:this.$ = {type: 'application', address: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 55:this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 56:this.$ = {type: 'complement', operand: $$[$0]};
break;
case 58:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 59:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 60:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 61:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 62:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 63:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 64:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 65:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 66:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 67:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 68:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 69:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 70:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 71:this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 72:this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 77:this.$ = $$[$0-2];
break;
case 79:this.$ = {type: 'message', body: $$[$0-2].args, address: $$[$0-2].of};
break;
case 80:this.$ = $$[$0];
break;
case 81:this.$ = [];
break;
case 82:$$[$0-2].push($$[$0-1]);
break;
case 85:this.$ = [];
break;
case 86:$$[$0-2].push($$[$0-1]);
break;
case 87:this.$ = [];
break;
case 88:$$[$0-2].push($$[$0-1]);
break;
case 91:this.$ = [];
break;
case 92:$$[$0-2].push($$[$0-1]);
break;
case 95:this.$ = [];
break;
case 96:$$[$0-2].push($$[$0-1]);
break;
case 101:this.$ = [$$[$0-1]];
break;
case 102:$$[$0-2].push($$[$0-1]);
break;
case 103:this.$ = [];
break;
case 104:$$[$0-2].push($$[$0-1]);
break;
case 107:this.$ = [];
break;
case 108:$$[$0-1].push($$[$0]);
break;
case 109:this.$ = [];
break;
case 110:$$[$0-2].push($$[$0-1]);
break;
case 113:this.$ = [];
break;
case 114:$$[$0-1].push($$[$0]);
break;
case 115:this.$ = [];
break;
case 116:$$[$0-2].push($$[$0-1]);
break;
case 121:this.$ = [];
break;
case 122:$$[$0-2].push($$[$0-1]);
break;
case 123:this.$ = [];
break;
case 124:$$[$0-2].push($$[$0-1]);
break;
case 125:this.$ = [];
break;
case 126:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,9:3,10:[1,4],12:[1,13],14:5,16:6,17:7,18:8,19:9,20:10,21:11,22:12,25:[1,14],28:[1,15],29:[1,16],30:[1,18],33:[1,19],36:[1,20],49:[1,24],51:[1,25],52:17,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],95:22,96:[1,23],98:27},{1:[3]},{5:[1,36]},{4:37,5:[2,3],8:[2,3],9:3,10:[1,4],12:[1,13],14:5,16:6,17:7,18:8,19:9,20:10,21:11,22:12,25:[1,14],28:[1,15],29:[1,16],30:[1,18],33:[1,19],36:[1,20],49:[1,24],51:[1,25],52:17,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],95:22,96:[1,23],98:27},{11:38,12:[2,81]},{13:[2,83],15:39,40:40,54:[2,38],56:[2,38],59:[2,38],99:[2,38],102:[2,38],105:[1,41]},{13:[1,42]},{5:[2,8],8:[2,8],10:[2,8],12:[2,8],25:[2,8],28:[2,8],29:[2,8],30:[2,8],33:[2,8],36:[2,8],49:[2,8],51:[2,8],54:[2,8],56:[2,8],61:[2,8],62:[2,8],64:[2,8],65:[2,8],66:[2,8],69:[2,8],75:[2,8],96:[2,8]},{13:[1,43]},{13:[1,44],39:45,41:[1,48],42:[1,49],43:[1,50],44:[1,51],45:[1,52],46:[1,53],47:[1,46],48:[1,47],54:[2,35],56:[2,35],59:[2,35],99:[2,35],102:[2,35]},{5:[2,11],8:[2,11],10:[2,11],12:[2,11],25:[2,11],28:[2,11],29:[2,11],30:[2,11],33:[2,11],36:[2,11],49:[2,11],51:[2,11],54:[2,11],56:[2,11],61:[2,11],62:[2,11],64:[2,11],65:[2,11],66:[2,11],69:[2,11],75:[2,11],96:[2,11]},{5:[2,12],8:[2,12],10:[2,12],12:[2,12],25:[2,12],28:[2,12],29:[2,12],30:[2,12],33:[2,12],36:[2,12],49:[2,12],51:[2,12],54:[2,12],56:[2,12],61:[2,12],62:[2,12],64:[2,12],65:[2,12],66:[2,12],69:[2,12],75:[2,12],96:[2,12]},{5:[2,13],8:[2,13],10:[2,13],12:[2,13],25:[2,13],28:[2,13],29:[2,13],30:[2,13],33:[2,13],36:[2,13],49:[2,13],51:[2,13],54:[2,13],56:[2,13],61:[2,13],62:[2,13],64:[2,13],65:[2,13],66:[2,13],69:[2,13],75:[2,13],96:[2,13]},{13:[2,39],23:[1,54],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],54:[2,39],56:[2,39],59:[2,39],99:[2,39],102:[2,39]},{12:[2,85],26:55,54:[2,85],56:[2,85],61:[2,85],62:[2,85],64:[2,85],65:[2,85],66:[2,85],69:[2,85],75:[2,85],80:[2,85],81:[2,85]},{13:[1,56]},{13:[1,57]},{54:[1,58],56:[1,59],59:[1,60],99:[1,61],102:[1,62]},{12:[2,87],13:[2,87],31:63,54:[2,87],56:[2,87],61:[2,87],62:[2,87],64:[2,87],65:[2,87],66:[2,87],69:[2,87],75:[2,87],80:[2,87],81:[2,87]},{12:[2,91],13:[2,91],34:64,54:[2,91],56:[2,91],61:[2,91],62:[2,91],64:[2,91],65:[2,91],66:[2,91],69:[2,91],75:[2,91],80:[2,91],81:[2,91]},{12:[2,95],13:[2,95],37:65,54:[2,95],56:[2,95],61:[2,95],62:[2,95],64:[2,95],65:[2,95],66:[2,95],69:[2,95],75:[2,95],80:[2,95],81:[2,95]},{12:[1,68],14:71,19:66,27:67,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{13:[1,74],40:75,105:[1,41]},{12:[1,68],14:71,19:77,52:17,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],95:76,98:27},{12:[1,68],14:71,19:77,27:78,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:79,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{8:[2,36],13:[2,36],24:[2,36],54:[2,36],55:[2,36],56:[2,36],58:[2,36],59:[2,36],62:[2,36],63:[2,36],74:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36],86:[2,36],87:[2,36],88:[2,36],89:[2,36],90:[2,36],91:[2,36],92:[2,36],93:[2,36],94:[2,36],99:[2,36],102:[2,36],105:[2,36],106:[2,36]},{13:[2,76],24:[2,76],99:[1,80],105:[2,76]},{8:[2,43],13:[2,43],24:[2,43],54:[2,43],55:[2,43],56:[2,43],58:[2,43],59:[2,43],62:[2,43],63:[2,43],74:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],86:[2,43],87:[2,43],88:[2,43],89:[2,43],90:[2,43],91:[2,43],92:[2,43],93:[2,43],94:[2,43],99:[2,43],102:[2,43],105:[2,43],106:[2,43]},{12:[1,81]},{8:[2,45],13:[2,45],24:[2,45],54:[2,45],55:[2,45],56:[2,45],58:[2,45],59:[2,45],62:[2,45],63:[2,45],74:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],86:[2,45],87:[2,45],88:[2,45],89:[2,45],90:[2,45],91:[2,45],92:[2,45],93:[2,45],94:[2,45],99:[2,45],102:[2,45],105:[2,45],106:[2,45]},{8:[2,46],13:[2,46],24:[2,46],54:[2,46],55:[2,46],56:[2,46],58:[2,46],59:[2,46],62:[2,46],63:[2,46],74:[2,46],82:[2,46],83:[2,46],84:[2,46],85:[2,46],86:[2,46],87:[2,46],88:[2,46],89:[2,46],90:[2,46],91:[2,46],92:[2,46],93:[2,46],94:[2,46],99:[2,46],102:[2,46],105:[2,46],106:[2,46]},{8:[2,47],13:[2,47],24:[2,47],54:[2,47],55:[2,47],56:[2,47],58:[2,47],59:[2,47],62:[2,47],63:[2,47],74:[2,47],82:[2,47],83:[2,47],84:[2,47],85:[2,47],86:[2,47],87:[2,47],88:[2,47],89:[2,47],90:[2,47],91:[2,47],92:[2,47],93:[2,47],94:[2,47],99:[2,47],102:[2,47],105:[2,47],106:[2,47]},{12:[2,103],54:[2,103],56:[2,103],58:[2,103],61:[2,103],62:[2,103],64:[2,103],65:[2,103],66:[2,103],67:82,69:[2,103],75:[2,103],80:[2,103],81:[2,103]},{7:[2,107],8:[2,107],12:[2,107],54:[2,107],56:[2,107],61:[2,107],62:[2,107],64:[2,107],65:[2,107],66:[2,107],69:[2,107],70:83,74:[2,107],75:[2,107],80:[2,107],81:[2,107]},{6:84,7:[1,85]},{1:[2,1]},{5:[2,4],8:[2,4]},{12:[1,86]},{13:[1,87]},{13:[2,84]},{24:[1,88]},{5:[2,7],8:[2,7],10:[2,7],12:[2,7],25:[2,7],28:[2,7],29:[2,7],30:[2,7],33:[2,7],36:[2,7],49:[2,7],51:[2,7],54:[2,7],56:[2,7],61:[2,7],62:[2,7],64:[2,7],65:[2,7],66:[2,7],69:[2,7],75:[2,7],96:[2,7]},{5:[2,9],8:[2,9],10:[2,9],12:[2,9],25:[2,9],28:[2,9],29:[2,9],30:[2,9],33:[2,9],36:[2,9],49:[2,9],51:[2,9],54:[2,9],56:[2,9],61:[2,9],62:[2,9],64:[2,9],65:[2,9],66:[2,9],69:[2,9],75:[2,9],96:[2,9]},{5:[2,10],8:[2,10],10:[2,10],12:[2,10],25:[2,10],28:[2,10],29:[2,10],30:[2,10],33:[2,10],36:[2,10],49:[2,10],51:[2,10],54:[2,10],56:[2,10],61:[2,10],62:[2,10],64:[2,10],65:[2,10],66:[2,10],69:[2,10],75:[2,10],96:[2,10]},{12:[1,68],14:90,19:77,27:89,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{13:[2,29]},{13:[2,30]},{12:[2,23],54:[2,23],56:[2,23],61:[2,23],62:[2,23],64:[2,23],65:[2,23],66:[2,23],69:[2,23],75:[2,23],80:[2,23],81:[2,23]},{12:[2,24],54:[2,24],56:[2,24],61:[2,24],62:[2,24],64:[2,24],65:[2,24],66:[2,24],69:[2,24],75:[2,24],80:[2,24],81:[2,24]},{12:[2,25],54:[2,25],56:[2,25],61:[2,25],62:[2,25],64:[2,25],65:[2,25],66:[2,25],69:[2,25],75:[2,25],80:[2,25],81:[2,25]},{12:[2,26],54:[2,26],56:[2,26],61:[2,26],62:[2,26],64:[2,26],65:[2,26],66:[2,26],69:[2,26],75:[2,26],80:[2,26],81:[2,26]},{12:[2,27],54:[2,27],56:[2,27],61:[2,27],62:[2,27],64:[2,27],65:[2,27],66:[2,27],69:[2,27],75:[2,27],80:[2,27],81:[2,27]},{12:[2,28],54:[2,28],56:[2,28],61:[2,28],62:[2,28],64:[2,28],65:[2,28],66:[2,28],69:[2,28],75:[2,28],80:[2,28],81:[2,28]},{24:[1,91]},{12:[1,68],14:71,19:77,27:92,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{5:[2,16],8:[2,16],10:[2,16],12:[2,16],25:[2,16],28:[2,16],29:[2,16],30:[2,16],33:[2,16],36:[2,16],49:[2,16],51:[2,16],54:[2,16],56:[2,16],61:[2,16],62:[2,16],64:[2,16],65:[2,16],66:[2,16],69:[2,16],75:[2,16],96:[2,16]},{5:[2,17],8:[2,17],10:[2,17],12:[2,17],25:[2,17],28:[2,17],29:[2,17],30:[2,17],33:[2,17],36:[2,17],49:[2,17],51:[2,17],54:[2,17],56:[2,17],61:[2,17],62:[2,17],64:[2,17],65:[2,17],66:[2,17],69:[2,17],75:[2,17],96:[2,17]},{12:[2,115],54:[2,115],55:[2,115],56:[2,115],61:[2,115],62:[2,115],64:[2,115],65:[2,115],66:[2,115],69:[2,115],75:[2,115],77:93,80:[2,115],81:[2,115]},{12:[1,68],14:71,19:77,27:95,52:69,53:26,54:[1,21],56:[1,33],57:94,58:[2,99],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,96]},{12:[2,123],54:[2,123],56:[2,123],61:[2,123],62:[2,123],64:[2,123],65:[2,123],66:[2,123],69:[2,123],75:[2,123],101:97},{12:[2,125],13:[2,125],24:[2,125],54:[2,125],56:[2,125],61:[2,125],62:[2,125],64:[2,125],65:[2,125],66:[2,125],69:[2,125],75:[2,125],80:[2,125],81:[2,125],99:[2,125],103:98,105:[2,125]},{12:[1,68],13:[2,89],14:71,19:77,27:100,32:99,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],13:[2,93],14:71,19:77,27:102,35:101,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],13:[2,97],14:71,19:77,27:104,38:103,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{54:[2,35],55:[2,35],56:[2,35],59:[2,35],60:105,62:[2,35],63:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35],86:[2,35],87:[2,35],88:[2,35],89:[2,35],90:[2,35],91:[2,35],92:[2,35],93:[2,35],94:[2,35],106:[1,106]},{55:[1,107],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122]},{8:[2,39],13:[2,39],24:[2,39],54:[2,39],55:[2,39],56:[2,39],58:[2,39],59:[2,39],62:[2,39],63:[2,39],74:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39],86:[2,39],87:[2,39],88:[2,39],89:[2,39],90:[2,39],91:[2,39],92:[2,39],93:[2,39],94:[2,39],99:[2,39],102:[2,39],105:[2,39],106:[2,39]},{8:[2,54],13:[2,54],24:[2,54],54:[1,58],55:[2,54],56:[1,59],58:[2,54],59:[1,60],62:[2,54],63:[2,54],74:[2,54],82:[2,54],83:[2,54],84:[2,54],85:[2,54],86:[2,54],87:[2,54],88:[2,54],89:[2,54],90:[2,54],91:[2,54],92:[2,54],93:[2,54],94:[2,54],99:[2,54],105:[2,54],106:[2,54]},{8:[2,57],13:[2,57],24:[2,57],55:[2,57],58:[2,57],62:[2,57],63:[2,57],74:[2,57],82:[2,57],83:[2,57],84:[2,57],85:[2,57],86:[2,57],87:[2,57],88:[2,57],89:[2,57],90:[2,57],91:[2,57],92:[2,57],93:[2,57],94:[2,57],99:[2,57],105:[2,57],106:[2,57]},{8:[2,38],13:[2,38],24:[2,38],54:[2,38],55:[2,38],56:[2,38],58:[2,38],59:[2,38],62:[2,38],63:[2,38],74:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38],86:[2,38],87:[2,38],88:[2,38],89:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38],94:[2,38],99:[2,38],102:[2,38],105:[2,38],106:[2,38]},{12:[1,68],14:71,19:77,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:123,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:124,80:[1,72],81:[1,73]},{5:[2,73],8:[2,73],10:[2,73],12:[2,73],25:[2,73],28:[2,73],29:[2,73],30:[2,73],33:[2,73],36:[2,73],49:[2,73],51:[2,73],54:[2,73],56:[2,73],61:[2,73],62:[2,73],64:[2,73],65:[2,73],66:[2,73],69:[2,73],75:[2,73],96:[2,73]},{5:[2,74],8:[2,74],10:[2,74],12:[2,74],25:[2,74],28:[2,74],29:[2,74],30:[2,74],33:[2,74],36:[2,74],49:[2,74],51:[2,74],54:[2,74],56:[2,74],61:[2,74],62:[2,74],64:[2,74],65:[2,74],66:[2,74],69:[2,74],75:[2,74],96:[2,74]},{24:[1,125]},{8:[2,35],13:[2,35],24:[2,35],54:[2,35],55:[2,35],56:[2,35],58:[2,35],59:[2,35],62:[2,35],63:[2,35],74:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35],86:[2,35],87:[2,35],88:[2,35],89:[2,35],90:[2,35],91:[2,35],92:[2,35],93:[2,35],94:[2,35],99:[2,35],102:[2,35],105:[2,35],106:[2,35]},{24:[1,126],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122]},{24:[1,127],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122]},{12:[2,121],54:[2,121],56:[2,121],61:[2,121],62:[2,121],64:[2,121],65:[2,121],66:[2,121],69:[2,121],75:[2,121],100:128},{63:[1,129]},{12:[1,68],14:71,19:77,27:131,52:69,53:26,54:[1,21],56:[1,33],58:[2,105],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],68:130,69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{7:[1,133],8:[2,109],12:[2,109],54:[2,109],56:[2,109],61:[2,109],62:[2,109],64:[2,109],65:[2,109],66:[2,109],69:[2,109],71:132,74:[2,109],75:[2,109],80:[2,109],81:[2,109]},{8:[2,50],13:[2,50],24:[2,50],54:[2,50],55:[2,50],56:[2,50],58:[2,50],59:[2,50],62:[2,50],63:[2,50],74:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50],86:[2,50],87:[2,50],88:[2,50],89:[2,50],90:[2,50],91:[2,50],92:[2,50],93:[2,50],94:[2,50],99:[2,50],102:[2,50],105:[2,50],106:[2,50]},{4:134,9:3,10:[1,4],12:[1,13],14:5,16:6,17:7,18:8,19:9,20:10,21:11,22:12,25:[1,14],28:[1,15],29:[1,16],30:[1,18],33:[1,19],36:[1,20],49:[1,24],51:[1,25],52:17,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],95:22,96:[1,23],98:27},{13:[1,135],106:[1,136]},{5:[2,6],8:[2,6],10:[2,6],12:[2,6],25:[2,6],28:[2,6],29:[2,6],30:[2,6],33:[2,6],36:[2,6],49:[2,6],51:[2,6],54:[2,6],56:[2,6],61:[2,6],62:[2,6],64:[2,6],65:[2,6],66:[2,6],69:[2,6],75:[2,6],96:[2,6]},{6:137,7:[1,85]},{13:[1,138],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122]},{13:[2,38],40:139,54:[2,38],56:[2,38],59:[2,38],62:[2,38],63:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38],86:[2,38],87:[2,38],88:[2,38],89:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38],94:[2,38],105:[1,41]},{6:140,7:[1,85]},{13:[1,141],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[1,142]},{12:[1,68],14:71,19:77,27:144,52:69,53:26,54:[1,21],55:[2,117],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],78:143,79:70,80:[1,72],81:[1,73]},{58:[1,145]},{58:[2,100],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122]},{8:[2,41],13:[2,41],24:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41],54:[2,41],55:[2,41],56:[2,41],58:[2,41],59:[2,41],62:[2,41],63:[2,41],74:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41],86:[2,41],87:[2,41],88:[2,41],89:[2,41],90:[2,41],91:[2,41],92:[2,41],93:[2,41],94:[2,41],99:[2,41],102:[2,41],105:[2,41],106:[2,41]},{12:[1,68],14:71,19:146,52:147,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35]},{12:[1,68],13:[2,127],14:71,19:77,24:[2,127],27:149,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73],99:[2,127],104:148,105:[2,127]},{13:[2,18]},{13:[2,90],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[1,150]},{13:[2,19]},{13:[2,94],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[1,151]},{13:[2,20]},{13:[2,98],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[1,152]},{55:[1,153],106:[1,154]},{12:[1,68],14:71,19:155,52:147,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35]},{8:[2,37],13:[2,37],24:[2,37],54:[2,37],55:[2,37],56:[2,37],58:[2,37],59:[2,37],62:[2,37],63:[2,37],74:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37],86:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],94:[2,37],99:[2,37],102:[2,37],105:[2,37],106:[2,37]},{12:[1,68],14:71,19:77,27:156,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:157,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:158,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:159,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:160,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:161,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:162,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:163,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:164,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:165,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:166,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:167,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:168,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:169,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{12:[1,68],14:71,19:77,27:170,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{8:[2,55],13:[2,55],24:[2,55],55:[2,55],58:[2,55],62:[2,55],63:[2,55],74:[2,55],82:[2,55],83:[2,55],84:[2,55],85:[2,55],86:[2,55],87:[2,55],88:[2,55],89:[2,55],90:[2,55],91:[2,55],92:[2,55],93:[2,55],94:[2,55],99:[2,55],105:[2,55],106:[2,55]},{8:[2,56],13:[2,56],24:[2,56],55:[2,56],58:[2,56],62:[2,56],63:[2,56],74:[2,56],82:[2,56],83:[2,56],84:[2,56],85:[2,56],86:[2,56],87:[2,56],88:[2,56],89:[2,56],90:[2,56],91:[2,56],92:[2,56],93:[2,56],94:[2,56],99:[2,56],105:[2,56],106:[2,56]},{6:171,7:[1,85]},{6:172,7:[1,85]},{6:173,7:[1,85]},{12:[1,68],14:71,19:174,52:147,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35]},{8:[2,44],13:[2,44],24:[2,44],54:[2,44],55:[2,44],56:[2,44],58:[2,44],59:[2,44],62:[2,44],63:[2,44],74:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],86:[2,44],87:[2,44],88:[2,44],89:[2,44],90:[2,44],91:[2,44],92:[2,44],93:[2,44],94:[2,44],99:[2,44],102:[2,44],105:[2,44],106:[2,44]},{58:[1,175]},{58:[2,106],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[1,176]},{8:[2,111],12:[1,68],14:71,19:77,27:179,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],72:177,74:[2,111],75:[1,35],76:178,79:70,80:[1,72],81:[1,73]},{7:[2,108],8:[2,108],12:[2,108],54:[2,108],56:[2,108],61:[2,108],62:[2,108],64:[2,108],65:[2,108],66:[2,108],69:[2,108],74:[2,108],75:[2,108],80:[2,108],81:[2,108]},{8:[1,180]},{5:[2,5],8:[2,5],10:[2,5],12:[2,5],25:[2,5],28:[2,5],29:[2,5],30:[2,5],33:[2,5],36:[2,5],49:[2,5],51:[2,5],54:[2,5],56:[2,5],61:[2,5],62:[2,5],64:[2,5],65:[2,5],66:[2,5],69:[2,5],75:[2,5],96:[2,5]},{12:[2,82]},{5:[2,80],8:[2,80],10:[2,80],12:[2,80],13:[2,80],25:[2,80],28:[2,80],29:[2,80],30:[2,80],33:[2,80],36:[2,80],49:[2,80],51:[2,80],54:[2,80],56:[2,80],61:[2,80],62:[2,80],64:[2,80],65:[2,80],66:[2,80],69:[2,80],75:[2,80],96:[2,80]},{5:[2,21],8:[2,21],10:[2,21],12:[2,21],25:[2,21],28:[2,21],29:[2,21],30:[2,21],33:[2,21],36:[2,21],49:[2,21],51:[2,21],54:[2,21],56:[2,21],61:[2,21],62:[2,21],64:[2,21],65:[2,21],66:[2,21],69:[2,21],75:[2,21],96:[2,21]},{5:[2,22],8:[2,22],10:[2,22],12:[2,22],25:[2,22],28:[2,22],29:[2,22],30:[2,22],33:[2,22],36:[2,22],49:[2,22],51:[2,22],54:[2,22],56:[2,22],61:[2,22],62:[2,22],64:[2,22],65:[2,22],66:[2,22],69:[2,22],75:[2,22],96:[2,22]},{5:[2,14],8:[2,14],10:[2,14],12:[2,14],25:[2,14],28:[2,14],29:[2,14],30:[2,14],33:[2,14],36:[2,14],49:[2,14],51:[2,14],54:[2,14],56:[2,14],61:[2,14],62:[2,14],64:[2,14],65:[2,14],66:[2,14],69:[2,14],75:[2,14],96:[2,14]},{5:[2,15],8:[2,15],10:[2,15],12:[2,15],25:[2,15],28:[2,15],29:[2,15],30:[2,15],33:[2,15],36:[2,15],49:[2,15],51:[2,15],54:[2,15],56:[2,15],61:[2,15],62:[2,15],64:[2,15],65:[2,15],66:[2,15],69:[2,15],75:[2,15],96:[2,15]},{12:[2,86],54:[2,86],56:[2,86],61:[2,86],62:[2,86],64:[2,86],65:[2,86],66:[2,86],69:[2,86],75:[2,86],80:[2,86],81:[2,86]},{55:[1,181]},{55:[2,118],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[1,182]},{8:[2,40],13:[2,40],24:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],54:[2,40],55:[2,40],56:[2,40],58:[2,40],59:[2,40],62:[2,40],63:[2,40],74:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40],86:[2,40],87:[2,40],88:[2,40],89:[2,40],90:[2,40],91:[2,40],92:[2,40],93:[2,40],94:[2,40],99:[2,40],102:[2,40],105:[2,40],106:[2,40]},{13:[2,78],24:[2,78],54:[2,35],56:[2,35],59:[2,35],105:[2,78],106:[1,183]},{54:[1,58],56:[1,59],59:[1,60]},{13:[2,79],24:[2,79],99:[2,79],105:[2,79]},{13:[2,128],24:[2,128],62:[1,113],63:[1,114],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],99:[2,128],105:[2,128],106:[1,184]},{12:[2,88],13:[2,88],54:[2,88],56:[2,88],61:[2,88],62:[2,88],64:[2,88],65:[2,88],66:[2,88],69:[2,88],75:[2,88],80:[2,88],81:[2,88]},{12:[2,92],13:[2,92],54:[2,92],56:[2,92],61:[2,92],62:[2,92],64:[2,92],65:[2,92],66:[2,92],69:[2,92],75:[2,92],80:[2,92],81:[2,92]},{12:[2,96],13:[2,96],54:[2,96],56:[2,96],61:[2,96],62:[2,96],64:[2,96],65:[2,96],66:[2,96],69:[2,96],75:[2,96],80:[2,96],81:[2,96]},{8:[2,42],13:[2,42],24:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],54:[2,42],55:[2,42],56:[2,42],58:[2,42],59:[2,42],62:[2,42],63:[2,42],74:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],86:[2,42],87:[2,42],88:[2,42],89:[2,42],90:[2,42],91:[2,42],92:[2,42],93:[2,42],94:[2,42],99:[2,42],102:[2,42],105:[2,42],106:[2,42]},{12:[1,68],14:71,19:185,52:147,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35]},{54:[2,35],55:[2,101],56:[2,35],59:[2,35],106:[2,101]},{8:[2,58],13:[2,58],24:[2,58],55:[2,58],58:[2,58],62:[2,58],63:[2,58],74:[2,58],82:[2,58],83:[2,58],84:[1,110],85:[1,111],86:[1,112],87:[2,58],88:[2,58],89:[2,58],90:[2,58],91:[2,58],92:[2,58],93:[2,58],94:[2,58],99:[2,58],105:[2,58],106:[2,58]},{8:[2,59],13:[2,59],24:[2,59],55:[2,59],58:[2,59],62:[2,59],63:[2,59],74:[2,59],82:[2,59],83:[2,59],84:[1,110],85:[1,111],86:[1,112],87:[2,59],88:[2,59],89:[2,59],90:[2,59],91:[2,59],92:[2,59],93:[2,59],94:[2,59],99:[2,59],105:[2,59],106:[2,59]},{8:[2,60],13:[2,60],24:[2,60],55:[2,60],58:[2,60],62:[2,60],63:[2,60],74:[2,60],82:[2,60],83:[2,60],84:[2,60],85:[2,60],86:[2,60],87:[2,60],88:[2,60],89:[2,60],90:[2,60],91:[2,60],92:[2,60],93:[2,60],94:[2,60],99:[2,60],105:[2,60],106:[2,60]},{8:[2,61],13:[2,61],24:[2,61],55:[2,61],58:[2,61],62:[2,61],63:[2,61],74:[2,61],82:[2,61],83:[2,61],84:[2,61],85:[2,61],86:[2,61],87:[2,61],88:[2,61],89:[2,61],90:[2,61],91:[2,61],92:[2,61],93:[2,61],94:[2,61],99:[2,61],105:[2,61],106:[2,61]},{8:[2,62],13:[2,62],24:[2,62],55:[2,62],58:[2,62],62:[2,62],63:[2,62],74:[2,62],82:[2,62],83:[2,62],84:[2,62],85:[2,62],86:[2,62],87:[2,62],88:[2,62],89:[2,62],90:[2,62],91:[2,62],92:[2,62],93:[2,62],94:[2,62],99:[2,62],105:[2,62],106:[2,62]},{8:[2,63],13:[2,63],24:[2,63],55:[2,63],58:[2,63],62:[2,63],63:[2,63],74:[2,63],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[2,63],88:[2,63],89:[2,63],90:[2,63],91:[2,63],92:[2,63],93:[2,63],94:[2,63],99:[2,63],105:[2,63],106:[2,63]},{8:[2,64],13:[2,64],24:[2,64],55:[2,64],58:[2,64],62:[2,64],63:[2,64],74:[2,64],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[2,64],88:[2,64],89:[2,64],90:[2,64],91:[2,64],92:[2,64],93:[2,64],94:[2,64],99:[2,64],105:[2,64],106:[2,64]},{8:[2,65],13:[2,65],24:[2,65],55:[2,65],58:[2,65],62:[2,65],63:[2,65],74:[2,65],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[2,65],88:[2,65],89:[2,65],90:[2,65],91:[2,65],92:[2,65],93:[2,65],94:[2,65],99:[2,65],105:[2,65],106:[2,65]},{8:[2,66],13:[2,66],24:[2,66],55:[2,66],58:[2,66],62:[2,66],63:[2,66],74:[2,66],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[2,66],88:[2,66],89:[2,66],90:[2,66],91:[2,66],92:[2,66],93:[2,66],94:[2,66],99:[2,66],105:[2,66],106:[2,66]},{8:[2,67],13:[2,67],24:[2,67],55:[2,67],58:[2,67],62:[2,67],63:[2,67],74:[2,67],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[2,67],88:[2,67],89:[2,67],90:[2,67],91:[2,67],92:[2,67],93:[2,67],94:[2,67],99:[2,67],105:[2,67],106:[2,67]},{8:[2,68],13:[2,68],24:[2,68],55:[2,68],58:[2,68],62:[2,68],63:[2,68],74:[2,68],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[2,68],88:[2,68],89:[2,68],90:[2,68],91:[2,68],92:[2,68],93:[2,68],94:[2,68],99:[2,68],105:[2,68],106:[2,68]},{8:[2,69],13:[2,69],24:[2,69],55:[2,69],58:[2,69],62:[1,113],63:[1,114],74:[2,69],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[2,69],92:[2,69],93:[2,69],94:[2,69],99:[2,69],105:[2,69],106:[2,69]},{8:[2,70],13:[2,70],24:[2,70],55:[2,70],58:[2,70],62:[1,113],63:[1,114],74:[2,70],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[2,70],92:[2,70],93:[2,70],94:[2,70],99:[2,70],105:[2,70],106:[2,70]},{8:[2,71],13:[2,71],24:[2,71],55:[2,71],58:[2,71],62:[1,113],63:[1,114],74:[2,71],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[2,71],92:[2,71],93:[2,71],94:[2,71],99:[2,71],105:[2,71],106:[2,71]},{8:[2,72],13:[2,72],24:[2,72],55:[2,72],58:[2,72],62:[1,113],63:[1,114],74:[2,72],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[2,72],92:[2,72],93:[2,72],94:[2,72],99:[2,72],105:[2,72],106:[2,72]},{5:[2,119],8:[2,119],10:[2,119],12:[2,119],25:[2,119],28:[2,119],29:[2,119],30:[2,119],33:[2,119],36:[2,119],40:187,49:[2,119],51:[2,119],54:[2,119],56:[2,119],61:[2,119],62:[2,119],64:[2,119],65:[2,119],66:[2,119],69:[2,119],75:[2,119],96:[2,119],97:186,105:[1,41]},{5:[2,31],8:[2,31],10:[2,31],12:[2,31],25:[2,31],28:[2,31],29:[2,31],30:[2,31],33:[2,31],36:[2,31],49:[2,31],50:[1,188],51:[2,31],54:[2,31],56:[2,31],61:[2,31],62:[2,31],64:[2,31],65:[2,31],66:[2,31],69:[2,31],75:[2,31],96:[2,31]},{5:[2,34],8:[2,34],10:[2,34],12:[2,34],25:[2,34],28:[2,34],29:[2,34],30:[2,34],33:[2,34],36:[2,34],49:[2,34],51:[2,34],54:[2,34],56:[2,34],61:[2,34],62:[2,34],64:[2,34],65:[2,34],66:[2,34],69:[2,34],75:[2,34],96:[2,34]},{13:[2,77],24:[2,77],54:[2,35],56:[2,35],59:[2,35],105:[2,77],106:[1,189]},{8:[2,48],13:[2,48],24:[2,48],54:[2,48],55:[2,48],56:[2,48],58:[2,48],59:[2,48],62:[2,48],63:[2,48],74:[2,48],82:[2,48],83:[2,48],84:[2,48],85:[2,48],86:[2,48],87:[2,48],88:[2,48],89:[2,48],90:[2,48],91:[2,48],92:[2,48],93:[2,48],94:[2,48],99:[2,48],102:[2,48],105:[2,48],106:[2,48]},{12:[2,104],54:[2,104],56:[2,104],58:[2,104],61:[2,104],62:[2,104],64:[2,104],65:[2,104],66:[2,104],69:[2,104],75:[2,104],80:[2,104],81:[2,104]},{8:[2,113],73:190,74:[2,113]},{8:[2,112],74:[2,112],106:[1,191]},{8:[2,51],24:[1,192],62:[1,113],63:[1,114],74:[2,51],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[2,51]},{5:[2,2],8:[2,2],10:[2,2],12:[2,2],13:[2,2],24:[2,2],25:[2,2],28:[2,2],29:[2,2],30:[2,2],33:[2,2],36:[2,2],49:[2,2],50:[2,2],51:[2,2],54:[2,2],55:[2,2],56:[2,2],58:[2,2],59:[2,2],61:[2,2],62:[2,2],63:[2,2],64:[2,2],65:[2,2],66:[2,2],69:[2,2],74:[2,2],75:[2,2],82:[2,2],83:[2,2],84:[2,2],85:[2,2],86:[2,2],87:[2,2],88:[2,2],89:[2,2],90:[2,2],91:[2,2],92:[2,2],93:[2,2],94:[2,2],96:[2,2],99:[2,2],102:[2,2],105:[2,2],106:[2,2]},{8:[2,53],13:[2,53],24:[2,53],54:[2,53],55:[2,53],56:[2,53],58:[2,53],59:[2,53],62:[2,53],63:[2,53],74:[2,53],82:[2,53],83:[2,53],84:[2,53],85:[2,53],86:[2,53],87:[2,53],88:[2,53],89:[2,53],90:[2,53],91:[2,53],92:[2,53],93:[2,53],94:[2,53],99:[2,53],102:[2,53],105:[2,53],106:[2,53]},{12:[2,116],54:[2,116],55:[2,116],56:[2,116],61:[2,116],62:[2,116],64:[2,116],65:[2,116],66:[2,116],69:[2,116],75:[2,116],80:[2,116],81:[2,116]},{12:[2,124],54:[2,124],56:[2,124],61:[2,124],62:[2,124],64:[2,124],65:[2,124],66:[2,124],69:[2,124],75:[2,124]},{12:[2,126],13:[2,126],24:[2,126],54:[2,126],56:[2,126],61:[2,126],62:[2,126],64:[2,126],65:[2,126],66:[2,126],69:[2,126],75:[2,126],80:[2,126],81:[2,126],99:[2,126],105:[2,126]},{54:[2,35],55:[2,102],56:[2,35],59:[2,35],106:[2,102]},{5:[2,75],8:[2,75],10:[2,75],12:[2,75],25:[2,75],28:[2,75],29:[2,75],30:[2,75],33:[2,75],36:[2,75],49:[2,75],51:[2,75],54:[2,75],56:[2,75],61:[2,75],62:[2,75],64:[2,75],65:[2,75],66:[2,75],69:[2,75],75:[2,75],96:[2,75]},{5:[2,120],8:[2,120],10:[2,120],12:[2,120],25:[2,120],28:[2,120],29:[2,120],30:[2,120],33:[2,120],36:[2,120],49:[2,120],51:[2,120],54:[2,120],56:[2,120],61:[2,120],62:[2,120],64:[2,120],65:[2,120],66:[2,120],69:[2,120],75:[2,120],96:[2,120]},{21:194,24:[1,193],49:[1,24]},{12:[2,122],54:[2,122],56:[2,122],61:[2,122],62:[2,122],64:[2,122],65:[2,122],66:[2,122],69:[2,122],75:[2,122]},{8:[1,196],74:[1,195]},{8:[2,110],12:[2,110],54:[2,110],56:[2,110],61:[2,110],62:[2,110],64:[2,110],65:[2,110],66:[2,110],69:[2,110],74:[2,110],75:[2,110],80:[2,110],81:[2,110]},{12:[1,68],14:71,19:77,27:197,52:69,53:26,54:[1,21],56:[1,33],61:[1,28],62:[1,29],64:[1,30],65:[1,31],66:[1,32],69:[1,34],75:[1,35],79:70,80:[1,72],81:[1,73]},{6:198,7:[1,85]},{5:[2,33],8:[2,33],10:[2,33],12:[2,33],25:[2,33],28:[2,33],29:[2,33],30:[2,33],33:[2,33],36:[2,33],49:[2,33],51:[2,33],54:[2,33],56:[2,33],61:[2,33],62:[2,33],64:[2,33],65:[2,33],66:[2,33],69:[2,33],75:[2,33],96:[2,33]},{8:[2,49],13:[2,49],24:[2,49],54:[2,49],55:[2,49],56:[2,49],58:[2,49],59:[2,49],62:[2,49],63:[2,49],74:[2,49],82:[2,49],83:[2,49],84:[2,49],85:[2,49],86:[2,49],87:[2,49],88:[2,49],89:[2,49],90:[2,49],91:[2,49],92:[2,49],93:[2,49],94:[2,49],99:[2,49],102:[2,49],105:[2,49],106:[2,49]},{8:[2,114],74:[2,114]},{8:[2,52],62:[1,113],63:[1,114],74:[2,52],82:[1,108],83:[1,109],84:[1,110],85:[1,111],86:[1,112],87:[1,115],88:[1,116],89:[1,117],90:[1,118],91:[1,119],92:[1,120],93:[1,121],94:[1,122],106:[2,52]},{5:[2,32],8:[2,32],10:[2,32],12:[2,32],25:[2,32],28:[2,32],29:[2,32],30:[2,32],33:[2,32],36:[2,32],49:[2,32],51:[2,32],54:[2,32],56:[2,32],61:[2,32],62:[2,32],64:[2,32],65:[2,32],66:[2,32],69:[2,32],75:[2,32],96:[2,32]}],
defaultActions: {36:[2,1],40:[2,84],46:[2,29],47:[2,30],99:[2,18],101:[2,19],103:[2,20],136:[2,82]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return '`'
break;
case 11:return 61 // none, null, void, empty, blank, nada, nothing, zip, nil, missing, undefined, undef? some symbol? () empty parens?
break;
case 12:return 64
break;
case 13:return 65
break;
case 14:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 66;
break;
case 15:return 56
break;
case 16:return 58
break;
case 17:return 54
break;
case 18:return 55
break;
case 19:return 69
break;
case 20:return 74
break;
case 21:return 106
break;
case 22:return 75
break;
case 23:return 24
break;
case 24:return 13
break;
case 25:return 102
break;
case 26:return 'BS'
break;
case 27:return 94
break;
case 28:return 59
break;
case 29:return 87
break;
case 30:return 88
break;
case 31:return 89
break;
case 32:return 90
break;
case 33:return 91
break;
case 34:return 92
break;
case 35:return 81
break;
case 36:return 47
break;
case 37:return 48
break;
case 38:return 42
break;
case 39:return 43
break;
case 40:return 44
break;
case 41:return 45
break;
case 42:return 46
break;
case 43:return '->'
break;
case 44:return 99 // future connector
break;
case 45:return '>>' // stream connector
break;
case 46:return 82
break;
case 47:return 83
break;
case 48:return 84
break;
case 49:return 85
break;
case 50:return 86
break;
case 51:return 62
break;
case 52:return 63
break;
case 53:return 41
break;
case 54:return '?'
break;
case 55:return 80
break;
case 56:return 23
break;
case 57:return 10
break;
case 58:return 49
break;
case 59:return 50
break;
case 60:return 105      // failed?
break;
case 61:return 51
break;
case 62:return 96      // when, on, release, send, dispatch, fire?
break;
case 63:return 'DISPATCH'
break;
case 64:return 93
break;
case 65:return 28
break;
case 66:return 30
break;
case 67:return 33
break;
case 68:return 'MUTE'
break;
case 69:return 36    // recovers from an error. recover? rebound?
break;
case 70:return 12
break;
case 71:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:`)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:~)/,/^(?:\\)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:is\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:after\b)/,/^(?:dispatch\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:mute\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}