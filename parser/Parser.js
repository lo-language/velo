/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,15],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,23],$V8=[1,24],$V9=[1,20],$Va=[1,26],$Vb=[1,33],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,34],$Vi=[1,22],$Vj=[5,8],$Vk=[2,41],$Vl=[53,59,62,105,108],$Vm=[2,37],$Vn=[1,43],$Vo=[5,8,10,12,16,27,28,31,34,48,51,53,55,59,64,65,66,67,68,73,102],$Vp=[2,34],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[12,13,53,55,59,64,65,66,67,68,73,84,85],$Vu=[1,67],$Vv=[1,71],$Vw=[1,72],$Vx=[8,13,49,53,54,57,58,59,61,62,78,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,105,108,110,111],$Vy=[8,12,53,55,59,61,64,65,66,67,68,73,84,85],$Vz=[8,12,78],$VA=[2,85],$VB=[1,91],$VC=[12,53,55,59,64,65,66,67,68,73,84,85],$VD=[12,53,54,55,59,64,65,66,67,68,73,84,85],$VE=[12,53,55,59,64,65,66,67,68,73],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[1,116],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[8,13,49,54,57,58,61,78,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,105,110,111],$VV=[1,135],$VW=[8,13,40,41,42,43,44,45,46,47,49,53,54,57,58,59,61,62,78,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,105,108,110,111],$VX=[8,61],$VY=[8,78],$VZ=[53,59,62],$V_=[2,80],$V$=[2,105],$V01=[8,13,49,54,57,58,61,78,86,87,91,92,93,94,95,96,97,98,99,100,105,110,111],$V11=[8,13,49,54,57,58,61,78,91,92,93,94,95,96,97,98,99,100,105,110,111],$V21=[8,13,49,54,57,58,61,78,97,98,99,100,105,110,111],$V31=[2,79],$V41=[8,61,111],$V51=[2,106];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"statement_list":4,"EOF":5,"block":6,"BEGIN":7,"END":8,"statement":9,"RECEIVE":10,"statement_repetition0":11,"ID":12,";":13,"IS":14,"literal":15,"DISTINGUISH":16,"statement_repetition_plus1":17,"application":18,"statement_option0":19,"response":20,"assignment":21,"step":22,"lvalue":23,"dispatch":24,"conditional":25,"iteration":26,"SKIP":27,"REPLY":28,"response_repetition0":29,"response_option0":30,"FAIL":31,"response_repetition1":32,"response_option1":33,"REPLACE":34,"response_repetition2":35,"response_option2":36,"assignment_op":37,"expr":38,"contingency":39,"=":40,"+=":41,"-=":42,"*=":43,"/=":44,"%=":45,"++":46,"--":47,"IF":48,":":49,"ELSE":50,"WHILE":51,"value":52,"(":53,")":54,"INTER_BEGIN":55,"dynastring":56,"INTER_END":57,"INTER_MID":58,"[":59,"lvalue_option0":60,"]":61,".":62,"lvalue_repetition_plus0":63,"NIL":64,"BOOLEAN":65,"NUMBER":66,"STRING":67,"PROCEDURE":68,"literal_option0":69,"literal_repetition0":70,"literal_option1":71,"literal_option2":72,"{":73,"literal_option3":74,"literal_repetition1":75,"literal_option4":76,"literal_option5":77,"}":78,"dyad":79,"field":80,"application_repetition0":81,"application_option0":82,"unary_expr":83,"#":84,"NOT":85,"+":86,"-":87,"*":88,"/":89,"%":90,"<":91,">":92,"<=":93,">=":94,"==":95,"!=":96,"AND":97,"OR":98,"IN":99,"SEQ":100,"future":101,"AFTER":102,"dispatch_option0":103,"message":104,"=>":105,"future_repetition0":106,"future_repetition1":107,"~":108,"message_repetition0":109,"CATCH":110,",":111,"statement_repetition_plus1_option0":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"END",10:"RECEIVE",12:"ID",13:";",14:"IS",16:"DISTINGUISH",27:"SKIP",28:"REPLY",31:"FAIL",34:"REPLACE",40:"=",41:"+=",42:"-=",43:"*=",44:"/=",45:"%=",46:"++",47:"--",48:"IF",49:":",50:"ELSE",51:"WHILE",53:"(",54:")",55:"INTER_BEGIN",57:"INTER_END",58:"INTER_MID",59:"[",61:"]",62:".",64:"NIL",65:"BOOLEAN",66:"NUMBER",67:"STRING",68:"PROCEDURE",73:"{",78:"}",84:"#",85:"NOT",86:"+",87:"-",88:"*",89:"/",90:"%",91:"<",92:">",93:"<=",94:">=",95:"==",96:"!=",97:"AND",98:"OR",99:"IN",100:"SEQ",102:"AFTER",105:"=>",108:"~",110:"CATCH",111:","},
productions_: [0,[3,2],[6,3],[4,1],[4,2],[9,4],[9,4],[9,4],[9,3],[9,2],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,2],[20,3],[20,3],[20,3],[21,4],[21,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[22,2],[22,2],[25,4],[25,7],[25,6],[26,4],[52,1],[52,1],[52,3],[52,1],[52,3],[56,1],[56,3],[23,1],[23,4],[23,3],[23,4],[15,1],[15,1],[15,1],[15,1],[15,3],[15,6],[15,6],[79,1],[79,3],[80,3],[18,5],[83,1],[83,2],[83,2],[38,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[24,2],[24,2],[24,5],[101,1],[101,4],[101,4],[104,4],[39,3],[11,0],[11,3],[112,0],[112,1],[17,2],[17,3],[19,0],[19,1],[29,0],[29,3],[30,0],[30,1],[32,0],[32,3],[33,0],[33,1],[35,0],[35,3],[36,0],[36,1],[60,0],[60,1],[63,2],[63,3],[69,0],[69,1],[70,0],[70,3],[71,0],[71,1],[72,0],[72,1],[74,0],[74,1],[75,0],[75,3],[76,0],[76,1],[77,0],[77,1],[81,0],[81,3],[82,0],[82,1],[103,0],[103,1],[106,0],[106,3],[107,0],[107,3],[109,0],[109,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {type: 'procedure', body: $$[$0-1]}; 
break;
case 2: case 36:
this.$ = $$[$0-1];
break;
case 3:
this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 4:
this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 5:
this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 6:
this.$ = {type: 'constant', name: $$[$0-3], value: $$[$0-1]};
break;
case 7:
this.$ = {type: 'range', variants: $$[$0-2].concat($$[$0-1])};
break;
case 8:
this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 16:
this.$ = {type: 'skip'};
break;
case 17: case 18: case 19:
this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 20:
this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 21:
this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 28:
this.$ = {type: 'increment', operand: $$[$0-1]};
break;
case 29:
this.$ = {type: 'decrement', operand: $$[$0-1]};
break;
case 30:
this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 31:
this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 32:
this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 33:
this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 38:
this.$ = {type: 'interpolation', left: $$[$0-2], middle: $$[$0-1], right: $$[$0]};
break;
case 40:
this.$ = {type: 'dynastring', left: $$[$0-2], middle: $$[$0-1], right: $$[$0] };
break;
case 41:
this.$ = {type: 'id', name: $$[$0]};
break;
case 42:
this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 43:
this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 44:
this.$ = {type: 'destructure', members: $$[$0-1].concat([$$[$0-2]])};
break;
case 45:
this.$ = {type: 'nil'};
break;
case 46:
this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 47:
this.$ = {type: 'number', val: $$[$0]};
break;
case 48:
this.$ = {type: 'string', val: $$[$0]};
break;
case 49:
this.$ = {type: 'procedure', body: $$[$0]};
break;
case 50:
this.$ = {type: 'list', elements: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 51:
this.$ = {type: 'record', fields: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 53:
this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};;
break;
case 54:
this.$ = {type: 'field', name: $$[$0-2], value: $$[$0]};
break;
case 55:
this.$ = {type: 'application', address: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 57:
this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 58:
this.$ = {type: 'complement', operand: $$[$0]};
break;
case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72:
this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 73:
this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 74:
this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 77:
this.$ = {type: 'message', address: $$[$0-3].address, args: $$[$0-3].args, subsequent: $$[$0-1], contingency: $$[$0]};
break;
case 79:
this.$ = $$[$0-2];
break;
case 81:
this.$ = {type: 'message', address: $$[$0-3], args: $$[$0-1].concat([$$[$0]])};
break;
case 82:
this.$ = $$[$0];
break;
case 83: case 91: case 95: case 99: case 109: case 117: case 123: case 129: case 131: case 133:
this.$ = [];
break;
case 84: case 88: case 92: case 96: case 100: case 106: case 110: case 118: case 124: case 130: case 132: case 134:
$$[$0-2].push($$[$0-1]);
break;
case 87: case 105:
this.$ = [$$[$0-1]];
break;
}
},
table: [{3:1,4:2,9:3,10:$V0,12:$V1,15:25,16:$V2,18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:$V3,28:$V4,31:$V5,34:$V6,48:$V7,51:$V8,52:16,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,101:21,102:$Vi,104:27},{1:[3]},{5:[1,35]},o($Vj,[2,3],{9:3,18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,52:16,101:21,15:25,104:27,4:36,10:$V0,12:$V1,16:$V2,27:$V3,28:$V4,31:$V5,34:$V6,48:$V7,51:$V8,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,102:$Vi}),{11:37,12:[2,83]},o([13,40,41,42,43,44,45,46,47,53,59,62,105,108],$Vk,{14:[1,38]}),{12:[1,40],17:39},o($Vl,$Vm,{19:41,39:42,13:[2,89],110:$Vn}),{13:[1,44]},o($Vo,[2,10]),{13:[1,45]},o($Vl,$Vp,{37:47,13:[1,46],40:[1,50],41:[1,51],42:[1,52],43:[1,53],44:[1,54],45:[1,55],46:[1,48],47:[1,49]}),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),{13:[1,56]},{53:$Vq,59:$Vr,62:$Vs,105:[1,60],108:[1,61]},o($Vt,[2,91],{29:62}),o($Vt,[2,95],{32:63}),o($Vt,[2,99],{35:64}),{12:$Vu,15:25,18:70,23:65,38:66,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{13:[1,73],39:74,110:$Vn},{12:$Vu,15:25,18:70,23:76,52:16,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,101:75,104:27},{12:$Vu,15:25,18:70,23:76,38:77,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:78,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},o($Vx,[2,35]),{12:$Vu,15:25,18:70,23:76,38:80,52:68,53:$V9,55:$Va,56:79,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},o([13,49,110],[2,78],{105:[1,81]}),o($Vx,[2,45]),o($Vx,[2,46]),o($Vx,[2,47]),o($Vx,[2,48]),{49:[1,82]},o($Vy,[2,107],{69:83,7:[1,84]}),o($Vz,[2,115],{74:85,7:[1,86]}),{1:[2,1]},o($Vj,[2,4]),{12:[1,87]},{15:88,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh},{12:[1,89]},{12:$VA,111:$VB,112:90},{13:[1,92]},{13:[2,90]},{49:[1,93]},o($Vo,[2,9]),o($Vo,[2,11]),o($Vo,[2,12]),{12:$Vu,15:25,18:95,23:76,38:94,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{13:[2,28]},{13:[2,29]},o($VC,[2,22]),o($VC,[2,23]),o($VC,[2,24]),o($VC,[2,25]),o($VC,[2,26]),o($VC,[2,27]),o($Vo,[2,16]),o($VD,[2,123],{81:96}),{12:$Vu,15:25,18:70,23:76,38:98,52:68,53:$V9,55:$Va,59:$Vb,60:97,61:[2,103],64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:[1,99]},o($VE,[2,131],{107:100}),o($VC,[2,133],{109:101}),{12:$Vu,13:[2,93],15:25,18:70,23:76,30:102,38:103,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,13:[2,97],15:25,18:70,23:76,33:104,38:105,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,13:[2,101],15:25,18:70,23:76,36:106,38:107,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},o([53,54,59,62,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$Vp,{63:108,111:[1,109]}),{54:[1,110],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($Vx,$Vk),o($VU,[2,56],{53:$Vq,59:$Vr,62:$Vs}),o($VU,[2,59]),o($Vx,$Vm),{12:$Vu,15:25,18:70,23:76,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:126,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:127,84:$Vv,85:$Vw},o($Vo,[2,75]),o($Vo,[2,76]),{49:[1,128]},o($Vx,$Vp),{49:[1,129],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{49:[1,130],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{57:[1,131]},{57:[2,39],58:[1,132],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($VE,[2,129],{106:133}),{6:134,7:$VV},o($Vy,[2,109],{70:136}),o($Vy,[2,108]),o($Vz,[2,117],{75:137}),o($Vz,[2,116]),{13:[1,138],111:[1,139]},{13:[1,140]},{12:$VA,13:[1,141],111:$VB,112:142},{12:[2,87]},{12:[2,86]},o($Vo,[2,8]),{6:143,7:$VV},{13:[1,144],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o([13,53,59,62,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$Vm,{39:145,110:$Vn}),{12:$Vu,15:25,18:70,23:76,38:147,52:68,53:$V9,54:[2,125],55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,82:146,83:69,84:$Vv,85:$Vw},{61:[1,148]},{61:[2,104],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($VW,[2,43]),{12:$Vu,15:25,18:70,23:149,52:150,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh},{12:$Vu,15:25,18:70,23:76,38:151,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{13:[2,17]},{13:[2,94],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,111:[1,152]},{13:[2,18]},{13:[2,98],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,111:[1,153]},{13:[2,19]},{13:[2,102],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,111:[1,154]},{54:[1,155],111:[1,156]},{12:$Vu,15:25,18:70,23:157,52:150,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh},o($Vx,[2,36]),{12:$Vu,15:25,18:70,23:76,38:158,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:159,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:160,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:161,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:162,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:163,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:164,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:165,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:166,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:167,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:168,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:169,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:170,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:171,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:76,38:172,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},o($VU,[2,57]),o($VU,[2,58]),{6:173,7:$VV},{6:174,7:$VV},{6:175,7:$VV},o($Vx,[2,38]),{12:$Vu,15:25,18:70,23:76,38:80,52:68,53:$V9,55:$Va,56:176,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{12:$Vu,15:25,18:70,23:177,52:150,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh},o($Vx,[2,49]),{4:178,9:3,10:$V0,12:$V1,15:25,16:$V2,18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:$V3,28:$V4,31:$V5,34:$V6,48:$V7,51:$V8,52:16,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,101:21,102:$Vi,104:27},o($VX,[2,111],{15:25,52:68,83:69,18:70,23:76,71:179,79:180,38:181,12:$Vu,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,84:$Vv,85:$Vw}),o($VY,[2,119],{76:182,80:183,12:[1,184]}),o($Vo,[2,5]),{12:[2,84]},o($Vo,[2,6]),o($Vo,[2,7]),{12:[2,88]},o([5,8,10,12,13,16,27,28,31,34,48,51,53,55,59,64,65,66,67,68,73,102],[2,82]),o($Vo,[2,20]),o($Vo,[2,21]),{54:[1,185]},{54:[2,126],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,111:[1,186]},o($VW,[2,42]),o($VZ,$Vp,{13:$V_,49:$V_,110:$V_,111:[1,187]}),{53:$Vq,59:$Vr,62:$Vs},o([13,49,105,110],[2,81],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,111:[1,188]}),o($Vt,[2,92]),o($Vt,[2,96]),o($Vt,[2,100]),o($VW,[2,44]),{12:$Vu,15:25,18:70,23:189,52:150,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh},o($VZ,$Vp,{54:$V$,111:$V$}),o($V01,[2,60],{88:$VH,89:$VI,90:$VJ}),o($V01,[2,61],{88:$VH,89:$VI,90:$VJ}),o($VU,[2,62]),o($VU,[2,63]),o($VU,[2,64]),o($V11,[2,65],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($V11,[2,66],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($V11,[2,67],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($V11,[2,68],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($V11,[2,69],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($V11,[2,70],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($V21,[2,71],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($V21,[2,72],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($V21,[2,73],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($V21,[2,74],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vo,[2,127],{103:190,39:191,110:$Vn}),o($Vo,[2,30],{50:[1,192]}),o($Vo,[2,33]),{57:[2,40]},o($VZ,$Vp,{13:$V31,49:$V31,110:$V31,111:[1,193]}),{8:[1,194]},{8:[1,196],61:[2,113],72:195},o($VX,[2,112],{111:[1,197]}),o($V41,[2,52],{49:[1,198],86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),{8:[1,200],77:199,78:[2,121]},o($VY,[2,120],{111:[1,201]}),{49:[1,202]},o($Vx,[2,55]),o($VD,[2,124]),o($VE,[2,132]),o($VC,[2,134]),o($VZ,$Vp,{54:$V51,111:$V51}),o($Vo,[2,77]),o($Vo,[2,128]),{25:204,48:$V7,49:[1,203]},o($VE,[2,130]),o([5,8,10,12,13,16,27,28,31,34,48,49,50,51,53,54,55,57,58,59,61,62,64,65,66,67,68,73,78,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,105,108,110,111],[2,2]),{61:[1,205]},{61:[2,114]},o($Vy,[2,110]),{12:$Vu,15:25,18:70,23:76,38:206,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{78:[1,207]},{78:[2,122]},o($Vz,[2,118]),{12:$Vu,15:25,18:70,23:76,38:208,52:68,53:$V9,55:$Va,59:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,73:$Vh,83:69,84:$Vv,85:$Vw},{6:209,7:$VV},o($Vo,[2,32]),o($Vx,[2,50]),o($V41,[2,53],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),o($Vx,[2,51]),o([8,78,111],[2,54],{86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),o($Vo,[2,31])],
defaultActions: {35:[2,1],42:[2,90],48:[2,28],49:[2,29],90:[2,87],91:[2,86],102:[2,17],104:[2,18],106:[2,19],139:[2,84],142:[2,88],176:[2,40],196:[2,114],200:[2,122]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 64 // none, null, void, empty, blank, nada, nothing, zip, nil, missing, undefined, undef? some symbol? () empty parens?
break;
case 11:return 65
break;
case 12:return 66
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 67
break;
case 14:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 55
break;
case 15:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 58
break;
case 16:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 57
break;
case 17:return 59
break;
case 18:return 61
break;
case 19:return 53
break;
case 20:return 54
break;
case 21:return 73
break;
case 22:return 78
break;
case 23:return 111
break;
case 24:return '::'
break;
case 25:return 49
break;
case 26:return 13
break;
case 27:return 108
break;
case 28:return 'BS'
break;
case 29:return 100
break;
case 30:return 62
break;
case 31:return 93
break;
case 32:return 94
break;
case 33:return 95
break;
case 34:return 96
break;
case 35:return 97
break;
case 36:return 98
break;
case 37:return 85
break;
case 38:return 46
break;
case 39:return 47
break;
case 40:return 41
break;
case 41:return 42
break;
case 42:return 43
break;
case 43:return 44
break;
case 44:return 45
break;
case 45:return '->'
break;
case 46:return 105 // future connector
break;
case 47:return 68
break;
case 48:return 86
break;
case 49:return 87
break;
case 50:return 88
break;
case 51:return 89
break;
case 52:return 90
break;
case 53:return 91
break;
case 54:return 92
break;
case 55:return 40
break;
case 56:return '?'
break;
case 57:return 84
break;
case 58:return 14
break;
case 59:return 16
break;
case 60:return 68
break;
case 61:return 10
break;
case 62:return 48
break;
case 63:return 50
break;
case 64:return 110      // failed?
break;
case 65:return 51
break;
case 66:return 102      // when, on, release, send, dispatch, fire?
break;
case 67:return 99
break;
case 68:return 27
break;
case 69:return 28
break;
case 70:return 31
break;
case 71:return 'MUTE'
break;
case 72:return 34    // recovers from an error. recover? rebound?
break;
case 73:return 12
break;
case 74:return 'INVALID'
break;
}
},
rules: [/^(?:\s*\/\/.*)/,/^(?:\s*\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\`\"]*")/,/^(?:"[^\`\"]*`)/,/^(?:`[^\`\"]*`)/,/^(?:`[^\`\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:~)/,/^(?:\\)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:is\b)/,/^(?:distinguish\b)/,/^(?:procedure\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:after\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:mute\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}