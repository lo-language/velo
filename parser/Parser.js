/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statement_list":4,"EOF":5,"block":6,"BEGIN":7,"END":8,"statement":9,"RECEIVE":10,"statement_repetition0":11,"ID":12,";":13,"application":14,"statement_option0":15,"response":16,"assignment":17,"incdec":18,"dispatch":19,"conditional":20,"iteration":21,"IS":22,":":23,"COMPLETE":24,"statement_repetition1":25,"expr":26,"SKIP":27,"STOP":28,"REPLY":29,"response_repetition0":30,"response_option0":31,"FAIL":32,"response_repetition1":33,"response_option1":34,"REPLACE":35,"response_repetition2":36,"response_option2":37,"lvalue":38,"assignment_op":39,"contingency":40,"=":41,"+=":42,"-=":43,"*=":44,"/=":45,"%=":46,"++":47,"--":48,"IF":49,"ELSE":50,"WHILE":51,"value":52,"literal":53,"(":54,")":55,"[":56,"lvalue_option0":57,"]":58,".":59,"NIL":60,"<":61,">":62,"BOOLEAN":63,"NUMBER":64,"STRING":65,"literal_repetition0":66,"literal_option0":67,"{":68,"literal_repetition1":69,"literal_repetition2":70,"literal_option1":71,"literal_repetition3":72,"}":73,"::":74,"dyad":75,"application_repetition0":76,"application_option0":77,"unary_expr":78,"#":79,"NOT":80,"+":81,"-":82,"*":83,"/":84,"%":85,"<=":86,">=":87,"==":88,"!=":89,"AND":90,"OR":91,"IN":92,"SEQ":93,"message":94,"->":95,"CATCH":96,"future":97,"=>":98,"dispatch_option0":99,",":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"END",10:"RECEIVE",12:"ID",13:";",22:"IS",23:":",24:"COMPLETE",27:"SKIP",28:"STOP",29:"REPLY",32:"FAIL",35:"REPLACE",41:"=",42:"+=",43:"-=",44:"*=",45:"/=",46:"%=",47:"++",48:"--",49:"IF",50:"ELSE",51:"WHILE",54:"(",55:")",56:"[",58:"]",59:".",60:"NIL",61:"<",62:">",63:"BOOLEAN",64:"NUMBER",65:"STRING",68:"{",73:"}",74:"::",79:"#",80:"NOT",81:"+",82:"-",83:"*",84:"/",85:"%",86:"<=",87:">=",88:"==",89:"!=",90:"AND",91:"OR",92:"IN",93:"SEQ",95:"->",96:"CATCH",98:"=>",100:","},
productions_: [0,[3,2],[6,3],[4,1],[4,2],[9,4],[9,3],[9,2],[9,1],[9,2],[9,1],[9,1],[9,1],[9,4],[9,4],[9,2],[9,2],[16,3],[16,3],[16,3],[17,4],[17,4],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[18,2],[18,2],[20,4],[20,7],[20,6],[21,4],[52,1],[52,1],[52,3],[52,1],[38,1],[38,4],[38,3],[53,1],[53,3],[53,1],[53,1],[53,1],[53,4],[53,6],[53,2],[75,1],[75,3],[14,5],[78,1],[78,2],[78,2],[26,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[94,3],[40,3],[97,2],[19,2],[19,2],[19,3],[19,3],[19,4],[11,0],[11,3],[15,0],[15,1],[25,0],[25,3],[30,0],[30,3],[31,0],[31,1],[33,0],[33,3],[34,0],[34,1],[36,0],[36,3],[37,0],[37,1],[57,0],[57,1],[66,0],[66,3],[67,0],[67,1],[69,0],[69,2],[70,0],[70,3],[71,0],[71,1],[72,0],[72,2],[76,0],[76,3],[77,0],[77,1],[99,0],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'procedure', body: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 4:this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 5:this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 6:this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 13:this.$ = {type: 'assign', op: '=', left: {type: 'id', name: $$[$0-3]}, right: {type: 'procedure', body: $$[$0]}};
break;
case 14:this.$ = {type: 'complete', futures: $$[$0-2].concat([$$[$0-1]])};
break;
case 15:this.$ = {type: 'skip'};
break;
case 16:this.$ = {type: 'stop'};
break;
case 17:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 18:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 19:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 20:this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 21:this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 28:this.$ = {type: 'assign', op: $$[$0], left: $$[$0-1]};
break;
case 29:this.$ = {type: 'assign', op: $$[$0], left: $$[$0-1]};
break;
case 30:this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 31:this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 32:this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 33:this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 36:this.$ = $$[$0-1];
break;
case 38:this.$ = {type: 'id', name: $$[$0]};
break;
case 39:this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 40:this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 42:this.$ = {type: 'symbol', name: $$[$0-1]};
break;
case 43:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 44:this.$ = {type: 'number', val: $$[$0]};
break;
case 45:this.$ = {type: 'string', val: $$[$0]};
break;
case 46:this.$ = {type: 'list', elements: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]): []};
break;
case 47:this.$ = {type: 'set', members: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 49:this.$ = {type: 'dyad', key: $$[$0], value: {type: 'boolean', val: true}};;
break;
case 50:this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};;
break;
case 51:this.$ = {type: 'application', procedure: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 53:this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 54:this.$ = {type: 'complement', operand: $$[$0]};
break;
case 56:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 57:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 58:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 59:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 60:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 61:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 62:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 63:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 64:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 65:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 66:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 67:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 68:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 69:this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 70:this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 71:this.$ = {type: 'message', body: $$[$0-2], to: $$[$0]};
break;
case 72:this.$ = $$[$0];
break;
case 73:this.$ = $$[$0];
break;
case 75:this.$ = {type: 'message', body: $$[$0-1].body, to: $$[$0-1].to, contingency: $$[$0]};
break;
case 76:this.$ = {type: 'message', body: $$[$0-2].body, to: $$[$0-2].to, future: $$[$0-1]};
break;
case 77:this.$ = {type: 'message', body: $$[$0-2].body, to: $$[$0-2].to, future: $$[$0-1], contingency: $$[$0]};
break;
case 78:this.$ = {type: 'message', body: $$[$0-3].body, to: $$[$0-3].to, subsequent: $$[$0-1], contingency: $$[$0]};
break;
case 79:this.$ = [];
break;
case 80:$$[$0-2].push($$[$0-1]);
break;
case 83:this.$ = [];
break;
case 84:$$[$0-2].push($$[$0-1]);
break;
case 85:this.$ = [];
break;
case 86:$$[$0-2].push($$[$0-1]);
break;
case 89:this.$ = [];
break;
case 90:$$[$0-2].push($$[$0-1]);
break;
case 93:this.$ = [];
break;
case 94:$$[$0-2].push($$[$0-1]);
break;
case 99:this.$ = [];
break;
case 100:$$[$0-2].push($$[$0-1]);
break;
case 103:this.$ = [];
break;
case 104:$$[$0-1].push($$[$0]);
break;
case 105:this.$ = [];
break;
case 106:$$[$0-2].push($$[$0-1]);
break;
case 109:this.$ = [];
break;
case 110:$$[$0-1].push($$[$0]);
break;
case 111:this.$ = [];
break;
case 112:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,9:3,10:[1,4],12:[1,12],14:5,16:6,17:7,18:8,19:9,20:10,21:11,24:[1,13],26:26,27:[1,14],28:[1,15],29:[1,17],32:[1,18],35:[1,19],38:20,49:[1,22],51:[1,23],52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37],94:21},{1:[3]},{5:[1,38]},{4:39,5:[2,3],8:[2,3],9:3,10:[1,4],12:[1,12],14:5,16:6,17:7,18:8,19:9,20:10,21:11,24:[1,13],26:26,27:[1,14],28:[1,15],29:[1,17],32:[1,18],35:[1,19],38:20,49:[1,22],51:[1,23],52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37],94:21},{11:40,12:[2,79]},{13:[2,81],15:41,40:42,54:[2,37],56:[2,37],59:[2,37],61:[2,37],62:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37],86:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],95:[2,37],96:[1,43]},{13:[1,44]},{5:[2,8],8:[2,8],10:[2,8],12:[2,8],24:[2,8],27:[2,8],28:[2,8],29:[2,8],32:[2,8],35:[2,8],49:[2,8],51:[2,8],54:[2,8],56:[2,8],60:[2,8],61:[2,8],63:[2,8],64:[2,8],65:[2,8],68:[2,8],74:[2,8],79:[2,8],80:[2,8]},{13:[1,45]},{5:[2,10],8:[2,10],10:[2,10],12:[2,10],24:[2,10],27:[2,10],28:[2,10],29:[2,10],32:[2,10],35:[2,10],49:[2,10],51:[2,10],54:[2,10],56:[2,10],60:[2,10],61:[2,10],63:[2,10],64:[2,10],65:[2,10],68:[2,10],74:[2,10],79:[2,10],80:[2,10]},{5:[2,11],8:[2,11],10:[2,11],12:[2,11],24:[2,11],27:[2,11],28:[2,11],29:[2,11],32:[2,11],35:[2,11],49:[2,11],51:[2,11],54:[2,11],56:[2,11],60:[2,11],61:[2,11],63:[2,11],64:[2,11],65:[2,11],68:[2,11],74:[2,11],79:[2,11],80:[2,11]},{5:[2,12],8:[2,12],10:[2,12],12:[2,12],24:[2,12],27:[2,12],28:[2,12],29:[2,12],32:[2,12],35:[2,12],49:[2,12],51:[2,12],54:[2,12],56:[2,12],60:[2,12],61:[2,12],63:[2,12],64:[2,12],65:[2,12],68:[2,12],74:[2,12],79:[2,12],80:[2,12]},{22:[1,46],41:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],48:[2,38],54:[2,38],56:[2,38],59:[2,38],61:[2,38],62:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38],86:[2,38],87:[2,38],88:[2,38],89:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38],95:[2,38]},{12:[2,83],25:47,54:[2,83],56:[2,83],60:[2,83],61:[2,83],63:[2,83],64:[2,83],65:[2,83],68:[2,83],74:[2,83],79:[2,83],80:[2,83]},{13:[1,48]},{13:[1,49]},{8:[2,52],13:[2,52],23:[2,52],54:[1,50],55:[2,52],56:[1,51],58:[2,52],59:[1,52],61:[2,52],62:[2,52],73:[2,52],81:[2,52],82:[2,52],83:[2,52],84:[2,52],85:[2,52],86:[2,52],87:[2,52],88:[2,52],89:[2,52],90:[2,52],91:[2,52],92:[2,52],93:[2,52],95:[2,52],100:[2,52]},{12:[2,85],13:[2,85],30:53,54:[2,85],56:[2,85],60:[2,85],61:[2,85],63:[2,85],64:[2,85],65:[2,85],68:[2,85],74:[2,85],79:[2,85],80:[2,85]},{12:[2,89],13:[2,89],33:54,54:[2,89],56:[2,89],60:[2,89],61:[2,89],63:[2,89],64:[2,89],65:[2,89],68:[2,89],74:[2,89],79:[2,89],80:[2,89]},{12:[2,93],13:[2,93],36:55,54:[2,93],56:[2,93],60:[2,93],61:[2,93],63:[2,93],64:[2,93],65:[2,93],68:[2,93],74:[2,93],79:[2,93],80:[2,93]},{39:56,41:[1,59],42:[1,60],43:[1,61],44:[1,62],45:[1,63],46:[1,64],47:[1,57],48:[1,58],54:[2,34],56:[2,34],59:[2,34],61:[2,34],62:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34],86:[2,34],87:[2,34],88:[2,34],89:[2,34],90:[2,34],91:[2,34],92:[2,34],93:[2,34],95:[2,34]},{13:[1,65],23:[1,68],40:66,96:[1,43],97:67,98:[1,69]},{12:[1,73],14:72,26:70,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:74,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{8:[2,35],13:[2,35],23:[2,35],54:[2,35],55:[2,35],56:[2,35],58:[2,35],59:[2,35],61:[2,35],62:[2,35],73:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35],86:[2,35],87:[2,35],88:[2,35],89:[2,35],90:[2,35],91:[2,35],92:[2,35],93:[2,35],95:[2,35],96:[2,35],98:[2,35],100:[2,35]},{12:[1,73],14:72,26:75,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],95:[1,76]},{8:[2,41],13:[2,41],23:[2,41],54:[2,41],55:[2,41],56:[2,41],58:[2,41],59:[2,41],61:[2,41],62:[2,41],73:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41],86:[2,41],87:[2,41],88:[2,41],89:[2,41],90:[2,41],91:[2,41],92:[2,41],93:[2,41],95:[2,41],96:[2,41],98:[2,41],100:[2,41]},{12:[1,92]},{8:[2,43],13:[2,43],23:[2,43],54:[2,43],55:[2,43],56:[2,43],58:[2,43],59:[2,43],61:[2,43],62:[2,43],73:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],86:[2,43],87:[2,43],88:[2,43],89:[2,43],90:[2,43],91:[2,43],92:[2,43],93:[2,43],95:[2,43],96:[2,43],98:[2,43],100:[2,43]},{8:[2,44],13:[2,44],23:[2,44],54:[2,44],55:[2,44],56:[2,44],58:[2,44],59:[2,44],61:[2,44],62:[2,44],73:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],86:[2,44],87:[2,44],88:[2,44],89:[2,44],90:[2,44],91:[2,44],92:[2,44],93:[2,44],95:[2,44],96:[2,44],98:[2,44],100:[2,44]},{8:[2,45],13:[2,45],23:[2,45],54:[2,45],55:[2,45],56:[2,45],58:[2,45],59:[2,45],61:[2,45],62:[2,45],73:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],86:[2,45],87:[2,45],88:[2,45],89:[2,45],90:[2,45],91:[2,45],92:[2,45],93:[2,45],95:[2,45],96:[2,45],98:[2,45],100:[2,45]},{12:[2,99],54:[2,99],56:[2,99],58:[2,99],60:[2,99],61:[2,99],63:[2,99],64:[2,99],65:[2,99],66:93,68:[2,99],74:[2,99],79:[2,99],80:[2,99]},{7:[2,103],8:[2,103],12:[2,103],54:[2,103],56:[2,103],60:[2,103],61:[2,103],63:[2,103],64:[2,103],65:[2,103],68:[2,103],69:94,73:[2,103],74:[2,103],79:[2,103],80:[2,103]},{6:95,7:[1,96]},{8:[2,55],13:[2,55],23:[2,55],55:[2,55],58:[2,55],61:[2,55],62:[2,55],73:[2,55],81:[2,55],82:[2,55],83:[2,55],84:[2,55],85:[2,55],86:[2,55],87:[2,55],88:[2,55],89:[2,55],90:[2,55],91:[2,55],92:[2,55],93:[2,55],95:[2,55],100:[2,55]},{12:[1,73],14:72,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:97,79:[1,36],80:[1,37]},{12:[1,73],14:72,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:98,79:[1,36],80:[1,37]},{1:[2,1]},{5:[2,4],8:[2,4]},{12:[1,99]},{13:[1,100]},{13:[2,82]},{23:[1,101]},{5:[2,7],8:[2,7],10:[2,7],12:[2,7],24:[2,7],27:[2,7],28:[2,7],29:[2,7],32:[2,7],35:[2,7],49:[2,7],51:[2,7],54:[2,7],56:[2,7],60:[2,7],61:[2,7],63:[2,7],64:[2,7],65:[2,7],68:[2,7],74:[2,7],79:[2,7],80:[2,7]},{5:[2,9],8:[2,9],10:[2,9],12:[2,9],24:[2,9],27:[2,9],28:[2,9],29:[2,9],32:[2,9],35:[2,9],49:[2,9],51:[2,9],54:[2,9],56:[2,9],60:[2,9],61:[2,9],63:[2,9],64:[2,9],65:[2,9],68:[2,9],74:[2,9],79:[2,9],80:[2,9]},{23:[1,102]},{12:[1,73],14:72,26:103,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{5:[2,15],8:[2,15],10:[2,15],12:[2,15],24:[2,15],27:[2,15],28:[2,15],29:[2,15],32:[2,15],35:[2,15],49:[2,15],51:[2,15],54:[2,15],56:[2,15],60:[2,15],61:[2,15],63:[2,15],64:[2,15],65:[2,15],68:[2,15],74:[2,15],79:[2,15],80:[2,15]},{5:[2,16],8:[2,16],10:[2,16],12:[2,16],24:[2,16],27:[2,16],28:[2,16],29:[2,16],32:[2,16],35:[2,16],49:[2,16],51:[2,16],54:[2,16],56:[2,16],60:[2,16],61:[2,16],63:[2,16],64:[2,16],65:[2,16],68:[2,16],74:[2,16],79:[2,16],80:[2,16]},{12:[2,111],54:[2,111],55:[2,111],56:[2,111],60:[2,111],61:[2,111],63:[2,111],64:[2,111],65:[2,111],68:[2,111],74:[2,111],76:104,79:[2,111],80:[2,111]},{12:[1,73],14:72,26:106,38:71,52:16,53:24,54:[1,25],56:[1,32],57:105,58:[2,97],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,107]},{12:[1,73],13:[2,87],14:72,26:109,31:108,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],13:[2,91],14:72,26:111,34:110,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],13:[2,95],14:72,26:113,37:112,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:115,26:114,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{13:[2,28]},{13:[2,29]},{12:[2,22],54:[2,22],56:[2,22],60:[2,22],61:[2,22],63:[2,22],64:[2,22],65:[2,22],68:[2,22],74:[2,22],79:[2,22],80:[2,22]},{12:[2,23],54:[2,23],56:[2,23],60:[2,23],61:[2,23],63:[2,23],64:[2,23],65:[2,23],68:[2,23],74:[2,23],79:[2,23],80:[2,23]},{12:[2,24],54:[2,24],56:[2,24],60:[2,24],61:[2,24],63:[2,24],64:[2,24],65:[2,24],68:[2,24],74:[2,24],79:[2,24],80:[2,24]},{12:[2,25],54:[2,25],56:[2,25],60:[2,25],61:[2,25],63:[2,25],64:[2,25],65:[2,25],68:[2,25],74:[2,25],79:[2,25],80:[2,25]},{12:[2,26],54:[2,26],56:[2,26],60:[2,26],61:[2,26],63:[2,26],64:[2,26],65:[2,26],68:[2,26],74:[2,26],79:[2,26],80:[2,26]},{12:[2,27],54:[2,27],56:[2,27],60:[2,27],61:[2,27],63:[2,27],64:[2,27],65:[2,27],68:[2,27],74:[2,27],79:[2,27],80:[2,27]},{5:[2,74],8:[2,74],10:[2,74],12:[2,74],24:[2,74],27:[2,74],28:[2,74],29:[2,74],32:[2,74],35:[2,74],49:[2,74],51:[2,74],54:[2,74],56:[2,74],60:[2,74],61:[2,74],63:[2,74],64:[2,74],65:[2,74],68:[2,74],74:[2,74],79:[2,74],80:[2,74]},{5:[2,75],8:[2,75],10:[2,75],12:[2,75],24:[2,75],27:[2,75],28:[2,75],29:[2,75],32:[2,75],35:[2,75],49:[2,75],51:[2,75],54:[2,75],56:[2,75],60:[2,75],61:[2,75],63:[2,75],64:[2,75],65:[2,75],68:[2,75],74:[2,75],79:[2,75],80:[2,75]},{13:[1,116],40:117,96:[1,43]},{6:118,7:[1,96]},{12:[1,73],14:72,38:119,52:120,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34]},{23:[1,121],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91]},{8:[2,34],13:[2,34],23:[2,34],54:[2,34],55:[2,34],56:[2,34],58:[2,34],59:[2,34],61:[2,34],62:[2,34],73:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34],86:[2,34],87:[2,34],88:[2,34],89:[2,34],90:[2,34],91:[2,34],92:[2,34],93:[2,34],95:[2,34],96:[2,34],98:[2,34],100:[2,34]},{8:[2,37],13:[2,37],23:[2,37],54:[2,37],55:[2,37],56:[2,37],58:[2,37],59:[2,37],61:[2,37],62:[2,37],73:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37],86:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],95:[2,37],96:[2,37],98:[2,37],100:[2,37]},{8:[2,38],13:[2,38],23:[2,38],54:[2,38],55:[2,38],56:[2,38],58:[2,38],59:[2,38],61:[2,38],62:[2,38],73:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38],86:[2,38],87:[2,38],88:[2,38],89:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38],95:[2,38],96:[2,38],98:[2,38],100:[2,38]},{23:[1,122],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91]},{55:[1,123],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91]},{12:[1,73],14:72,38:71,52:124,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34]},{12:[1,73],14:72,26:125,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:126,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:127,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:128,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:129,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:130,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:131,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:132,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:133,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:134,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:135,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:136,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:137,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:138,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{12:[1,73],14:72,26:139,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{62:[1,140]},{12:[1,73],14:72,26:142,38:71,52:16,53:24,54:[1,25],56:[1,32],58:[2,101],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],67:141,68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{7:[1,144],8:[2,105],12:[2,105],54:[2,105],56:[2,105],60:[2,105],61:[2,105],63:[2,105],64:[2,105],65:[2,105],68:[2,105],70:143,73:[2,105],74:[2,105],79:[2,105],80:[2,105]},{8:[2,48],13:[2,48],23:[2,48],54:[2,48],55:[2,48],56:[2,48],58:[2,48],59:[2,48],61:[2,48],62:[2,48],73:[2,48],81:[2,48],82:[2,48],83:[2,48],84:[2,48],85:[2,48],86:[2,48],87:[2,48],88:[2,48],89:[2,48],90:[2,48],91:[2,48],92:[2,48],93:[2,48],95:[2,48],96:[2,48],98:[2,48],100:[2,48]},{4:145,9:3,10:[1,4],12:[1,12],14:5,16:6,17:7,18:8,19:9,20:10,21:11,24:[1,13],26:26,27:[1,14],28:[1,15],29:[1,17],32:[1,18],35:[1,19],38:20,49:[1,22],51:[1,23],52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37],94:21},{8:[2,53],13:[2,53],23:[2,53],55:[2,53],58:[2,53],61:[2,53],62:[2,53],73:[2,53],81:[2,53],82:[2,53],83:[2,53],84:[2,53],85:[2,53],86:[2,53],87:[2,53],88:[2,53],89:[2,53],90:[2,53],91:[2,53],92:[2,53],93:[2,53],95:[2,53],100:[2,53]},{8:[2,54],13:[2,54],23:[2,54],55:[2,54],58:[2,54],61:[2,54],62:[2,54],73:[2,54],81:[2,54],82:[2,54],83:[2,54],84:[2,54],85:[2,54],86:[2,54],87:[2,54],88:[2,54],89:[2,54],90:[2,54],91:[2,54],92:[2,54],93:[2,54],95:[2,54],100:[2,54]},{13:[1,146],100:[1,147]},{5:[2,6],8:[2,6],10:[2,6],12:[2,6],24:[2,6],27:[2,6],28:[2,6],29:[2,6],32:[2,6],35:[2,6],49:[2,6],51:[2,6],54:[2,6],56:[2,6],60:[2,6],61:[2,6],63:[2,6],64:[2,6],65:[2,6],68:[2,6],74:[2,6],79:[2,6],80:[2,6]},{6:148,7:[1,96]},{6:149,7:[1,96]},{13:[1,150],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[1,151]},{12:[1,73],14:72,26:153,38:71,52:16,53:24,54:[1,25],55:[2,113],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],77:152,78:35,79:[1,36],80:[1,37]},{58:[1,154]},{58:[2,98],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91]},{8:[2,40],13:[2,40],23:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],54:[2,40],55:[2,40],56:[2,40],58:[2,40],59:[2,40],61:[2,40],62:[2,40],73:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40],86:[2,40],87:[2,40],88:[2,40],89:[2,40],90:[2,40],91:[2,40],92:[2,40],93:[2,40],95:[2,40],96:[2,40],98:[2,40],100:[2,40]},{13:[2,17]},{13:[2,88],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[1,155]},{13:[2,18]},{13:[2,92],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[1,156]},{13:[2,19]},{13:[2,96],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[1,157]},{13:[1,158],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91]},{13:[2,37],40:159,54:[2,37],56:[2,37],59:[2,37],61:[2,37],62:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37],86:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],96:[1,43]},{5:[2,76],8:[2,76],10:[2,76],12:[2,76],24:[2,76],27:[2,76],28:[2,76],29:[2,76],32:[2,76],35:[2,76],49:[2,76],51:[2,76],54:[2,76],56:[2,76],60:[2,76],61:[2,76],63:[2,76],64:[2,76],65:[2,76],68:[2,76],74:[2,76],79:[2,76],80:[2,76]},{5:[2,77],8:[2,77],10:[2,77],12:[2,77],24:[2,77],27:[2,77],28:[2,77],29:[2,77],32:[2,77],35:[2,77],49:[2,77],51:[2,77],54:[2,77],56:[2,77],60:[2,77],61:[2,77],63:[2,77],64:[2,77],65:[2,77],68:[2,77],74:[2,77],79:[2,77],80:[2,77]},{5:[2,115],8:[2,115],10:[2,115],12:[2,115],24:[2,115],27:[2,115],28:[2,115],29:[2,115],32:[2,115],35:[2,115],40:161,49:[2,115],51:[2,115],54:[2,115],56:[2,115],60:[2,115],61:[2,115],63:[2,115],64:[2,115],65:[2,115],68:[2,115],74:[2,115],79:[2,115],80:[2,115],96:[1,43],99:160},{13:[2,73],54:[2,34],56:[2,34],59:[2,34],96:[2,73]},{54:[1,50],56:[1,51],59:[1,52]},{6:162,7:[1,96]},{6:163,7:[1,96]},{8:[2,36],13:[2,36],23:[2,36],54:[2,36],55:[2,36],56:[2,36],58:[2,36],59:[2,36],61:[2,36],62:[2,36],73:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36],86:[2,36],87:[2,36],88:[2,36],89:[2,36],90:[2,36],91:[2,36],92:[2,36],93:[2,36],95:[2,36],96:[2,36],98:[2,36],100:[2,36]},{13:[2,71],23:[2,71],54:[1,50],56:[1,51],59:[1,52],96:[2,71],98:[2,71]},{8:[2,56],13:[2,56],23:[2,56],55:[2,56],58:[2,56],61:[2,56],62:[2,56],73:[2,56],81:[2,56],82:[2,56],83:[1,79],84:[1,80],85:[1,81],86:[2,56],87:[2,56],88:[2,56],89:[2,56],90:[2,56],91:[2,56],92:[2,56],93:[2,56],95:[2,56],100:[2,56]},{8:[2,57],13:[2,57],23:[2,57],55:[2,57],58:[2,57],61:[2,57],62:[2,57],73:[2,57],81:[2,57],82:[2,57],83:[1,79],84:[1,80],85:[1,81],86:[2,57],87:[2,57],88:[2,57],89:[2,57],90:[2,57],91:[2,57],92:[2,57],93:[2,57],95:[2,57],100:[2,57]},{8:[2,58],13:[2,58],23:[2,58],55:[2,58],58:[2,58],61:[2,58],62:[2,58],73:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58],86:[2,58],87:[2,58],88:[2,58],89:[2,58],90:[2,58],91:[2,58],92:[2,58],93:[2,58],95:[2,58],100:[2,58]},{8:[2,59],13:[2,59],23:[2,59],55:[2,59],58:[2,59],61:[2,59],62:[2,59],73:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59],86:[2,59],87:[2,59],88:[2,59],89:[2,59],90:[2,59],91:[2,59],92:[2,59],93:[2,59],95:[2,59],100:[2,59]},{8:[2,60],13:[2,60],23:[2,60],55:[2,60],58:[2,60],61:[2,60],62:[2,60],73:[2,60],81:[2,60],82:[2,60],83:[2,60],84:[2,60],85:[2,60],86:[2,60],87:[2,60],88:[2,60],89:[2,60],90:[2,60],91:[2,60],92:[2,60],93:[2,60],95:[2,60],100:[2,60]},{8:[2,61],13:[2,61],23:[2,61],55:[2,61],58:[2,61],61:[2,61],62:[2,61],73:[2,61],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[2,61],87:[2,61],88:[2,61],89:[2,61],90:[2,61],91:[2,61],92:[2,61],93:[2,61],95:[2,61],100:[2,61]},{8:[2,62],13:[2,62],23:[2,62],55:[2,62],58:[2,62],61:[2,62],62:[2,62],73:[2,62],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[2,62],87:[2,62],88:[2,62],89:[2,62],90:[2,62],91:[2,62],92:[2,62],93:[2,62],95:[2,62],100:[2,62]},{8:[2,63],13:[2,63],23:[2,63],55:[2,63],58:[2,63],61:[2,63],62:[2,63],73:[2,63],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[2,63],87:[2,63],88:[2,63],89:[2,63],90:[2,63],91:[2,63],92:[2,63],93:[2,63],95:[2,63],100:[2,63]},{8:[2,64],13:[2,64],23:[2,64],55:[2,64],58:[2,64],61:[2,64],62:[2,64],73:[2,64],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[2,64],87:[2,64],88:[2,64],89:[2,64],90:[2,64],91:[2,64],92:[2,64],93:[2,64],95:[2,64],100:[2,64]},{8:[2,65],13:[2,65],23:[2,65],55:[2,65],58:[2,65],61:[2,65],62:[2,65],73:[2,65],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[2,65],87:[2,65],88:[2,65],89:[2,65],90:[2,65],91:[2,65],92:[2,65],93:[2,65],95:[2,65],100:[2,65]},{8:[2,66],13:[2,66],23:[2,66],55:[2,66],58:[2,66],61:[2,66],62:[2,66],73:[2,66],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[2,66],87:[2,66],88:[2,66],89:[2,66],90:[2,66],91:[2,66],92:[2,66],93:[2,66],95:[2,66],100:[2,66]},{8:[2,67],13:[2,67],23:[2,67],55:[2,67],58:[2,67],61:[1,82],62:[1,83],73:[2,67],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[2,67],91:[2,67],92:[2,67],93:[2,67],95:[2,67],100:[2,67]},{8:[2,68],13:[2,68],23:[2,68],55:[2,68],58:[2,68],61:[1,82],62:[1,83],73:[2,68],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[2,68],91:[2,68],92:[2,68],93:[2,68],95:[2,68],100:[2,68]},{8:[2,69],13:[2,69],23:[2,69],55:[2,69],58:[2,69],61:[1,82],62:[1,83],73:[2,69],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[2,69],91:[2,69],92:[2,69],93:[2,69],95:[2,69],100:[2,69]},{8:[2,70],13:[2,70],23:[2,70],55:[2,70],58:[2,70],61:[1,82],62:[1,83],73:[2,70],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[2,70],91:[2,70],92:[2,70],93:[2,70],95:[2,70],100:[2,70]},{8:[2,42],13:[2,42],23:[2,42],54:[2,42],55:[2,42],56:[2,42],58:[2,42],59:[2,42],61:[2,42],62:[2,42],73:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],86:[2,42],87:[2,42],88:[2,42],89:[2,42],90:[2,42],91:[2,42],92:[2,42],93:[2,42],95:[2,42],96:[2,42],98:[2,42],100:[2,42]},{58:[1,164]},{58:[2,102],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[1,165]},{8:[2,107],12:[1,73],14:72,26:168,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],71:166,73:[2,107],74:[1,34],75:167,78:35,79:[1,36],80:[1,37]},{7:[2,104],8:[2,104],12:[2,104],54:[2,104],56:[2,104],60:[2,104],61:[2,104],63:[2,104],64:[2,104],65:[2,104],68:[2,104],73:[2,104],74:[2,104],79:[2,104],80:[2,104]},{8:[1,169]},{5:[2,5],8:[2,5],10:[2,5],12:[2,5],24:[2,5],27:[2,5],28:[2,5],29:[2,5],32:[2,5],35:[2,5],49:[2,5],51:[2,5],54:[2,5],56:[2,5],60:[2,5],61:[2,5],63:[2,5],64:[2,5],65:[2,5],68:[2,5],74:[2,5],79:[2,5],80:[2,5]},{12:[2,80]},{5:[2,72],8:[2,72],10:[2,72],12:[2,72],13:[2,72],24:[2,72],27:[2,72],28:[2,72],29:[2,72],32:[2,72],35:[2,72],49:[2,72],51:[2,72],54:[2,72],56:[2,72],60:[2,72],61:[2,72],63:[2,72],64:[2,72],65:[2,72],68:[2,72],74:[2,72],79:[2,72],80:[2,72]},{5:[2,13],8:[2,13],10:[2,13],12:[2,13],24:[2,13],27:[2,13],28:[2,13],29:[2,13],32:[2,13],35:[2,13],49:[2,13],51:[2,13],54:[2,13],56:[2,13],60:[2,13],61:[2,13],63:[2,13],64:[2,13],65:[2,13],68:[2,13],74:[2,13],79:[2,13],80:[2,13]},{5:[2,14],8:[2,14],10:[2,14],12:[2,14],24:[2,14],27:[2,14],28:[2,14],29:[2,14],32:[2,14],35:[2,14],49:[2,14],51:[2,14],54:[2,14],56:[2,14],60:[2,14],61:[2,14],63:[2,14],64:[2,14],65:[2,14],68:[2,14],74:[2,14],79:[2,14],80:[2,14]},{12:[2,84],54:[2,84],56:[2,84],60:[2,84],61:[2,84],63:[2,84],64:[2,84],65:[2,84],68:[2,84],74:[2,84],79:[2,84],80:[2,84]},{55:[1,170]},{55:[2,114],61:[1,82],62:[1,83],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[1,171]},{8:[2,39],13:[2,39],23:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],54:[2,39],55:[2,39],56:[2,39],58:[2,39],59:[2,39],61:[2,39],62:[2,39],73:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39],86:[2,39],87:[2,39],88:[2,39],89:[2,39],90:[2,39],91:[2,39],92:[2,39],93:[2,39],95:[2,39],96:[2,39],98:[2,39],100:[2,39]},{12:[2,86],13:[2,86],54:[2,86],56:[2,86],60:[2,86],61:[2,86],63:[2,86],64:[2,86],65:[2,86],68:[2,86],74:[2,86],79:[2,86],80:[2,86]},{12:[2,90],13:[2,90],54:[2,90],56:[2,90],60:[2,90],61:[2,90],63:[2,90],64:[2,90],65:[2,90],68:[2,90],74:[2,90],79:[2,90],80:[2,90]},{12:[2,94],13:[2,94],54:[2,94],56:[2,94],60:[2,94],61:[2,94],63:[2,94],64:[2,94],65:[2,94],68:[2,94],74:[2,94],79:[2,94],80:[2,94]},{5:[2,20],8:[2,20],10:[2,20],12:[2,20],24:[2,20],27:[2,20],28:[2,20],29:[2,20],32:[2,20],35:[2,20],49:[2,20],51:[2,20],54:[2,20],56:[2,20],60:[2,20],61:[2,20],63:[2,20],64:[2,20],65:[2,20],68:[2,20],74:[2,20],79:[2,20],80:[2,20]},{5:[2,21],8:[2,21],10:[2,21],12:[2,21],24:[2,21],27:[2,21],28:[2,21],29:[2,21],32:[2,21],35:[2,21],49:[2,21],51:[2,21],54:[2,21],56:[2,21],60:[2,21],61:[2,21],63:[2,21],64:[2,21],65:[2,21],68:[2,21],74:[2,21],79:[2,21],80:[2,21]},{5:[2,78],8:[2,78],10:[2,78],12:[2,78],24:[2,78],27:[2,78],28:[2,78],29:[2,78],32:[2,78],35:[2,78],49:[2,78],51:[2,78],54:[2,78],56:[2,78],60:[2,78],61:[2,78],63:[2,78],64:[2,78],65:[2,78],68:[2,78],74:[2,78],79:[2,78],80:[2,78]},{5:[2,116],8:[2,116],10:[2,116],12:[2,116],24:[2,116],27:[2,116],28:[2,116],29:[2,116],32:[2,116],35:[2,116],49:[2,116],51:[2,116],54:[2,116],56:[2,116],60:[2,116],61:[2,116],63:[2,116],64:[2,116],65:[2,116],68:[2,116],74:[2,116],79:[2,116],80:[2,116]},{5:[2,30],8:[2,30],10:[2,30],12:[2,30],24:[2,30],27:[2,30],28:[2,30],29:[2,30],32:[2,30],35:[2,30],49:[2,30],50:[1,172],51:[2,30],54:[2,30],56:[2,30],60:[2,30],61:[2,30],63:[2,30],64:[2,30],65:[2,30],68:[2,30],74:[2,30],79:[2,30],80:[2,30]},{5:[2,33],8:[2,33],10:[2,33],12:[2,33],24:[2,33],27:[2,33],28:[2,33],29:[2,33],32:[2,33],35:[2,33],49:[2,33],51:[2,33],54:[2,33],56:[2,33],60:[2,33],61:[2,33],63:[2,33],64:[2,33],65:[2,33],68:[2,33],74:[2,33],79:[2,33],80:[2,33]},{8:[2,46],13:[2,46],23:[2,46],54:[2,46],55:[2,46],56:[2,46],58:[2,46],59:[2,46],61:[2,46],62:[2,46],73:[2,46],81:[2,46],82:[2,46],83:[2,46],84:[2,46],85:[2,46],86:[2,46],87:[2,46],88:[2,46],89:[2,46],90:[2,46],91:[2,46],92:[2,46],93:[2,46],95:[2,46],96:[2,46],98:[2,46],100:[2,46]},{12:[2,100],54:[2,100],56:[2,100],58:[2,100],60:[2,100],61:[2,100],63:[2,100],64:[2,100],65:[2,100],68:[2,100],74:[2,100],79:[2,100],80:[2,100]},{8:[2,109],72:173,73:[2,109]},{8:[2,108],73:[2,108],100:[1,174]},{8:[2,49],23:[1,175],61:[1,82],62:[1,83],73:[2,49],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[2,49]},{5:[2,2],8:[2,2],10:[2,2],12:[2,2],13:[2,2],23:[2,2],24:[2,2],27:[2,2],28:[2,2],29:[2,2],32:[2,2],35:[2,2],49:[2,2],50:[2,2],51:[2,2],54:[2,2],55:[2,2],56:[2,2],58:[2,2],59:[2,2],60:[2,2],61:[2,2],62:[2,2],63:[2,2],64:[2,2],65:[2,2],68:[2,2],73:[2,2],74:[2,2],79:[2,2],80:[2,2],81:[2,2],82:[2,2],83:[2,2],84:[2,2],85:[2,2],86:[2,2],87:[2,2],88:[2,2],89:[2,2],90:[2,2],91:[2,2],92:[2,2],93:[2,2],95:[2,2],96:[2,2],98:[2,2],100:[2,2]},{8:[2,51],13:[2,51],23:[2,51],54:[2,51],55:[2,51],56:[2,51],58:[2,51],59:[2,51],61:[2,51],62:[2,51],73:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51],86:[2,51],87:[2,51],88:[2,51],89:[2,51],90:[2,51],91:[2,51],92:[2,51],93:[2,51],95:[2,51],96:[2,51],98:[2,51],100:[2,51]},{12:[2,112],54:[2,112],55:[2,112],56:[2,112],60:[2,112],61:[2,112],63:[2,112],64:[2,112],65:[2,112],68:[2,112],74:[2,112],79:[2,112],80:[2,112]},{20:177,23:[1,176],49:[1,22]},{8:[1,179],73:[1,178]},{8:[2,106],12:[2,106],54:[2,106],56:[2,106],60:[2,106],61:[2,106],63:[2,106],64:[2,106],65:[2,106],68:[2,106],73:[2,106],74:[2,106],79:[2,106],80:[2,106]},{12:[1,73],14:72,26:180,38:71,52:16,53:24,54:[1,25],56:[1,32],60:[1,27],61:[1,28],63:[1,29],64:[1,30],65:[1,31],68:[1,33],74:[1,34],78:35,79:[1,36],80:[1,37]},{6:181,7:[1,96]},{5:[2,32],8:[2,32],10:[2,32],12:[2,32],24:[2,32],27:[2,32],28:[2,32],29:[2,32],32:[2,32],35:[2,32],49:[2,32],51:[2,32],54:[2,32],56:[2,32],60:[2,32],61:[2,32],63:[2,32],64:[2,32],65:[2,32],68:[2,32],74:[2,32],79:[2,32],80:[2,32]},{8:[2,47],13:[2,47],23:[2,47],54:[2,47],55:[2,47],56:[2,47],58:[2,47],59:[2,47],61:[2,47],62:[2,47],73:[2,47],81:[2,47],82:[2,47],83:[2,47],84:[2,47],85:[2,47],86:[2,47],87:[2,47],88:[2,47],89:[2,47],90:[2,47],91:[2,47],92:[2,47],93:[2,47],95:[2,47],96:[2,47],98:[2,47],100:[2,47]},{8:[2,110],73:[2,110]},{8:[2,50],61:[1,82],62:[1,83],73:[2,50],81:[1,77],82:[1,78],83:[1,79],84:[1,80],85:[1,81],86:[1,84],87:[1,85],88:[1,86],89:[1,87],90:[1,88],91:[1,89],92:[1,90],93:[1,91],100:[2,50]},{5:[2,31],8:[2,31],10:[2,31],12:[2,31],24:[2,31],27:[2,31],28:[2,31],29:[2,31],32:[2,31],35:[2,31],49:[2,31],51:[2,31],54:[2,31],56:[2,31],60:[2,31],61:[2,31],63:[2,31],64:[2,31],65:[2,31],68:[2,31],74:[2,31],79:[2,31],80:[2,31]}],
defaultActions: {38:[2,1],42:[2,82],57:[2,28],58:[2,29],108:[2,17],110:[2,18],112:[2,19],147:[2,80]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return '`'
break;
case 11:return 60 // null, void, empty, blank, nil?
break;
case 12:return 63
break;
case 13:return 64
break;
case 14:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 65;
break;
case 15:return 56
break;
case 16:return 58
break;
case 17:return 54
break;
case 18:return 55
break;
case 19:return 68
break;
case 20:return 73
break;
case 21:return 100
break;
case 22:return 74
break;
case 23:return 23
break;
case 24:return 13
break;
case 25:return 93
break;
case 26:return 59
break;
case 27:return 86
break;
case 28:return 87
break;
case 29:return 88
break;
case 30:return 89
break;
case 31:return 90
break;
case 32:return 91
break;
case 33:return 80
break;
case 34:return 47
break;
case 35:return 48
break;
case 36:return 42
break;
case 37:return 43
break;
case 38:return 44
break;
case 39:return 45
break;
case 40:return 46
break;
case 41:return 95
break;
case 42:return 98 // future connector
break;
case 43:return '>>' // stream connector
break;
case 44:return 81
break;
case 45:return 82
break;
case 46:return 83
break;
case 47:return 84
break;
case 48:return 85
break;
case 49:return 61
break;
case 50:return 62
break;
case 51:return 41
break;
case 52:return '?'
break;
case 53:return 79
break;
case 54:return 22
break;
case 55:return 10
break;
case 56:return 49
break;
case 57:return 50
break;
case 58:return 96
break;
case 59:return 51
break;
case 60:return 24
break;
case 61:return 92
break;
case 62:return 27
break;
case 63:return 29
break;
case 64:return 32
break;
case 65:return 35    // recovers from an error. recover? rebound?
break;
case 66:return 12
break;
case 67:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:`)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:is\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:complete\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}