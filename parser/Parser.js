/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"action_definition":4,"EOF":5,"ACTION":6,"block":7,"(":8,"action_definition_repetition0":9,"action_definition_option0":10,")":11,"BEGIN":12,"PASS":13,"END":14,"block_repetition0":15,"statement":16,"NAME":17,"IS":18,"literal":19,"identifier":20,"=":21,"expression":22,"selection_statement":23,"sequence_statement":24,"IF":25,"ELSE":26,"BOOLEAN":27,"CONSTANT":28,"STRING_LITERAL":29,"[":30,"]":31,".":32,"primary_expression":33,"unary_expression":34,"#":35,"multiplicative_expression":36,"*":37,"/":38,"%":39,"additive_expression":40,"+":41,"-":42,"relational_expression":43,"<":44,">":45,"<=":46,">=":47,"equality_expression":48,"==":49,"!=":50,"and_expression":51,"&":52,"exclusive_or_expression":53,"^":54,"inclusive_or_expression":55,"|":56,"logical_and_expression":57,"&&":58,"logical_or_expression":59,"||":60,"conditional_expression":61,"?":62,":":63,"invocation":64,"invocation_repetition0":65,"invocation_option0":66,"connector":67,"sink":68,"sink_repetition0":69,"sink_option0":70,">~":71,"->":72,"=>":73,">>":74,">|":75,",":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ACTION",8:"(",11:")",12:"BEGIN",13:"PASS",14:"END",17:"NAME",18:"IS",21:"=",25:"IF",26:"ELSE",27:"BOOLEAN",28:"CONSTANT",29:"STRING_LITERAL",30:"[",31:"]",32:".",35:"#",37:"*",38:"/",39:"%",41:"+",42:"-",44:"<",45:">",46:"<=",47:">=",49:"==",50:"!=",52:"&",54:"^",56:"|",58:"&&",60:"||",62:"?",63:":",71:">~",72:"->",73:"=>",74:">>",75:">|",76:","},
productions_: [0,[3,2],[4,2],[4,6],[7,3],[7,3],[16,3],[16,3],[16,1],[16,1],[23,5],[23,7],[23,7],[19,1],[19,1],[19,1],[20,1],[20,4],[20,3],[33,1],[33,1],[33,1],[33,3],[34,1],[34,2],[36,1],[36,3],[36,3],[36,3],[40,1],[40,3],[40,3],[43,1],[43,3],[43,3],[43,3],[43,3],[48,1],[48,3],[48,3],[51,1],[51,3],[53,1],[53,3],[55,1],[55,3],[57,1],[57,3],[59,1],[59,3],[61,1],[61,5],[22,1],[64,5],[24,1],[24,3],[24,3],[68,1],[68,5],[68,1],[67,1],[67,1],[67,1],[67,1],[67,1],[9,0],[9,3],[10,0],[10,1],[15,0],[15,2],[65,0],[65,3],[66,0],[66,1],[69,0],[69,3],[70,0],[70,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; return this.$; 
break;
case 2:this.$ = new yy.Action([], $$[$0]);
break;
case 3:this.$ = new yy.Action($$[$0-2] ? $$[$0-3].concat([$$[$0-2]]) : $$[$0-3], $$[$0]);
break;
case 4:this.$ = [];
break;
case 5:this.$ = $$[$0-1];
break;
case 6:this.$ = ['define', $$[$0-2], $$[$0]];
break;
case 7:this.$ = new yy.Operator('assign', $$[$0-2], $$[$0]);
break;
case 10:this.$ = new yy.Selection($$[$0-2], $$[$0]);
break;
case 11:this.$ = new yy.Selection($$[$0-4], $$[$0-2], $$[$0]);
break;
case 12:this.$ = new yy.Selection($$[$0-4], $$[$0-2], $$[$0]);
break;
case 13:this.$ = new yy.Literal($$[$0] === 'true' ? true : false);
break;
case 14:this.$ = new yy.Literal(parseFloat($$[$0]));
break;
case 15:this.$ = new yy.Literal($$[$0]);
break;
case 16:this.$ = new yy.Identifier($$[$0]);
break;
case 17:this.$ = new yy.Identifier($$[$0-3], $$[$0-1]);
break;
case 18:this.$ = new yy.Identifier($$[$0-2], $$[$0]);
break;
case 22:this.$ = $$[$0-1];
break;
case 24:this.$ = new yy.Operator('card', $$[$0]);
break;
case 26:this.$ = new yy.Operator('mult', $$[$0-2], $$[$0]);
break;
case 27:this.$ = new yy.Operator('div', $$[$0-2], $$[$0]);
break;
case 28:this.$ = new yy.Operator('mod', $$[$0-2], $$[$0]);
break;
case 30:this.$ = new yy.Operator('add', $$[$0-2], $$[$0]);
break;
case 31:this.$ = new yy.Operator('sub', $$[$0-2], $$[$0]);
break;
case 33:this.$ = new yy.Relational('lt', $$[$0-2], $$[$0]);
break;
case 34:this.$ = new yy.Relational('gt', $$[$0-2], $$[$0]);
break;
case 35:this.$ = new yy.Relational('le', $$[$0-2], $$[$0]);
break;
case 36:this.$ = new yy.Relational('ge', $$[$0-2], $$[$0]);
break;
case 38:this.$ = new yy.Relational('equality', $$[$0-2], $$[$0]);
break;
case 39:this.$ = new yy.Relational('inequality', $$[$0-2], $$[$0]);
break;
case 41:this.$ = ['bitwise_and', $$[$0-2], $$[$0]];
break;
case 43:this.$ = ['xor', $$[$0-2], $$[$0]];
break;
case 45:this.$ = ['bitwise_or', $$[$0-2], $$[$0]];
break;
case 47:this.$ = ['and', $$[$0-2], $$[$0]];
break;
case 49:this.$ = ['or', $$[$0-2], $$[$0]];
break;
case 51:this.$ = ['conditional', $$[$0-4], $$[$0-2], $$[$0]];
break;
case 53:this.$ = new yy.Invocation($$[$0-4], $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : $$[$0-2]);
break;
case 55:this.$ = [$$[$0-1], $$[$0-2], $$[$0]];
break;
case 56:this.$ = [$$[$0-1], $$[$0-2], $$[$0]];
break;
case 58:this.$ = {action: ($$[$0-2] ? $$[$0-3].concat([$$[$0-2]]) : $$[$0-3]), statements: $$[$0]};
break;
case 59:this.$ = {'action': [], statements: $$[$0]};
break;
case 65:this.$ = [];
break;
case 66:$$[$0-2].push($$[$0-1]);
break;
case 69:this.$ = [];
break;
case 70:$$[$0-1].push($$[$0]);
break;
case 71:this.$ = [];
break;
case 72:$$[$0-2].push($$[$0-1]);
break;
case 75:this.$ = [];
break;
case 76:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:5,8:[1,6],12:[1,7]},{1:[2,1]},{5:[2,2],6:[2,2],8:[2,2],11:[2,2],14:[2,2],17:[2,2],25:[2,2],27:[2,2],28:[2,2],29:[2,2],31:[2,2],35:[2,2],37:[2,2],38:[2,2],39:[2,2],41:[2,2],42:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],49:[2,2],50:[2,2],52:[2,2],54:[2,2],56:[2,2],58:[2,2],60:[2,2],62:[2,2],63:[2,2],71:[2,2],72:[2,2],73:[2,2],74:[2,2],75:[2,2],76:[2,2]},{9:8,11:[2,65],17:[2,65]},{6:[2,69],8:[2,69],13:[1,9],14:[2,69],15:10,17:[2,69],25:[2,69],27:[2,69],28:[2,69],29:[2,69],35:[2,69]},{10:11,11:[2,67],17:[1,12]},{14:[1,13]},{4:37,6:[1,3],8:[1,38],14:[1,14],16:15,17:[1,16],19:36,20:17,22:22,23:18,24:19,25:[1,20],27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:23,64:21},{11:[1,42]},{11:[2,68],76:[1,43]},{5:[2,4],6:[2,4],8:[2,4],11:[2,4],14:[2,4],17:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],29:[2,4],31:[2,4],35:[2,4],37:[2,4],38:[2,4],39:[2,4],41:[2,4],42:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],49:[2,4],50:[2,4],52:[2,4],54:[2,4],56:[2,4],58:[2,4],60:[2,4],62:[2,4],63:[2,4],71:[2,4],72:[2,4],73:[2,4],74:[2,4],75:[2,4],76:[2,4]},{5:[2,5],6:[2,5],8:[2,5],11:[2,5],14:[2,5],17:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],31:[2,5],35:[2,5],37:[2,5],38:[2,5],39:[2,5],41:[2,5],42:[2,5],44:[2,5],45:[2,5],46:[2,5],47:[2,5],49:[2,5],50:[2,5],52:[2,5],54:[2,5],56:[2,5],58:[2,5],60:[2,5],62:[2,5],63:[2,5],71:[2,5],72:[2,5],73:[2,5],74:[2,5],75:[2,5],76:[2,5]},{6:[2,70],8:[2,70],14:[2,70],17:[2,70],25:[2,70],27:[2,70],28:[2,70],29:[2,70],35:[2,70]},{8:[2,16],18:[1,44],21:[2,16],30:[2,16],32:[2,16],37:[2,16],38:[2,16],39:[2,16],41:[2,16],42:[2,16],44:[2,16],45:[2,16],46:[2,16],47:[2,16],49:[2,16],50:[2,16],52:[2,16],54:[2,16],56:[2,16],58:[2,16],60:[2,16],62:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16]},{8:[1,48],21:[1,45],30:[1,46],32:[1,47],37:[2,20],38:[2,20],39:[2,20],41:[2,20],42:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20],49:[2,20],50:[2,20],52:[2,20],54:[2,20],56:[2,20],58:[2,20],60:[2,20],62:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20]},{6:[2,8],8:[2,8],14:[2,8],17:[2,8],25:[2,8],27:[2,8],28:[2,8],29:[2,8],35:[2,8]},{6:[2,9],8:[2,9],14:[2,9],17:[2,9],25:[2,9],27:[2,9],28:[2,9],29:[2,9],35:[2,9],67:49,71:[1,50],72:[1,51],73:[1,52],74:[1,53],75:[1,54]},{8:[1,55]},{6:[2,54],8:[2,54],14:[2,54],17:[2,54],25:[2,54],27:[2,54],28:[2,54],29:[2,54],35:[2,54],71:[2,54],72:[2,54],73:[2,54],74:[2,54],75:[2,54]},{67:56,71:[1,50],72:[1,51],73:[1,52],74:[1,53],75:[1,54]},{6:[2,52],8:[2,52],11:[2,52],14:[2,52],17:[2,52],25:[2,52],27:[2,52],28:[2,52],29:[2,52],31:[2,52],35:[2,52],63:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],76:[2,52]},{6:[2,50],8:[2,50],11:[2,50],14:[2,50],17:[2,50],25:[2,50],27:[2,50],28:[2,50],29:[2,50],31:[2,50],35:[2,50],60:[1,58],62:[1,57],63:[2,50],71:[2,50],72:[2,50],73:[2,50],74:[2,50],75:[2,50],76:[2,50]},{6:[2,48],8:[2,48],11:[2,48],14:[2,48],17:[2,48],25:[2,48],27:[2,48],28:[2,48],29:[2,48],31:[2,48],35:[2,48],58:[1,59],60:[2,48],62:[2,48],63:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48],75:[2,48],76:[2,48]},{6:[2,46],8:[2,46],11:[2,46],14:[2,46],17:[2,46],25:[2,46],27:[2,46],28:[2,46],29:[2,46],31:[2,46],35:[2,46],56:[1,60],58:[2,46],60:[2,46],62:[2,46],63:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46]},{6:[2,44],8:[2,44],11:[2,44],14:[2,44],17:[2,44],25:[2,44],27:[2,44],28:[2,44],29:[2,44],31:[2,44],35:[2,44],54:[1,61],56:[2,44],58:[2,44],60:[2,44],62:[2,44],63:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],76:[2,44]},{6:[2,42],8:[2,42],11:[2,42],14:[2,42],17:[2,42],25:[2,42],27:[2,42],28:[2,42],29:[2,42],31:[2,42],35:[2,42],52:[1,62],54:[2,42],56:[2,42],58:[2,42],60:[2,42],62:[2,42],63:[2,42],71:[2,42],72:[2,42],73:[2,42],74:[2,42],75:[2,42],76:[2,42]},{6:[2,40],8:[2,40],11:[2,40],14:[2,40],17:[2,40],25:[2,40],27:[2,40],28:[2,40],29:[2,40],31:[2,40],35:[2,40],49:[1,63],50:[1,64],52:[2,40],54:[2,40],56:[2,40],58:[2,40],60:[2,40],62:[2,40],63:[2,40],71:[2,40],72:[2,40],73:[2,40],74:[2,40],75:[2,40],76:[2,40]},{6:[2,37],8:[2,37],11:[2,37],14:[2,37],17:[2,37],25:[2,37],27:[2,37],28:[2,37],29:[2,37],31:[2,37],35:[2,37],44:[1,65],45:[1,66],46:[1,67],47:[1,68],49:[2,37],50:[2,37],52:[2,37],54:[2,37],56:[2,37],58:[2,37],60:[2,37],62:[2,37],63:[2,37],71:[2,37],72:[2,37],73:[2,37],74:[2,37],75:[2,37],76:[2,37]},{6:[2,32],8:[2,32],11:[2,32],14:[2,32],17:[2,32],25:[2,32],27:[2,32],28:[2,32],29:[2,32],31:[2,32],35:[2,32],41:[1,69],42:[1,70],44:[2,32],45:[2,32],46:[2,32],47:[2,32],49:[2,32],50:[2,32],52:[2,32],54:[2,32],56:[2,32],58:[2,32],60:[2,32],62:[2,32],63:[2,32],71:[2,32],72:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32]},{6:[2,29],8:[2,29],11:[2,29],14:[2,29],17:[2,29],25:[2,29],27:[2,29],28:[2,29],29:[2,29],31:[2,29],35:[2,29],37:[1,71],38:[1,72],39:[1,73],41:[2,29],42:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],49:[2,29],50:[2,29],52:[2,29],54:[2,29],56:[2,29],58:[2,29],60:[2,29],62:[2,29],63:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29]},{6:[2,25],8:[2,25],11:[2,25],14:[2,25],17:[2,25],25:[2,25],27:[2,25],28:[2,25],29:[2,25],31:[2,25],35:[2,25],37:[2,25],38:[2,25],39:[2,25],41:[2,25],42:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],49:[2,25],50:[2,25],52:[2,25],54:[2,25],56:[2,25],58:[2,25],60:[2,25],62:[2,25],63:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25]},{6:[2,23],8:[2,23],11:[2,23],14:[2,23],17:[2,23],25:[2,23],27:[2,23],28:[2,23],29:[2,23],31:[2,23],35:[2,23],37:[2,23],38:[2,23],39:[2,23],41:[2,23],42:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23],49:[2,23],50:[2,23],52:[2,23],54:[2,23],56:[2,23],58:[2,23],60:[2,23],62:[2,23],63:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23]},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:74},{6:[2,19],8:[2,19],11:[2,19],14:[2,19],17:[2,19],25:[2,19],27:[2,19],28:[2,19],29:[2,19],31:[2,19],35:[2,19],37:[2,19],38:[2,19],39:[2,19],41:[2,19],42:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],49:[2,19],50:[2,19],52:[2,19],54:[2,19],56:[2,19],58:[2,19],60:[2,19],62:[2,19],63:[2,19],71:[2,19],72:[2,19],73:[2,19],74:[2,19],75:[2,19],76:[2,19]},{6:[2,21],8:[2,21],11:[2,21],14:[2,21],17:[2,21],25:[2,21],27:[2,21],28:[2,21],29:[2,21],31:[2,21],35:[2,21],37:[2,21],38:[2,21],39:[2,21],41:[2,21],42:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],49:[2,21],50:[2,21],52:[2,21],54:[2,21],56:[2,21],58:[2,21],60:[2,21],62:[2,21],63:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21]},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,22:77,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:23},{6:[2,13],8:[2,13],11:[2,13],14:[2,13],17:[2,13],25:[2,13],27:[2,13],28:[2,13],29:[2,13],31:[2,13],35:[2,13],37:[2,13],38:[2,13],39:[2,13],41:[2,13],42:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],49:[2,13],50:[2,13],52:[2,13],54:[2,13],56:[2,13],58:[2,13],60:[2,13],62:[2,13],63:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13],76:[2,13]},{6:[2,14],8:[2,14],11:[2,14],14:[2,14],17:[2,14],25:[2,14],27:[2,14],28:[2,14],29:[2,14],31:[2,14],35:[2,14],37:[2,14],38:[2,14],39:[2,14],41:[2,14],42:[2,14],44:[2,14],45:[2,14],46:[2,14],47:[2,14],49:[2,14],50:[2,14],52:[2,14],54:[2,14],56:[2,14],58:[2,14],60:[2,14],62:[2,14],63:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14],76:[2,14]},{6:[2,15],8:[2,15],11:[2,15],14:[2,15],17:[2,15],25:[2,15],27:[2,15],28:[2,15],29:[2,15],31:[2,15],35:[2,15],37:[2,15],38:[2,15],39:[2,15],41:[2,15],42:[2,15],44:[2,15],45:[2,15],46:[2,15],47:[2,15],49:[2,15],50:[2,15],52:[2,15],54:[2,15],56:[2,15],58:[2,15],60:[2,15],62:[2,15],63:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15],76:[2,15]},{7:78,12:[1,7]},{11:[2,66],17:[2,66]},{19:79,27:[1,39],28:[1,40],29:[1,41]},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,22:80,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:23},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,22:81,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:23},{17:[1,82]},{6:[2,71],8:[2,71],11:[2,71],17:[2,71],27:[2,71],28:[2,71],29:[2,71],35:[2,71],65:83},{7:87,8:[1,86],12:[1,7],17:[1,76],20:85,68:84},{8:[2,60],12:[2,60],17:[2,60]},{8:[2,61],12:[2,61],17:[2,61]},{8:[2,62],12:[2,62],17:[2,62]},{8:[2,63],12:[2,63],17:[2,63]},{8:[2,64],12:[2,64],17:[2,64]},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,22:88,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:23},{7:87,8:[1,86],12:[1,7],17:[1,76],20:85,68:89},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,22:90,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:23},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:91},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:92},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:93},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:94},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:95},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:96},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:97},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:98},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:99},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:100},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:101},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:102},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:103},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:104},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:105},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:106},{6:[2,24],8:[2,24],11:[2,24],14:[2,24],17:[2,24],25:[2,24],27:[2,24],28:[2,24],29:[2,24],31:[2,24],35:[2,24],37:[2,24],38:[2,24],39:[2,24],41:[2,24],42:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],49:[2,24],50:[2,24],52:[2,24],54:[2,24],56:[2,24],58:[2,24],60:[2,24],62:[2,24],63:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24]},{6:[2,20],8:[2,20],11:[2,20],14:[2,20],17:[2,20],25:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[1,46],31:[2,20],32:[1,47],35:[2,20],37:[2,20],38:[2,20],39:[2,20],41:[2,20],42:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20],49:[2,20],50:[2,20],52:[2,20],54:[2,20],56:[2,20],58:[2,20],60:[2,20],62:[2,20],63:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20],76:[2,20]},{6:[2,16],8:[2,16],11:[2,16],14:[2,16],17:[2,16],25:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],35:[2,16],37:[2,16],38:[2,16],39:[2,16],41:[2,16],42:[2,16],44:[2,16],45:[2,16],46:[2,16],47:[2,16],49:[2,16],50:[2,16],52:[2,16],54:[2,16],56:[2,16],58:[2,16],60:[2,16],62:[2,16],63:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16],76:[2,16]},{11:[1,107]},{5:[2,3],6:[2,3],8:[2,3],11:[2,3],14:[2,3],17:[2,3],25:[2,3],27:[2,3],28:[2,3],29:[2,3],31:[2,3],35:[2,3],37:[2,3],38:[2,3],39:[2,3],41:[2,3],42:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],49:[2,3],50:[2,3],52:[2,3],54:[2,3],56:[2,3],58:[2,3],60:[2,3],62:[2,3],63:[2,3],71:[2,3],72:[2,3],73:[2,3],74:[2,3],75:[2,3],76:[2,3]},{6:[2,6],8:[2,6],14:[2,6],17:[2,6],25:[2,6],27:[2,6],28:[2,6],29:[2,6],35:[2,6]},{6:[2,7],8:[2,7],14:[2,7],17:[2,7],25:[2,7],27:[2,7],28:[2,7],29:[2,7],35:[2,7]},{31:[1,108]},{6:[2,18],8:[2,18],11:[2,18],14:[2,18],17:[2,18],21:[2,18],25:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],35:[2,18],37:[2,18],38:[2,18],39:[2,18],41:[2,18],42:[2,18],44:[2,18],45:[2,18],46:[2,18],47:[2,18],49:[2,18],50:[2,18],52:[2,18],54:[2,18],56:[2,18],58:[2,18],60:[2,18],62:[2,18],63:[2,18],71:[2,18],72:[2,18],73:[2,18],74:[2,18],75:[2,18],76:[2,18]},{4:37,6:[1,3],8:[1,38],11:[2,73],17:[1,76],19:36,20:75,22:110,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:23,66:109},{6:[2,56],8:[2,56],14:[2,56],17:[2,56],25:[2,56],27:[2,56],28:[2,56],29:[2,56],35:[2,56],71:[2,56],72:[2,56],73:[2,56],74:[2,56],75:[2,56]},{6:[2,57],8:[2,57],14:[2,57],17:[2,57],25:[2,57],27:[2,57],28:[2,57],29:[2,57],30:[1,46],32:[1,47],35:[2,57],71:[2,57],72:[2,57],73:[2,57],74:[2,57],75:[2,57]},{11:[2,75],17:[2,75],69:111},{6:[2,59],8:[2,59],14:[2,59],17:[2,59],25:[2,59],27:[2,59],28:[2,59],29:[2,59],35:[2,59],71:[2,59],72:[2,59],73:[2,59],74:[2,59],75:[2,59]},{11:[1,112]},{6:[2,55],8:[2,55],14:[2,55],17:[2,55],25:[2,55],27:[2,55],28:[2,55],29:[2,55],35:[2,55],71:[2,55],72:[2,55],73:[2,55],74:[2,55],75:[2,55]},{63:[1,113]},{6:[2,49],8:[2,49],11:[2,49],14:[2,49],17:[2,49],25:[2,49],27:[2,49],28:[2,49],29:[2,49],31:[2,49],35:[2,49],58:[1,59],60:[2,49],62:[2,49],63:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49],75:[2,49],76:[2,49]},{6:[2,47],8:[2,47],11:[2,47],14:[2,47],17:[2,47],25:[2,47],27:[2,47],28:[2,47],29:[2,47],31:[2,47],35:[2,47],56:[1,60],58:[2,47],60:[2,47],62:[2,47],63:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47],76:[2,47]},{6:[2,45],8:[2,45],11:[2,45],14:[2,45],17:[2,45],25:[2,45],27:[2,45],28:[2,45],29:[2,45],31:[2,45],35:[2,45],54:[1,61],56:[2,45],58:[2,45],60:[2,45],62:[2,45],63:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],76:[2,45]},{6:[2,43],8:[2,43],11:[2,43],14:[2,43],17:[2,43],25:[2,43],27:[2,43],28:[2,43],29:[2,43],31:[2,43],35:[2,43],52:[1,62],54:[2,43],56:[2,43],58:[2,43],60:[2,43],62:[2,43],63:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43],75:[2,43],76:[2,43]},{6:[2,41],8:[2,41],11:[2,41],14:[2,41],17:[2,41],25:[2,41],27:[2,41],28:[2,41],29:[2,41],31:[2,41],35:[2,41],49:[1,63],50:[1,64],52:[2,41],54:[2,41],56:[2,41],58:[2,41],60:[2,41],62:[2,41],63:[2,41],71:[2,41],72:[2,41],73:[2,41],74:[2,41],75:[2,41],76:[2,41]},{6:[2,38],8:[2,38],11:[2,38],14:[2,38],17:[2,38],25:[2,38],27:[2,38],28:[2,38],29:[2,38],31:[2,38],35:[2,38],44:[1,65],45:[1,66],46:[1,67],47:[1,68],49:[2,38],50:[2,38],52:[2,38],54:[2,38],56:[2,38],58:[2,38],60:[2,38],62:[2,38],63:[2,38],71:[2,38],72:[2,38],73:[2,38],74:[2,38],75:[2,38],76:[2,38]},{6:[2,39],8:[2,39],11:[2,39],14:[2,39],17:[2,39],25:[2,39],27:[2,39],28:[2,39],29:[2,39],31:[2,39],35:[2,39],44:[1,65],45:[1,66],46:[1,67],47:[1,68],49:[2,39],50:[2,39],52:[2,39],54:[2,39],56:[2,39],58:[2,39],60:[2,39],62:[2,39],63:[2,39],71:[2,39],72:[2,39],73:[2,39],74:[2,39],75:[2,39],76:[2,39]},{6:[2,33],8:[2,33],11:[2,33],14:[2,33],17:[2,33],25:[2,33],27:[2,33],28:[2,33],29:[2,33],31:[2,33],35:[2,33],41:[1,69],42:[1,70],44:[2,33],45:[2,33],46:[2,33],47:[2,33],49:[2,33],50:[2,33],52:[2,33],54:[2,33],56:[2,33],58:[2,33],60:[2,33],62:[2,33],63:[2,33],71:[2,33],72:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33]},{6:[2,34],8:[2,34],11:[2,34],14:[2,34],17:[2,34],25:[2,34],27:[2,34],28:[2,34],29:[2,34],31:[2,34],35:[2,34],41:[1,69],42:[1,70],44:[2,34],45:[2,34],46:[2,34],47:[2,34],49:[2,34],50:[2,34],52:[2,34],54:[2,34],56:[2,34],58:[2,34],60:[2,34],62:[2,34],63:[2,34],71:[2,34],72:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34]},{6:[2,35],8:[2,35],11:[2,35],14:[2,35],17:[2,35],25:[2,35],27:[2,35],28:[2,35],29:[2,35],31:[2,35],35:[2,35],41:[1,69],42:[1,70],44:[2,35],45:[2,35],46:[2,35],47:[2,35],49:[2,35],50:[2,35],52:[2,35],54:[2,35],56:[2,35],58:[2,35],60:[2,35],62:[2,35],63:[2,35],71:[2,35],72:[2,35],73:[2,35],74:[2,35],75:[2,35],76:[2,35]},{6:[2,36],8:[2,36],11:[2,36],14:[2,36],17:[2,36],25:[2,36],27:[2,36],28:[2,36],29:[2,36],31:[2,36],35:[2,36],41:[1,69],42:[1,70],44:[2,36],45:[2,36],46:[2,36],47:[2,36],49:[2,36],50:[2,36],52:[2,36],54:[2,36],56:[2,36],58:[2,36],60:[2,36],62:[2,36],63:[2,36],71:[2,36],72:[2,36],73:[2,36],74:[2,36],75:[2,36],76:[2,36]},{6:[2,30],8:[2,30],11:[2,30],14:[2,30],17:[2,30],25:[2,30],27:[2,30],28:[2,30],29:[2,30],31:[2,30],35:[2,30],37:[1,71],38:[1,72],39:[1,73],41:[2,30],42:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],49:[2,30],50:[2,30],52:[2,30],54:[2,30],56:[2,30],58:[2,30],60:[2,30],62:[2,30],63:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30]},{6:[2,31],8:[2,31],11:[2,31],14:[2,31],17:[2,31],25:[2,31],27:[2,31],28:[2,31],29:[2,31],31:[2,31],35:[2,31],37:[1,71],38:[1,72],39:[1,73],41:[2,31],42:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],49:[2,31],50:[2,31],52:[2,31],54:[2,31],56:[2,31],58:[2,31],60:[2,31],62:[2,31],63:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31]},{6:[2,26],8:[2,26],11:[2,26],14:[2,26],17:[2,26],25:[2,26],27:[2,26],28:[2,26],29:[2,26],31:[2,26],35:[2,26],37:[2,26],38:[2,26],39:[2,26],41:[2,26],42:[2,26],44:[2,26],45:[2,26],46:[2,26],47:[2,26],49:[2,26],50:[2,26],52:[2,26],54:[2,26],56:[2,26],58:[2,26],60:[2,26],62:[2,26],63:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26]},{6:[2,27],8:[2,27],11:[2,27],14:[2,27],17:[2,27],25:[2,27],27:[2,27],28:[2,27],29:[2,27],31:[2,27],35:[2,27],37:[2,27],38:[2,27],39:[2,27],41:[2,27],42:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],49:[2,27],50:[2,27],52:[2,27],54:[2,27],56:[2,27],58:[2,27],60:[2,27],62:[2,27],63:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27]},{6:[2,28],8:[2,28],11:[2,28],14:[2,28],17:[2,28],25:[2,28],27:[2,28],28:[2,28],29:[2,28],31:[2,28],35:[2,28],37:[2,28],38:[2,28],39:[2,28],41:[2,28],42:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],49:[2,28],50:[2,28],52:[2,28],54:[2,28],56:[2,28],58:[2,28],60:[2,28],62:[2,28],63:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28]},{6:[2,22],8:[2,22],11:[2,22],14:[2,22],17:[2,22],25:[2,22],27:[2,22],28:[2,22],29:[2,22],31:[2,22],35:[2,22],37:[2,22],38:[2,22],39:[2,22],41:[2,22],42:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],49:[2,22],50:[2,22],52:[2,22],54:[2,22],56:[2,22],58:[2,22],60:[2,22],62:[2,22],63:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22]},{6:[2,17],8:[2,17],11:[2,17],14:[2,17],17:[2,17],21:[2,17],25:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],35:[2,17],37:[2,17],38:[2,17],39:[2,17],41:[2,17],42:[2,17],44:[2,17],45:[2,17],46:[2,17],47:[2,17],49:[2,17],50:[2,17],52:[2,17],54:[2,17],56:[2,17],58:[2,17],60:[2,17],62:[2,17],63:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17],76:[2,17]},{11:[1,114]},{11:[2,74],76:[1,115]},{11:[2,77],17:[1,117],70:116},{7:118,12:[1,7]},{4:37,6:[1,3],8:[1,38],17:[1,76],19:36,20:75,27:[1,39],28:[1,40],29:[1,41],33:34,34:33,35:[1,35],36:32,40:31,43:30,48:29,51:28,53:27,55:26,57:25,59:24,61:119},{6:[2,53],8:[2,53],14:[2,53],17:[2,53],25:[2,53],27:[2,53],28:[2,53],29:[2,53],35:[2,53],71:[2,53],72:[2,53],73:[2,53],74:[2,53],75:[2,53]},{6:[2,72],8:[2,72],11:[2,72],17:[2,72],27:[2,72],28:[2,72],29:[2,72],35:[2,72]},{11:[1,120]},{11:[2,78],76:[1,121]},{6:[2,10],8:[2,10],14:[2,10],17:[2,10],25:[2,10],26:[1,122],27:[2,10],28:[2,10],29:[2,10],35:[2,10]},{6:[2,51],8:[2,51],11:[2,51],14:[2,51],17:[2,51],25:[2,51],27:[2,51],28:[2,51],29:[2,51],31:[2,51],35:[2,51],63:[2,51],71:[2,51],72:[2,51],73:[2,51],74:[2,51],75:[2,51],76:[2,51]},{7:123,12:[1,7]},{11:[2,76],17:[2,76]},{7:124,12:[1,7],23:125,25:[1,20]},{6:[2,58],8:[2,58],14:[2,58],17:[2,58],25:[2,58],27:[2,58],28:[2,58],29:[2,58],35:[2,58],71:[2,58],72:[2,58],73:[2,58],74:[2,58],75:[2,58]},{6:[2,11],8:[2,11],14:[2,11],17:[2,11],25:[2,11],27:[2,11],28:[2,11],29:[2,11],35:[2,11]},{6:[2,12],8:[2,12],14:[2,12],17:[2,12],25:[2,12],27:[2,12],28:[2,12],29:[2,12],35:[2,12]}],
defaultActions: {4:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];

    yy = require('../ast');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:this.popState();
break;
case 3:/* skip comment */
break;
case 4:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 5:this.begin("indent");
break;
case 6:/* ignore blank lines */
break;
case 7:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 12;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 8:/* ignore all other whitespace */
break;
case 9:return ';'
break;
case 10:return 28
break;
case 11:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 29;
break;
case 12:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 29;
break;
case 13:return 30
break;
case 14:return 31
break;
case 15:return 8
break;
case 16:return 11
break;
case 17:return 76
break;
case 18:return 32
break;
case 19:return 49
break;
case 20:return 50
break;
case 21:return 46
break;
case 22:return 47
break;
case 23:return 63
break;
case 24:return 60
break;
case 25:return 58
break;
case 26:return 52
break;
case 27:return 56
break;
case 28:return 54
break;
case 29:return 71
break;
case 30:return 72
break;
case 31:return 74
break;
case 32:return 73
break;
case 33:return 75
break;
case 34:return 44
break;
case 35:return 45
break;
case 36:return 21
break;
case 37:return 41
break;
case 38:return 42
break;
case 39:return 37
break;
case 40:return 38
break;
case 41:return 39
break;
case 42:return 62
break;
case 43:return 35
break;
case 44:return 25
break;
case 45:return 26
break;
case 46:return 18
break;
case 47:return 'BREAK'
break;
case 48:return 6
break;
case 49:return 27
break;
case 50:return 13
break;
case 51:return 17
break;
case 52:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:;)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:".*")/,/^(?:'.*')/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?::)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:>~)/,/^(?:->)/,/^(?:>>)/,/^(?:=>)/,/^(?:>\|)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:#)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:is\b)/,/^(?:break\b)/,/^(?:action\b)/,/^(?:true|false\b)/,/^(?:pass\b)/,/^(?:[a-zA-Z][a-zA-Z0-9]*)/,/^(?:.)/],
conditions: {"indent":{"rules":[6,7],"inclusive":false},"comment":{"rules":[0,1,2,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}