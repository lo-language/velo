/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statement_list":4,"EOF":5,"block":6,"BEGIN":7,"END":8,"statement":9,"RECEIVE":10,"statement_repetition0":11,"ID":12,";":13,"DEFINE":14,"statement_group0":15,"DISTINGUISH":16,"statement_repetition_plus1":17,"application":18,"statement_option0":19,"response":20,"assignment":21,"step":22,"lvalue":23,"dispatch":24,"conditional":25,"iteration":26,"IS":27,":":28,"COMPLETE":29,"statement_repetition2":30,"expr":31,"SKIP":32,"STOP":33,"REPLY":34,"response_repetition0":35,"response_option0":36,"FAIL":37,"response_repetition1":38,"response_option1":39,"REPLACE":40,"response_repetition2":41,"response_option2":42,"assignment_op":43,"contingency":44,"=":45,"+=":46,"-=":47,"*=":48,"/=":49,"%=":50,"++":51,"--":52,"IF":53,"ELSE":54,"WHILE":55,"value":56,"literal":57,"(":58,")":59,"[":60,"lvalue_option0":61,"]":62,".":63,"lvalue_repetition_plus0":64,"NIL":65,"BOOLEAN":66,"NUMBER":67,"STRING":68,"literal_option0":69,"literal_repetition0":70,"literal_option1":71,"literal_option2":72,"{":73,"literal_option3":74,"literal_repetition1":75,"literal_option4":76,"literal_option5":77,"}":78,"::":79,"dyad":80,"attribute":81,"application_repetition0":82,"application_option0":83,"unary_expr":84,"#":85,"NOT":86,"+":87,"-":88,"*":89,"/":90,"%":91,"<":92,">":93,"<=":94,">=":95,"==":96,"!=":97,"AND":98,"OR":99,"IN":100,"SEQ":101,"future":102,"AFTER":103,"dispatch_option0":104,"message":105,"=>":106,"future_repetition0":107,"future_repetition1":108,"~":109,"message_repetition0":110,"CATCH":111,",":112,"statement_repetition_plus1_option0":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BEGIN",8:"END",10:"RECEIVE",12:"ID",13:";",14:"DEFINE",16:"DISTINGUISH",27:"IS",28:":",29:"COMPLETE",32:"SKIP",33:"STOP",34:"REPLY",37:"FAIL",40:"REPLACE",45:"=",46:"+=",47:"-=",48:"*=",49:"/=",50:"%=",51:"++",52:"--",53:"IF",54:"ELSE",55:"WHILE",58:"(",59:")",60:"[",62:"]",63:".",65:"NIL",66:"BOOLEAN",67:"NUMBER",68:"STRING",73:"{",78:"}",79:"::",85:"#",86:"NOT",87:"+",88:"-",89:"*",90:"/",91:"%",92:"<",93:">",94:"<=",95:">=",96:"==",97:"!=",98:"AND",99:"OR",100:"IN",101:"SEQ",103:"AFTER",106:"=>",109:"~",111:"CATCH",112:","},
productions_: [0,[3,2],[6,3],[4,1],[4,2],[9,4],[9,4],[9,4],[9,3],[9,2],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,4],[9,4],[9,2],[9,2],[20,3],[20,3],[20,3],[21,4],[21,4],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[22,2],[22,2],[25,4],[25,7],[25,6],[26,4],[56,1],[56,1],[56,3],[56,1],[23,1],[23,4],[23,3],[23,4],[57,1],[57,1],[57,1],[57,1],[57,6],[57,6],[57,2],[80,1],[80,3],[81,3],[18,5],[84,1],[84,2],[84,2],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[24,2],[24,2],[24,5],[102,1],[102,4],[102,4],[105,4],[44,3],[11,0],[11,3],[15,1],[15,1],[113,0],[113,1],[17,2],[17,3],[19,0],[19,1],[30,0],[30,3],[35,0],[35,3],[36,0],[36,1],[38,0],[38,3],[39,0],[39,1],[41,0],[41,3],[42,0],[42,1],[61,0],[61,1],[64,2],[64,3],[69,0],[69,1],[70,0],[70,3],[71,0],[71,1],[72,0],[72,1],[74,0],[74,1],[75,0],[75,3],[76,0],[76,1],[77,0],[77,1],[82,0],[82,3],[83,0],[83,1],[104,0],[104,1],[107,0],[107,3],[108,0],[108,3],[110,0],[110,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'procedure', body: $$[$0-1]}; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = {type: 'stmt_list', head: $$[$0], tail: null};
break;
case 4:this.$ = {type: 'stmt_list', head: $$[$0-1], tail: $$[$0]};
break;
case 5:this.$ = {type: 'receive', names: $$[$0-2].concat($$[$0-1])};
break;
case 6:this.$ = {type: 'constant', name: $$[$0-2], value: $$[$0-1]};
break;
case 7:this.$ = {type: 'range', variants: $$[$0-2].concat($$[$0-1])};
break;
case 8:this.$ = {type: 'application_stmt', application: $$[$0-2], contingency: $$[$0-1]};
break;
case 16:this.$ = {type: 'assign', op: '=', left: {type: 'id', name: $$[$0-3]}, right: {type: 'procedure', body: $$[$0]}};
break;
case 17:this.$ = {type: 'complete', futures: $$[$0-2].concat([$$[$0-1]])};
break;
case 18:this.$ = {type: 'skip'};
break;
case 19:this.$ = {type: 'stop'};
break;
case 20:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 21:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 22:this.$ = {type: 'response', channel: $$[$0-2], args: $$[$0] ? $$[$0-1].concat([$$[$0]]) : []};
break;
case 23:this.$ = {type: 'assign', op: $$[$0-2], left: $$[$0-3], right: $$[$0-1]};
break;
case 24:this.$ = {type: 'recovery', op: $$[$0-2], left: $$[$0-3], application: $$[$0-1], contingency: $$[$0]};
break;
case 31:this.$ = {type: 'increment', op: $$[$0], left: $$[$0-1]};
break;
case 32:this.$ = {type: 'decrement', op: $$[$0], left: $$[$0-1]};
break;
case 33:this.$ = {type: 'conditional', predicate: $$[$0-2], consequent: $$[$0]};
break;
case 34:this.$ = {type: 'conditional', predicate: $$[$0-5], consequent: $$[$0-3], otherwise: $$[$0]};
break;
case 35:this.$ = {type: 'conditional', predicate: $$[$0-4], consequent: $$[$0-2], otherwise: $$[$0]};
break;
case 36:this.$ = {type: 'iteration', condition: $$[$0-2], statements: $$[$0]};
break;
case 39:this.$ = $$[$0-1];
break;
case 41:this.$ = {type: 'id', name: $$[$0]};
break;
case 42:this.$ = {type: 'subscript', list: $$[$0-3], index: $$[$0-1]};
break;
case 43:this.$ = {type: 'select', set: $$[$0-2], member: $$[$0]};
break;
case 44:this.$ = {type: 'destructure', members: $$[$0-1].concat([$$[$0-2]])};
break;
case 45:this.$ = {type: 'nil'};
break;
case 46:this.$ = {type: 'boolean', val: $$[$0] == 'true'};
break;
case 47:this.$ = {type: 'number', val: $$[$0]};
break;
case 48:this.$ = {type: 'string', val: $$[$0]};
break;
case 49:this.$ = {type: 'list', elements: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 50:this.$ = {type: 'record', attributes: $$[$0-2] ? $$[$0-3].concat([$$[$0-2]]): []};
break;
case 52:this.$ = {type: 'dyad', key: $$[$0], value: {type: 'boolean', val: true}};;
break;
case 53:this.$ = {type: 'dyad', key: $$[$0-2], value: $$[$0]};;
break;
case 54:this.$ = {type: 'field', name: $$[$0-2], value: $$[$0]};
break;
case 55:this.$ = {type: 'application', address: $$[$0-4], args: $$[$0-1] ? $$[$0-2].concat([$$[$0-1]]) : []};
break;
case 57:this.$ = {type: 'cardinality', operand: $$[$0]};
break;
case 58:this.$ = {type: 'complement', operand: $$[$0]};
break;
case 60:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 61:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 62:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 63:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 64:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 65:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 66:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 67:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 68:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 69:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 70:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 71:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 72:this.$ = {type: 'op', op: $$[$0-1], left: $$[$0-2], right: $$[$0]};
break;
case 73:this.$ = {type: 'in', left: $$[$0-2], right: $$[$0]};
break;
case 74:this.$ = {type: 'sequence', first: $$[$0-2], last: $$[$0]};
break;
case 77:this.$ = {type: 'message', address: $$[$0-3].address, args: $$[$0-3].args, subsequent: $$[$0-1], contingency: $$[$0]};
break;
case 79:this.$ = $$[$0-2];
break;
case 81:this.$ = {type: 'message', address: $$[$0-3], args: $$[$0-1].concat([$$[$0]])};
break;
case 82:this.$ = $$[$0];
break;
case 83:this.$ = [];
break;
case 84:$$[$0-2].push($$[$0-1]);
break;
case 89:this.$ = [$$[$0-1]];
break;
case 90:$$[$0-2].push($$[$0-1]);
break;
case 93:this.$ = [];
break;
case 94:$$[$0-2].push($$[$0-1]);
break;
case 95:this.$ = [];
break;
case 96:$$[$0-2].push($$[$0-1]);
break;
case 99:this.$ = [];
break;
case 100:$$[$0-2].push($$[$0-1]);
break;
case 103:this.$ = [];
break;
case 104:$$[$0-2].push($$[$0-1]);
break;
case 109:this.$ = [$$[$0-1]];
break;
case 110:$$[$0-2].push($$[$0-1]);
break;
case 113:this.$ = [];
break;
case 114:$$[$0-2].push($$[$0-1]);
break;
case 121:this.$ = [];
break;
case 122:$$[$0-2].push($$[$0-1]);
break;
case 127:this.$ = [];
break;
case 128:$$[$0-2].push($$[$0-1]);
break;
case 133:this.$ = [];
break;
case 134:$$[$0-2].push($$[$0-1]);
break;
case 135:this.$ = [];
break;
case 136:$$[$0-2].push($$[$0-1]);
break;
case 137:this.$ = [];
break;
case 138:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,9:3,10:[1,4],12:[1,15],14:[1,5],16:[1,6],18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,29:[1,16],32:[1,17],33:[1,18],34:[1,20],37:[1,21],40:[1,22],53:[1,26],55:[1,27],56:19,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],102:24,103:[1,25],105:29},{1:[3]},{5:[1,37]},{4:38,5:[2,3],8:[2,3],9:3,10:[1,4],12:[1,15],14:[1,5],16:[1,6],18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,29:[1,16],32:[1,17],33:[1,18],34:[1,20],37:[1,21],40:[1,22],53:[1,26],55:[1,27],56:19,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],102:24,103:[1,25],105:29},{11:39,12:[2,83]},{12:[1,40]},{12:[1,42],17:41},{13:[2,91],19:43,44:44,58:[2,40],60:[2,40],63:[2,40],106:[2,40],109:[2,40],111:[1,45]},{13:[1,46]},{5:[2,10],8:[2,10],10:[2,10],12:[2,10],14:[2,10],16:[2,10],29:[2,10],32:[2,10],33:[2,10],34:[2,10],37:[2,10],40:[2,10],53:[2,10],55:[2,10],58:[2,10],60:[2,10],65:[2,10],66:[2,10],67:[2,10],68:[2,10],73:[2,10],79:[2,10],103:[2,10]},{13:[1,47]},{13:[1,48],43:49,45:[1,52],46:[1,53],47:[1,54],48:[1,55],49:[1,56],50:[1,57],51:[1,50],52:[1,51],58:[2,37],60:[2,37],63:[2,37],106:[2,37],109:[2,37]},{5:[2,13],8:[2,13],10:[2,13],12:[2,13],14:[2,13],16:[2,13],29:[2,13],32:[2,13],33:[2,13],34:[2,13],37:[2,13],40:[2,13],53:[2,13],55:[2,13],58:[2,13],60:[2,13],65:[2,13],66:[2,13],67:[2,13],68:[2,13],73:[2,13],79:[2,13],103:[2,13]},{5:[2,14],8:[2,14],10:[2,14],12:[2,14],14:[2,14],16:[2,14],29:[2,14],32:[2,14],33:[2,14],34:[2,14],37:[2,14],40:[2,14],53:[2,14],55:[2,14],58:[2,14],60:[2,14],65:[2,14],66:[2,14],67:[2,14],68:[2,14],73:[2,14],79:[2,14],103:[2,14]},{5:[2,15],8:[2,15],10:[2,15],12:[2,15],14:[2,15],16:[2,15],29:[2,15],32:[2,15],33:[2,15],34:[2,15],37:[2,15],40:[2,15],53:[2,15],55:[2,15],58:[2,15],60:[2,15],65:[2,15],66:[2,15],67:[2,15],68:[2,15],73:[2,15],79:[2,15],103:[2,15]},{13:[2,41],27:[1,58],45:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],58:[2,41],60:[2,41],63:[2,41],106:[2,41],109:[2,41]},{12:[2,93],30:59,58:[2,93],60:[2,93],65:[2,93],66:[2,93],67:[2,93],68:[2,93],73:[2,93],79:[2,93],85:[2,93],86:[2,93]},{13:[1,60]},{13:[1,61]},{58:[1,62],60:[1,63],63:[1,64],106:[1,65],109:[1,66]},{12:[2,95],13:[2,95],35:67,58:[2,95],60:[2,95],65:[2,95],66:[2,95],67:[2,95],68:[2,95],73:[2,95],79:[2,95],85:[2,95],86:[2,95]},{12:[2,99],13:[2,99],38:68,58:[2,99],60:[2,99],65:[2,99],66:[2,99],67:[2,99],68:[2,99],73:[2,99],79:[2,99],85:[2,99],86:[2,99]},{12:[2,103],13:[2,103],41:69,58:[2,103],60:[2,103],65:[2,103],66:[2,103],67:[2,103],68:[2,103],73:[2,103],79:[2,103],85:[2,103],86:[2,103]},{12:[1,72],18:75,23:70,31:71,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{13:[1,78],44:79,111:[1,45]},{12:[1,72],18:75,23:81,56:19,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],102:80,105:29},{12:[1,72],18:75,23:81,31:82,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:83,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{8:[2,38],13:[2,38],28:[2,38],58:[2,38],59:[2,38],60:[2,38],62:[2,38],63:[2,38],78:[2,38],87:[2,38],88:[2,38],89:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38],94:[2,38],95:[2,38],96:[2,38],97:[2,38],98:[2,38],99:[2,38],100:[2,38],101:[2,38],106:[2,38],109:[2,38],111:[2,38],112:[2,38]},{13:[2,78],28:[2,78],106:[1,84],111:[2,78]},{8:[2,45],13:[2,45],28:[2,45],58:[2,45],59:[2,45],60:[2,45],62:[2,45],63:[2,45],78:[2,45],87:[2,45],88:[2,45],89:[2,45],90:[2,45],91:[2,45],92:[2,45],93:[2,45],94:[2,45],95:[2,45],96:[2,45],97:[2,45],98:[2,45],99:[2,45],100:[2,45],101:[2,45],106:[2,45],109:[2,45],111:[2,45],112:[2,45]},{8:[2,46],13:[2,46],28:[2,46],58:[2,46],59:[2,46],60:[2,46],62:[2,46],63:[2,46],78:[2,46],87:[2,46],88:[2,46],89:[2,46],90:[2,46],91:[2,46],92:[2,46],93:[2,46],94:[2,46],95:[2,46],96:[2,46],97:[2,46],98:[2,46],99:[2,46],100:[2,46],101:[2,46],106:[2,46],109:[2,46],111:[2,46],112:[2,46]},{8:[2,47],13:[2,47],28:[2,47],58:[2,47],59:[2,47],60:[2,47],62:[2,47],63:[2,47],78:[2,47],87:[2,47],88:[2,47],89:[2,47],90:[2,47],91:[2,47],92:[2,47],93:[2,47],94:[2,47],95:[2,47],96:[2,47],97:[2,47],98:[2,47],99:[2,47],100:[2,47],101:[2,47],106:[2,47],109:[2,47],111:[2,47],112:[2,47]},{8:[2,48],13:[2,48],28:[2,48],58:[2,48],59:[2,48],60:[2,48],62:[2,48],63:[2,48],78:[2,48],87:[2,48],88:[2,48],89:[2,48],90:[2,48],91:[2,48],92:[2,48],93:[2,48],94:[2,48],95:[2,48],96:[2,48],97:[2,48],98:[2,48],99:[2,48],100:[2,48],101:[2,48],106:[2,48],109:[2,48],111:[2,48],112:[2,48]},{7:[1,86],8:[2,111],12:[2,111],58:[2,111],60:[2,111],62:[2,111],65:[2,111],66:[2,111],67:[2,111],68:[2,111],69:85,73:[2,111],79:[2,111],85:[2,111],86:[2,111]},{7:[1,88],8:[2,119],12:[2,119],74:87,78:[2,119]},{6:89,7:[1,90]},{1:[2,1]},{5:[2,4],8:[2,4]},{12:[1,91]},{15:92,67:[1,93],68:[1,94]},{12:[1,95]},{12:[2,87],112:[1,97],113:96},{13:[1,98]},{13:[2,92]},{28:[1,99]},{5:[2,9],8:[2,9],10:[2,9],12:[2,9],14:[2,9],16:[2,9],29:[2,9],32:[2,9],33:[2,9],34:[2,9],37:[2,9],40:[2,9],53:[2,9],55:[2,9],58:[2,9],60:[2,9],65:[2,9],66:[2,9],67:[2,9],68:[2,9],73:[2,9],79:[2,9],103:[2,9]},{5:[2,11],8:[2,11],10:[2,11],12:[2,11],14:[2,11],16:[2,11],29:[2,11],32:[2,11],33:[2,11],34:[2,11],37:[2,11],40:[2,11],53:[2,11],55:[2,11],58:[2,11],60:[2,11],65:[2,11],66:[2,11],67:[2,11],68:[2,11],73:[2,11],79:[2,11],103:[2,11]},{5:[2,12],8:[2,12],10:[2,12],12:[2,12],14:[2,12],16:[2,12],29:[2,12],32:[2,12],33:[2,12],34:[2,12],37:[2,12],40:[2,12],53:[2,12],55:[2,12],58:[2,12],60:[2,12],65:[2,12],66:[2,12],67:[2,12],68:[2,12],73:[2,12],79:[2,12],103:[2,12]},{12:[1,72],18:101,23:81,31:100,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{13:[2,31]},{13:[2,32]},{12:[2,25],58:[2,25],60:[2,25],65:[2,25],66:[2,25],67:[2,25],68:[2,25],73:[2,25],79:[2,25],85:[2,25],86:[2,25]},{12:[2,26],58:[2,26],60:[2,26],65:[2,26],66:[2,26],67:[2,26],68:[2,26],73:[2,26],79:[2,26],85:[2,26],86:[2,26]},{12:[2,27],58:[2,27],60:[2,27],65:[2,27],66:[2,27],67:[2,27],68:[2,27],73:[2,27],79:[2,27],85:[2,27],86:[2,27]},{12:[2,28],58:[2,28],60:[2,28],65:[2,28],66:[2,28],67:[2,28],68:[2,28],73:[2,28],79:[2,28],85:[2,28],86:[2,28]},{12:[2,29],58:[2,29],60:[2,29],65:[2,29],66:[2,29],67:[2,29],68:[2,29],73:[2,29],79:[2,29],85:[2,29],86:[2,29]},{12:[2,30],58:[2,30],60:[2,30],65:[2,30],66:[2,30],67:[2,30],68:[2,30],73:[2,30],79:[2,30],85:[2,30],86:[2,30]},{28:[1,102]},{12:[1,72],18:75,23:81,31:103,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{5:[2,18],8:[2,18],10:[2,18],12:[2,18],14:[2,18],16:[2,18],29:[2,18],32:[2,18],33:[2,18],34:[2,18],37:[2,18],40:[2,18],53:[2,18],55:[2,18],58:[2,18],60:[2,18],65:[2,18],66:[2,18],67:[2,18],68:[2,18],73:[2,18],79:[2,18],103:[2,18]},{5:[2,19],8:[2,19],10:[2,19],12:[2,19],14:[2,19],16:[2,19],29:[2,19],32:[2,19],33:[2,19],34:[2,19],37:[2,19],40:[2,19],53:[2,19],55:[2,19],58:[2,19],60:[2,19],65:[2,19],66:[2,19],67:[2,19],68:[2,19],73:[2,19],79:[2,19],103:[2,19]},{12:[2,127],58:[2,127],59:[2,127],60:[2,127],65:[2,127],66:[2,127],67:[2,127],68:[2,127],73:[2,127],79:[2,127],82:104,85:[2,127],86:[2,127]},{12:[1,72],18:75,23:81,31:106,56:73,57:28,58:[1,23],60:[1,34],61:105,62:[2,107],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,107]},{12:[2,135],58:[2,135],60:[2,135],65:[2,135],66:[2,135],67:[2,135],68:[2,135],73:[2,135],79:[2,135],108:108},{12:[2,137],58:[2,137],60:[2,137],65:[2,137],66:[2,137],67:[2,137],68:[2,137],73:[2,137],79:[2,137],85:[2,137],86:[2,137],110:109},{12:[1,72],13:[2,97],18:75,23:81,31:111,36:110,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],13:[2,101],18:75,23:81,31:113,39:112,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],13:[2,105],18:75,23:81,31:115,42:114,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{58:[2,37],59:[2,37],60:[2,37],63:[2,37],64:116,87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],94:[2,37],95:[2,37],96:[2,37],97:[2,37],98:[2,37],99:[2,37],100:[2,37],101:[2,37],112:[1,117]},{59:[1,118],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133]},{8:[2,41],13:[2,41],28:[2,41],58:[2,41],59:[2,41],60:[2,41],62:[2,41],63:[2,41],78:[2,41],87:[2,41],88:[2,41],89:[2,41],90:[2,41],91:[2,41],92:[2,41],93:[2,41],94:[2,41],95:[2,41],96:[2,41],97:[2,41],98:[2,41],99:[2,41],100:[2,41],101:[2,41],106:[2,41],109:[2,41],111:[2,41],112:[2,41]},{8:[2,56],13:[2,56],28:[2,56],58:[1,62],59:[2,56],60:[1,63],62:[2,56],63:[1,64],78:[2,56],87:[2,56],88:[2,56],89:[2,56],90:[2,56],91:[2,56],92:[2,56],93:[2,56],94:[2,56],95:[2,56],96:[2,56],97:[2,56],98:[2,56],99:[2,56],100:[2,56],101:[2,56],106:[2,56],111:[2,56],112:[2,56]},{8:[2,59],13:[2,59],28:[2,59],59:[2,59],62:[2,59],78:[2,59],87:[2,59],88:[2,59],89:[2,59],90:[2,59],91:[2,59],92:[2,59],93:[2,59],94:[2,59],95:[2,59],96:[2,59],97:[2,59],98:[2,59],99:[2,59],100:[2,59],101:[2,59],106:[2,59],111:[2,59],112:[2,59]},{8:[2,40],13:[2,40],28:[2,40],58:[2,40],59:[2,40],60:[2,40],62:[2,40],63:[2,40],78:[2,40],87:[2,40],88:[2,40],89:[2,40],90:[2,40],91:[2,40],92:[2,40],93:[2,40],94:[2,40],95:[2,40],96:[2,40],97:[2,40],98:[2,40],99:[2,40],100:[2,40],101:[2,40],106:[2,40],109:[2,40],111:[2,40],112:[2,40]},{12:[1,72],18:75,23:81,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:134,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:135,85:[1,76],86:[1,77]},{5:[2,75],8:[2,75],10:[2,75],12:[2,75],14:[2,75],16:[2,75],29:[2,75],32:[2,75],33:[2,75],34:[2,75],37:[2,75],40:[2,75],53:[2,75],55:[2,75],58:[2,75],60:[2,75],65:[2,75],66:[2,75],67:[2,75],68:[2,75],73:[2,75],79:[2,75],103:[2,75]},{5:[2,76],8:[2,76],10:[2,76],12:[2,76],14:[2,76],16:[2,76],29:[2,76],32:[2,76],33:[2,76],34:[2,76],37:[2,76],40:[2,76],53:[2,76],55:[2,76],58:[2,76],60:[2,76],65:[2,76],66:[2,76],67:[2,76],68:[2,76],73:[2,76],79:[2,76],103:[2,76]},{28:[1,136]},{8:[2,37],13:[2,37],28:[2,37],58:[2,37],59:[2,37],60:[2,37],62:[2,37],63:[2,37],78:[2,37],87:[2,37],88:[2,37],89:[2,37],90:[2,37],91:[2,37],92:[2,37],93:[2,37],94:[2,37],95:[2,37],96:[2,37],97:[2,37],98:[2,37],99:[2,37],100:[2,37],101:[2,37],106:[2,37],109:[2,37],111:[2,37],112:[2,37]},{28:[1,137],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133]},{28:[1,138],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133]},{12:[2,133],58:[2,133],60:[2,133],65:[2,133],66:[2,133],67:[2,133],68:[2,133],73:[2,133],79:[2,133],107:139},{8:[2,113],12:[2,113],58:[2,113],60:[2,113],62:[2,113],65:[2,113],66:[2,113],67:[2,113],68:[2,113],70:140,73:[2,113],79:[2,113],85:[2,113],86:[2,113]},{8:[2,112],12:[2,112],58:[2,112],60:[2,112],62:[2,112],65:[2,112],66:[2,112],67:[2,112],68:[2,112],73:[2,112],79:[2,112],85:[2,112],86:[2,112]},{8:[2,121],12:[2,121],75:141,78:[2,121]},{8:[2,120],12:[2,120],78:[2,120]},{8:[2,51],13:[2,51],28:[2,51],58:[2,51],59:[2,51],60:[2,51],62:[2,51],63:[2,51],78:[2,51],87:[2,51],88:[2,51],89:[2,51],90:[2,51],91:[2,51],92:[2,51],93:[2,51],94:[2,51],95:[2,51],96:[2,51],97:[2,51],98:[2,51],99:[2,51],100:[2,51],101:[2,51],106:[2,51],109:[2,51],111:[2,51],112:[2,51]},{4:142,9:3,10:[1,4],12:[1,15],14:[1,5],16:[1,6],18:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,29:[1,16],32:[1,17],33:[1,18],34:[1,20],37:[1,21],40:[1,22],53:[1,26],55:[1,27],56:19,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],102:24,103:[1,25],105:29},{13:[1,143],112:[1,144]},{13:[1,145]},{13:[2,85]},{13:[2,86]},{12:[2,87],13:[1,146],112:[1,97],113:147},{12:[2,89]},{12:[2,88]},{5:[2,8],8:[2,8],10:[2,8],12:[2,8],14:[2,8],16:[2,8],29:[2,8],32:[2,8],33:[2,8],34:[2,8],37:[2,8],40:[2,8],53:[2,8],55:[2,8],58:[2,8],60:[2,8],65:[2,8],66:[2,8],67:[2,8],68:[2,8],73:[2,8],79:[2,8],103:[2,8]},{6:148,7:[1,90]},{13:[1,149],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133]},{13:[2,40],44:150,58:[2,40],60:[2,40],63:[2,40],87:[2,40],88:[2,40],89:[2,40],90:[2,40],91:[2,40],92:[2,40],93:[2,40],94:[2,40],95:[2,40],96:[2,40],97:[2,40],98:[2,40],99:[2,40],100:[2,40],101:[2,40],111:[1,45]},{6:151,7:[1,90]},{13:[1,152],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[1,153]},{12:[1,72],18:75,23:81,31:155,56:73,57:28,58:[1,23],59:[2,129],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],83:154,84:74,85:[1,76],86:[1,77]},{62:[1,156]},{62:[2,108],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133]},{8:[2,43],13:[2,43],28:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],51:[2,43],52:[2,43],58:[2,43],59:[2,43],60:[2,43],62:[2,43],63:[2,43],78:[2,43],87:[2,43],88:[2,43],89:[2,43],90:[2,43],91:[2,43],92:[2,43],93:[2,43],94:[2,43],95:[2,43],96:[2,43],97:[2,43],98:[2,43],99:[2,43],100:[2,43],101:[2,43],106:[2,43],109:[2,43],111:[2,43],112:[2,43]},{12:[1,72],18:75,23:157,56:158,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36]},{12:[1,72],18:75,23:81,31:159,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{13:[2,20]},{13:[2,98],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[1,160]},{13:[2,21]},{13:[2,102],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[1,161]},{13:[2,22]},{13:[2,106],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[1,162]},{59:[1,163],112:[1,164]},{12:[1,72],18:75,23:165,56:158,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36]},{8:[2,39],13:[2,39],28:[2,39],58:[2,39],59:[2,39],60:[2,39],62:[2,39],63:[2,39],78:[2,39],87:[2,39],88:[2,39],89:[2,39],90:[2,39],91:[2,39],92:[2,39],93:[2,39],94:[2,39],95:[2,39],96:[2,39],97:[2,39],98:[2,39],99:[2,39],100:[2,39],101:[2,39],106:[2,39],109:[2,39],111:[2,39],112:[2,39]},{12:[1,72],18:75,23:81,31:166,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:167,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:168,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:169,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:170,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:171,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:172,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:173,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:174,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:175,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:176,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:177,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:178,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:179,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{12:[1,72],18:75,23:81,31:180,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{8:[2,57],13:[2,57],28:[2,57],59:[2,57],62:[2,57],78:[2,57],87:[2,57],88:[2,57],89:[2,57],90:[2,57],91:[2,57],92:[2,57],93:[2,57],94:[2,57],95:[2,57],96:[2,57],97:[2,57],98:[2,57],99:[2,57],100:[2,57],101:[2,57],106:[2,57],111:[2,57],112:[2,57]},{8:[2,58],13:[2,58],28:[2,58],59:[2,58],62:[2,58],78:[2,58],87:[2,58],88:[2,58],89:[2,58],90:[2,58],91:[2,58],92:[2,58],93:[2,58],94:[2,58],95:[2,58],96:[2,58],97:[2,58],98:[2,58],99:[2,58],100:[2,58],101:[2,58],106:[2,58],111:[2,58],112:[2,58]},{6:181,7:[1,90]},{6:182,7:[1,90]},{6:183,7:[1,90]},{12:[1,72],18:75,23:184,56:158,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36]},{8:[2,115],12:[1,72],18:75,23:81,31:187,56:73,57:28,58:[1,23],60:[1,34],62:[2,115],65:[1,30],66:[1,31],67:[1,32],68:[1,33],71:185,73:[1,35],79:[1,36],80:186,84:74,85:[1,76],86:[1,77]},{8:[2,123],12:[1,190],76:188,78:[2,123],81:189},{8:[1,191]},{5:[2,5],8:[2,5],10:[2,5],12:[2,5],14:[2,5],16:[2,5],29:[2,5],32:[2,5],33:[2,5],34:[2,5],37:[2,5],40:[2,5],53:[2,5],55:[2,5],58:[2,5],60:[2,5],65:[2,5],66:[2,5],67:[2,5],68:[2,5],73:[2,5],79:[2,5],103:[2,5]},{12:[2,84]},{5:[2,6],8:[2,6],10:[2,6],12:[2,6],14:[2,6],16:[2,6],29:[2,6],32:[2,6],33:[2,6],34:[2,6],37:[2,6],40:[2,6],53:[2,6],55:[2,6],58:[2,6],60:[2,6],65:[2,6],66:[2,6],67:[2,6],68:[2,6],73:[2,6],79:[2,6],103:[2,6]},{5:[2,7],8:[2,7],10:[2,7],12:[2,7],14:[2,7],16:[2,7],29:[2,7],32:[2,7],33:[2,7],34:[2,7],37:[2,7],40:[2,7],53:[2,7],55:[2,7],58:[2,7],60:[2,7],65:[2,7],66:[2,7],67:[2,7],68:[2,7],73:[2,7],79:[2,7],103:[2,7]},{12:[2,90]},{5:[2,82],8:[2,82],10:[2,82],12:[2,82],13:[2,82],14:[2,82],16:[2,82],29:[2,82],32:[2,82],33:[2,82],34:[2,82],37:[2,82],40:[2,82],53:[2,82],55:[2,82],58:[2,82],60:[2,82],65:[2,82],66:[2,82],67:[2,82],68:[2,82],73:[2,82],79:[2,82],103:[2,82]},{5:[2,23],8:[2,23],10:[2,23],12:[2,23],14:[2,23],16:[2,23],29:[2,23],32:[2,23],33:[2,23],34:[2,23],37:[2,23],40:[2,23],53:[2,23],55:[2,23],58:[2,23],60:[2,23],65:[2,23],66:[2,23],67:[2,23],68:[2,23],73:[2,23],79:[2,23],103:[2,23]},{5:[2,24],8:[2,24],10:[2,24],12:[2,24],14:[2,24],16:[2,24],29:[2,24],32:[2,24],33:[2,24],34:[2,24],37:[2,24],40:[2,24],53:[2,24],55:[2,24],58:[2,24],60:[2,24],65:[2,24],66:[2,24],67:[2,24],68:[2,24],73:[2,24],79:[2,24],103:[2,24]},{5:[2,16],8:[2,16],10:[2,16],12:[2,16],14:[2,16],16:[2,16],29:[2,16],32:[2,16],33:[2,16],34:[2,16],37:[2,16],40:[2,16],53:[2,16],55:[2,16],58:[2,16],60:[2,16],65:[2,16],66:[2,16],67:[2,16],68:[2,16],73:[2,16],79:[2,16],103:[2,16]},{5:[2,17],8:[2,17],10:[2,17],12:[2,17],14:[2,17],16:[2,17],29:[2,17],32:[2,17],33:[2,17],34:[2,17],37:[2,17],40:[2,17],53:[2,17],55:[2,17],58:[2,17],60:[2,17],65:[2,17],66:[2,17],67:[2,17],68:[2,17],73:[2,17],79:[2,17],103:[2,17]},{12:[2,94],58:[2,94],60:[2,94],65:[2,94],66:[2,94],67:[2,94],68:[2,94],73:[2,94],79:[2,94],85:[2,94],86:[2,94]},{59:[1,192]},{59:[2,130],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[1,193]},{8:[2,42],13:[2,42],28:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],58:[2,42],59:[2,42],60:[2,42],62:[2,42],63:[2,42],78:[2,42],87:[2,42],88:[2,42],89:[2,42],90:[2,42],91:[2,42],92:[2,42],93:[2,42],94:[2,42],95:[2,42],96:[2,42],97:[2,42],98:[2,42],99:[2,42],100:[2,42],101:[2,42],106:[2,42],109:[2,42],111:[2,42],112:[2,42]},{13:[2,80],28:[2,80],58:[2,37],60:[2,37],63:[2,37],111:[2,80],112:[1,194]},{58:[1,62],60:[1,63],63:[1,64]},{13:[2,81],28:[2,81],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],106:[2,81],111:[2,81],112:[1,195]},{12:[2,96],13:[2,96],58:[2,96],60:[2,96],65:[2,96],66:[2,96],67:[2,96],68:[2,96],73:[2,96],79:[2,96],85:[2,96],86:[2,96]},{12:[2,100],13:[2,100],58:[2,100],60:[2,100],65:[2,100],66:[2,100],67:[2,100],68:[2,100],73:[2,100],79:[2,100],85:[2,100],86:[2,100]},{12:[2,104],13:[2,104],58:[2,104],60:[2,104],65:[2,104],66:[2,104],67:[2,104],68:[2,104],73:[2,104],79:[2,104],85:[2,104],86:[2,104]},{8:[2,44],13:[2,44],28:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],51:[2,44],52:[2,44],58:[2,44],59:[2,44],60:[2,44],62:[2,44],63:[2,44],78:[2,44],87:[2,44],88:[2,44],89:[2,44],90:[2,44],91:[2,44],92:[2,44],93:[2,44],94:[2,44],95:[2,44],96:[2,44],97:[2,44],98:[2,44],99:[2,44],100:[2,44],101:[2,44],106:[2,44],109:[2,44],111:[2,44],112:[2,44]},{12:[1,72],18:75,23:196,56:158,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36]},{58:[2,37],59:[2,109],60:[2,37],63:[2,37],112:[2,109]},{8:[2,60],13:[2,60],28:[2,60],59:[2,60],62:[2,60],78:[2,60],87:[2,60],88:[2,60],89:[1,121],90:[1,122],91:[1,123],92:[2,60],93:[2,60],94:[2,60],95:[2,60],96:[2,60],97:[2,60],98:[2,60],99:[2,60],100:[2,60],101:[2,60],106:[2,60],111:[2,60],112:[2,60]},{8:[2,61],13:[2,61],28:[2,61],59:[2,61],62:[2,61],78:[2,61],87:[2,61],88:[2,61],89:[1,121],90:[1,122],91:[1,123],92:[2,61],93:[2,61],94:[2,61],95:[2,61],96:[2,61],97:[2,61],98:[2,61],99:[2,61],100:[2,61],101:[2,61],106:[2,61],111:[2,61],112:[2,61]},{8:[2,62],13:[2,62],28:[2,62],59:[2,62],62:[2,62],78:[2,62],87:[2,62],88:[2,62],89:[2,62],90:[2,62],91:[2,62],92:[2,62],93:[2,62],94:[2,62],95:[2,62],96:[2,62],97:[2,62],98:[2,62],99:[2,62],100:[2,62],101:[2,62],106:[2,62],111:[2,62],112:[2,62]},{8:[2,63],13:[2,63],28:[2,63],59:[2,63],62:[2,63],78:[2,63],87:[2,63],88:[2,63],89:[2,63],90:[2,63],91:[2,63],92:[2,63],93:[2,63],94:[2,63],95:[2,63],96:[2,63],97:[2,63],98:[2,63],99:[2,63],100:[2,63],101:[2,63],106:[2,63],111:[2,63],112:[2,63]},{8:[2,64],13:[2,64],28:[2,64],59:[2,64],62:[2,64],78:[2,64],87:[2,64],88:[2,64],89:[2,64],90:[2,64],91:[2,64],92:[2,64],93:[2,64],94:[2,64],95:[2,64],96:[2,64],97:[2,64],98:[2,64],99:[2,64],100:[2,64],101:[2,64],106:[2,64],111:[2,64],112:[2,64]},{8:[2,65],13:[2,65],28:[2,65],59:[2,65],62:[2,65],78:[2,65],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[2,65],93:[2,65],94:[2,65],95:[2,65],96:[2,65],97:[2,65],98:[2,65],99:[2,65],100:[2,65],101:[2,65],106:[2,65],111:[2,65],112:[2,65]},{8:[2,66],13:[2,66],28:[2,66],59:[2,66],62:[2,66],78:[2,66],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[2,66],93:[2,66],94:[2,66],95:[2,66],96:[2,66],97:[2,66],98:[2,66],99:[2,66],100:[2,66],101:[2,66],106:[2,66],111:[2,66],112:[2,66]},{8:[2,67],13:[2,67],28:[2,67],59:[2,67],62:[2,67],78:[2,67],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[2,67],93:[2,67],94:[2,67],95:[2,67],96:[2,67],97:[2,67],98:[2,67],99:[2,67],100:[2,67],101:[2,67],106:[2,67],111:[2,67],112:[2,67]},{8:[2,68],13:[2,68],28:[2,68],59:[2,68],62:[2,68],78:[2,68],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[2,68],93:[2,68],94:[2,68],95:[2,68],96:[2,68],97:[2,68],98:[2,68],99:[2,68],100:[2,68],101:[2,68],106:[2,68],111:[2,68],112:[2,68]},{8:[2,69],13:[2,69],28:[2,69],59:[2,69],62:[2,69],78:[2,69],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[2,69],93:[2,69],94:[2,69],95:[2,69],96:[2,69],97:[2,69],98:[2,69],99:[2,69],100:[2,69],101:[2,69],106:[2,69],111:[2,69],112:[2,69]},{8:[2,70],13:[2,70],28:[2,70],59:[2,70],62:[2,70],78:[2,70],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[2,70],93:[2,70],94:[2,70],95:[2,70],96:[2,70],97:[2,70],98:[2,70],99:[2,70],100:[2,70],101:[2,70],106:[2,70],111:[2,70],112:[2,70]},{8:[2,71],13:[2,71],28:[2,71],59:[2,71],62:[2,71],78:[2,71],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[2,71],99:[2,71],100:[2,71],101:[2,71],106:[2,71],111:[2,71],112:[2,71]},{8:[2,72],13:[2,72],28:[2,72],59:[2,72],62:[2,72],78:[2,72],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[2,72],99:[2,72],100:[2,72],101:[2,72],106:[2,72],111:[2,72],112:[2,72]},{8:[2,73],13:[2,73],28:[2,73],59:[2,73],62:[2,73],78:[2,73],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[2,73],99:[2,73],100:[2,73],101:[2,73],106:[2,73],111:[2,73],112:[2,73]},{8:[2,74],13:[2,74],28:[2,74],59:[2,74],62:[2,74],78:[2,74],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[2,74],99:[2,74],100:[2,74],101:[2,74],106:[2,74],111:[2,74],112:[2,74]},{5:[2,131],8:[2,131],10:[2,131],12:[2,131],14:[2,131],16:[2,131],29:[2,131],32:[2,131],33:[2,131],34:[2,131],37:[2,131],40:[2,131],44:198,53:[2,131],55:[2,131],58:[2,131],60:[2,131],65:[2,131],66:[2,131],67:[2,131],68:[2,131],73:[2,131],79:[2,131],103:[2,131],104:197,111:[1,45]},{5:[2,33],8:[2,33],10:[2,33],12:[2,33],14:[2,33],16:[2,33],29:[2,33],32:[2,33],33:[2,33],34:[2,33],37:[2,33],40:[2,33],53:[2,33],54:[1,199],55:[2,33],58:[2,33],60:[2,33],65:[2,33],66:[2,33],67:[2,33],68:[2,33],73:[2,33],79:[2,33],103:[2,33]},{5:[2,36],8:[2,36],10:[2,36],12:[2,36],14:[2,36],16:[2,36],29:[2,36],32:[2,36],33:[2,36],34:[2,36],37:[2,36],40:[2,36],53:[2,36],55:[2,36],58:[2,36],60:[2,36],65:[2,36],66:[2,36],67:[2,36],68:[2,36],73:[2,36],79:[2,36],103:[2,36]},{13:[2,79],28:[2,79],58:[2,37],60:[2,37],63:[2,37],111:[2,79],112:[1,200]},{8:[1,202],62:[2,117],72:201},{8:[2,116],62:[2,116],112:[1,203]},{8:[2,52],28:[1,204],62:[2,52],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[2,52]},{8:[1,206],77:205,78:[2,125]},{8:[2,124],78:[2,124],112:[1,207]},{28:[1,208]},{5:[2,2],8:[2,2],10:[2,2],12:[2,2],13:[2,2],14:[2,2],16:[2,2],28:[2,2],29:[2,2],32:[2,2],33:[2,2],34:[2,2],37:[2,2],40:[2,2],53:[2,2],54:[2,2],55:[2,2],58:[2,2],59:[2,2],60:[2,2],62:[2,2],63:[2,2],65:[2,2],66:[2,2],67:[2,2],68:[2,2],73:[2,2],78:[2,2],79:[2,2],87:[2,2],88:[2,2],89:[2,2],90:[2,2],91:[2,2],92:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],101:[2,2],103:[2,2],106:[2,2],109:[2,2],111:[2,2],112:[2,2]},{8:[2,55],13:[2,55],28:[2,55],58:[2,55],59:[2,55],60:[2,55],62:[2,55],63:[2,55],78:[2,55],87:[2,55],88:[2,55],89:[2,55],90:[2,55],91:[2,55],92:[2,55],93:[2,55],94:[2,55],95:[2,55],96:[2,55],97:[2,55],98:[2,55],99:[2,55],100:[2,55],101:[2,55],106:[2,55],109:[2,55],111:[2,55],112:[2,55]},{12:[2,128],58:[2,128],59:[2,128],60:[2,128],65:[2,128],66:[2,128],67:[2,128],68:[2,128],73:[2,128],79:[2,128],85:[2,128],86:[2,128]},{12:[2,136],58:[2,136],60:[2,136],65:[2,136],66:[2,136],67:[2,136],68:[2,136],73:[2,136],79:[2,136]},{12:[2,138],58:[2,138],60:[2,138],65:[2,138],66:[2,138],67:[2,138],68:[2,138],73:[2,138],79:[2,138],85:[2,138],86:[2,138]},{58:[2,37],59:[2,110],60:[2,37],63:[2,37],112:[2,110]},{5:[2,77],8:[2,77],10:[2,77],12:[2,77],14:[2,77],16:[2,77],29:[2,77],32:[2,77],33:[2,77],34:[2,77],37:[2,77],40:[2,77],53:[2,77],55:[2,77],58:[2,77],60:[2,77],65:[2,77],66:[2,77],67:[2,77],68:[2,77],73:[2,77],79:[2,77],103:[2,77]},{5:[2,132],8:[2,132],10:[2,132],12:[2,132],14:[2,132],16:[2,132],29:[2,132],32:[2,132],33:[2,132],34:[2,132],37:[2,132],40:[2,132],53:[2,132],55:[2,132],58:[2,132],60:[2,132],65:[2,132],66:[2,132],67:[2,132],68:[2,132],73:[2,132],79:[2,132],103:[2,132]},{25:210,28:[1,209],53:[1,26]},{12:[2,134],58:[2,134],60:[2,134],65:[2,134],66:[2,134],67:[2,134],68:[2,134],73:[2,134],79:[2,134]},{62:[1,211]},{62:[2,118]},{8:[2,114],12:[2,114],58:[2,114],60:[2,114],62:[2,114],65:[2,114],66:[2,114],67:[2,114],68:[2,114],73:[2,114],79:[2,114],85:[2,114],86:[2,114]},{12:[1,72],18:75,23:81,31:212,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{78:[1,213]},{78:[2,126]},{8:[2,122],12:[2,122],78:[2,122]},{12:[1,72],18:75,23:81,31:214,56:73,57:28,58:[1,23],60:[1,34],65:[1,30],66:[1,31],67:[1,32],68:[1,33],73:[1,35],79:[1,36],84:74,85:[1,76],86:[1,77]},{6:215,7:[1,90]},{5:[2,35],8:[2,35],10:[2,35],12:[2,35],14:[2,35],16:[2,35],29:[2,35],32:[2,35],33:[2,35],34:[2,35],37:[2,35],40:[2,35],53:[2,35],55:[2,35],58:[2,35],60:[2,35],65:[2,35],66:[2,35],67:[2,35],68:[2,35],73:[2,35],79:[2,35],103:[2,35]},{8:[2,49],13:[2,49],28:[2,49],58:[2,49],59:[2,49],60:[2,49],62:[2,49],63:[2,49],78:[2,49],87:[2,49],88:[2,49],89:[2,49],90:[2,49],91:[2,49],92:[2,49],93:[2,49],94:[2,49],95:[2,49],96:[2,49],97:[2,49],98:[2,49],99:[2,49],100:[2,49],101:[2,49],106:[2,49],109:[2,49],111:[2,49],112:[2,49]},{8:[2,53],62:[2,53],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[2,53]},{8:[2,50],13:[2,50],28:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],63:[2,50],78:[2,50],87:[2,50],88:[2,50],89:[2,50],90:[2,50],91:[2,50],92:[2,50],93:[2,50],94:[2,50],95:[2,50],96:[2,50],97:[2,50],98:[2,50],99:[2,50],100:[2,50],101:[2,50],106:[2,50],109:[2,50],111:[2,50],112:[2,50]},{8:[2,54],78:[2,54],87:[1,119],88:[1,120],89:[1,121],90:[1,122],91:[1,123],92:[1,124],93:[1,125],94:[1,126],95:[1,127],96:[1,128],97:[1,129],98:[1,130],99:[1,131],100:[1,132],101:[1,133],112:[2,54]},{5:[2,34],8:[2,34],10:[2,34],12:[2,34],14:[2,34],16:[2,34],29:[2,34],32:[2,34],33:[2,34],34:[2,34],37:[2,34],40:[2,34],53:[2,34],55:[2,34],58:[2,34],60:[2,34],65:[2,34],66:[2,34],67:[2,34],68:[2,34],73:[2,34],79:[2,34],103:[2,34]}],
defaultActions: {37:[2,1],44:[2,92],50:[2,31],51:[2,32],93:[2,85],94:[2,86],96:[2,89],97:[2,88],110:[2,20],112:[2,21],114:[2,22],144:[2,84],147:[2,90],202:[2,118],206:[2,126]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    indents = [''];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* line comment */
break;
case 1:this.begin("comment");
break;
case 2:throw new Error("unclosed block comment");
break;
case 3:this.popState();
break;
case 4:/* skip comment */
break;
case 5:

    var tokens = [];

    while (indents.length > 1) {
        tokens.unshift('END');
        indents.shift();
    }

    tokens.unshift('EOF');
    return tokens;
				        
break;
case 6:this.begin("indent");
break;
case 7:/* ignore blank lines */
break;
case 8:

    // process indentation

    this.popState();

    if (yy_.yyleng > indents[0].length) {
        indents.unshift(yy_.yytext);
        return 7;
    }

    if (yy_.yyleng < indents[0].length) {

        // todo throw on mismatch between indent and what we pop?

        var tokens = [];

        while (yy_.yyleng < indents[0].length) {

            indents.shift();
            tokens.push('END');
        }

        return tokens;
    }
                        
break;
case 9:/* ignore all other whitespace */
break;
case 10:return 65 // none, null, void, empty, blank, nada, nothing, zip, nil, missing, undefined, undef? some symbol? () empty parens?
break;
case 11:return 66
break;
case 12:return 67
break;
case 13:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 68;
break;
case 14:return 60
break;
case 15:return 62
break;
case 16:return 58
break;
case 17:return 59
break;
case 18:return 73
break;
case 19:return 78
break;
case 20:return 112
break;
case 21:return 79
break;
case 22:return 28
break;
case 23:return 13
break;
case 24:return 109
break;
case 25:return 'BS'
break;
case 26:return 101
break;
case 27:return 63
break;
case 28:return 94
break;
case 29:return 95
break;
case 30:return 96
break;
case 31:return 97
break;
case 32:return 98
break;
case 33:return 99
break;
case 34:return 86
break;
case 35:return 51
break;
case 36:return 52
break;
case 37:return 46
break;
case 38:return 47
break;
case 39:return 48
break;
case 40:return 49
break;
case 41:return 50
break;
case 42:return '->'
break;
case 43:return 106 // future connector
break;
case 44:return '>>' // stream connector
break;
case 45:return 87
break;
case 46:return 88
break;
case 47:return 89
break;
case 48:return 90
break;
case 49:return 91
break;
case 50:return 92
break;
case 51:return 93
break;
case 52:return 45
break;
case 53:return '?'
break;
case 54:return 85
break;
case 55:return 14
break;
case 56:return 16
break;
case 57:return 27
break;
case 58:return 10
break;
case 59:return 53
break;
case 60:return 54
break;
case 61:return 111      // failed?
break;
case 62:return 55
break;
case 63:return 103      // when, on, release, send, dispatch, fire?
break;
case 64:return 100
break;
case 65:return 32
break;
case 66:return 34
break;
case 67:return 37
break;
case 68:return 'MUTE'
break;
case 69:return 40    // recovers from an error. recover? rebound?
break;
case 70:return 12
break;
case 71:return 'INVALID'
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:$)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s*$)/,/^(?:\n+)/,/^(?:\s*\n+)/,/^(?:\s*)/,/^(?:\s+)/,/^(?:nil\b)/,/^(?:true|false\b)/,/^(?:(-?([0-9])+(\.([0-9])+)?\b))/,/^(?:"[^\"]*")/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:~)/,/^(?:\\)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&|and\b)/,/^(?:\|\||or\b)/,/^(?:!|not\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:->)/,/^(?:=>)/,/^(?:>>)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\?)/,/^(?:#)/,/^(?:define\b)/,/^(?:distinguish\b)/,/^(?:is\b)/,/^(?:receive\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:catch\b)/,/^(?:while\b)/,/^(?:after\b)/,/^(?:in\b)/,/^(?:skip\b)/,/^(?:reply\b)/,/^(?:fail\b)/,/^(?:mute\b)/,/^(?:replace\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:.)/],
conditions: {"indent":{"rules":[7,8],"inclusive":false},"comment":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}